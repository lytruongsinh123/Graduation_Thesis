
CMSIS-F7dien.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e44  0800b3c0  0800b3c0  0001b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031204  08031204  00050f34  2**0
                  CONTENTS
  4 .ARM          00000008  08031204  08031204  00041204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803120c  0803120c  00050f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803120c  0803120c  0004120c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031210  08031210  00041210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f34  20000000  08031214  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021440  20000f34  08032148  00050f34  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20022374  08032148  00052374  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050f34  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017db6  00000000  00000000  00050f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390d  00000000  00000000  00068d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0006c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  0006d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b06  00000000  00000000  0006e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001329c  00000000  00000000  00097e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2a9  00000000  00000000  000ab122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000013e  00000000  00000000  001a93cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  001a950c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000392f  00000000  00000000  001addcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000f34 	.word	0x20000f34
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3a8 	.word	0x0800b3a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000f38 	.word	0x20000f38
 800020c:	0800b3a8 	.word	0x0800b3a8

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b96e 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8083 	bne.w	8000e02 <__udivmoddi4+0x116>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d947      	bls.n	8000d92 <__udivmoddi4+0xa6>
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	b142      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d08:	f1c2 0020 	rsb	r0, r2, #32
 8000d0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d10:	4091      	lsls	r1, r2
 8000d12:	4097      	lsls	r7, r2
 8000d14:	ea40 0c01 	orr.w	ip, r0, r1
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d1e:	0c23      	lsrs	r3, r4, #16
 8000d20:	fbbc f6f8 	udiv	r6, ip, r8
 8000d24:	fa1f fe87 	uxth.w	lr, r7
 8000d28:	fb08 c116 	mls	r1, r8, r6, ip
 8000d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d30:	fb06 f10e 	mul.w	r1, r6, lr
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x60>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 8119 	bcs.w	8000f74 <__udivmoddi4+0x288>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 8116 	bls.w	8000f74 <__udivmoddi4+0x288>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 8105 	bcs.w	8000f78 <__udivmoddi4+0x28c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8102 	bls.w	8000f78 <__udivmoddi4+0x28c>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa0>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	b902      	cbnz	r2, 8000d96 <__udivmoddi4+0xaa>
 8000d94:	deff      	udf	#255	; 0xff
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d150      	bne.n	8000e40 <__udivmoddi4+0x154>
 8000d9e:	1bcb      	subs	r3, r1, r7
 8000da0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da4:	fa1f f887 	uxth.w	r8, r7
 8000da8:	2601      	movs	r6, #1
 8000daa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dae:	0c21      	lsrs	r1, r4, #16
 8000db0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0xe4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0xe2>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	f200 80e9 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000dce:	4684      	mov	ip, r0
 8000dd0:	1ac9      	subs	r1, r1, r3
 8000dd2:	b2a3      	uxth	r3, r4
 8000dd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ddc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000de0:	fb08 f800 	mul.w	r8, r8, r0
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x10c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x10a>
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	f200 80d9 	bhi.w	8000fa8 <__udivmoddi4+0x2bc>
 8000df6:	4618      	mov	r0, r3
 8000df8:	eba4 0408 	sub.w	r4, r4, r8
 8000dfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e00:	e7bf      	b.n	8000d82 <__udivmoddi4+0x96>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x12e>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80b1 	beq.w	8000f6e <__udivmoddi4+0x282>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x1cc>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0x140>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80b8 	bhi.w	8000f9c <__udivmoddi4+0x2b0>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	468c      	mov	ip, r1
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0a8      	beq.n	8000d8c <__udivmoddi4+0xa0>
 8000e3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e3e:	e7a5      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f603 	lsr.w	r6, r0, r3
 8000e48:	4097      	lsls	r7, r2
 8000e4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e52:	40d9      	lsrs	r1, r3
 8000e54:	4330      	orrs	r0, r6
 8000e56:	0c03      	lsrs	r3, r0, #16
 8000e58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e5c:	fa1f f887 	uxth.w	r8, r7
 8000e60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb06 f108 	mul.w	r1, r6, r8
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e72:	d909      	bls.n	8000e88 <__udivmoddi4+0x19c>
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e7a:	f080 808d 	bcs.w	8000f98 <__udivmoddi4+0x2ac>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 808a 	bls.w	8000f98 <__udivmoddi4+0x2ac>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	443b      	add	r3, r7
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b281      	uxth	r1, r0
 8000e8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb00 f308 	mul.w	r3, r0, r8
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x1c4>
 8000ea0:	1879      	adds	r1, r7, r1
 8000ea2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea6:	d273      	bcs.n	8000f90 <__udivmoddi4+0x2a4>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d971      	bls.n	8000f90 <__udivmoddi4+0x2a4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4439      	add	r1, r7
 8000eb0:	1acb      	subs	r3, r1, r3
 8000eb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eb6:	e778      	b.n	8000daa <__udivmoddi4+0xbe>
 8000eb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ebc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ec0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ed2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ed6:	431f      	orrs	r7, r3
 8000ed8:	0c3b      	lsrs	r3, r7, #16
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fa1f f884 	uxth.w	r8, r4
 8000ee2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ee6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eea:	fb09 fa08 	mul.w	sl, r9, r8
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x220>
 8000efa:	1861      	adds	r1, r4, r1
 8000efc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f00:	d248      	bcs.n	8000f94 <__udivmoddi4+0x2a8>
 8000f02:	458a      	cmp	sl, r1
 8000f04:	d946      	bls.n	8000f94 <__udivmoddi4+0x2a8>
 8000f06:	f1a9 0902 	sub.w	r9, r9, #2
 8000f0a:	4421      	add	r1, r4
 8000f0c:	eba1 010a 	sub.w	r1, r1, sl
 8000f10:	b2bf      	uxth	r7, r7
 8000f12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f1e:	fb00 f808 	mul.w	r8, r0, r8
 8000f22:	45b8      	cmp	r8, r7
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x24a>
 8000f26:	19e7      	adds	r7, r4, r7
 8000f28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f2c:	d22e      	bcs.n	8000f8c <__udivmoddi4+0x2a0>
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d92c      	bls.n	8000f8c <__udivmoddi4+0x2a0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4427      	add	r7, r4
 8000f36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f3a:	eba7 0708 	sub.w	r7, r7, r8
 8000f3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f42:	454f      	cmp	r7, r9
 8000f44:	46c6      	mov	lr, r8
 8000f46:	4649      	mov	r1, r9
 8000f48:	d31a      	bcc.n	8000f80 <__udivmoddi4+0x294>
 8000f4a:	d017      	beq.n	8000f7c <__udivmoddi4+0x290>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x27a>
 8000f4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f52:	eb67 0701 	sbc.w	r7, r7, r1
 8000f56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f5a:	40f2      	lsrs	r2, r6
 8000f5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f60:	40f7      	lsrs	r7, r6
 8000f62:	e9c5 2700 	strd	r2, r7, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	462e      	mov	r6, r5
 8000f70:	4628      	mov	r0, r5
 8000f72:	e70b      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000f74:	4606      	mov	r6, r0
 8000f76:	e6e9      	b.n	8000d4c <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fd      	b.n	8000d78 <__udivmoddi4+0x8c>
 8000f7c:	4543      	cmp	r3, r8
 8000f7e:	d2e5      	bcs.n	8000f4c <__udivmoddi4+0x260>
 8000f80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f84:	eb69 0104 	sbc.w	r1, r9, r4
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e7df      	b.n	8000f4c <__udivmoddi4+0x260>
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e7d2      	b.n	8000f36 <__udivmoddi4+0x24a>
 8000f90:	4660      	mov	r0, ip
 8000f92:	e78d      	b.n	8000eb0 <__udivmoddi4+0x1c4>
 8000f94:	4681      	mov	r9, r0
 8000f96:	e7b9      	b.n	8000f0c <__udivmoddi4+0x220>
 8000f98:	4666      	mov	r6, ip
 8000f9a:	e775      	b.n	8000e88 <__udivmoddi4+0x19c>
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	e74a      	b.n	8000e36 <__udivmoddi4+0x14a>
 8000fa0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa4:	4439      	add	r1, r7
 8000fa6:	e713      	b.n	8000dd0 <__udivmoddi4+0xe4>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	443c      	add	r4, r7
 8000fac:	e724      	b.n	8000df8 <__udivmoddi4+0x10c>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb8:	f3bf 8f4f 	dsb	sy
}
 8000fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fbe:	f3bf 8f6f 	isb	sy
}
 8000fc2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <SCB_EnableICache+0x48>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fcc:	f3bf 8f4f 	dsb	sy
}
 8000fd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd2:	f3bf 8f6f 	isb	sy
}
 8000fd6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SCB_EnableICache+0x48>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SCB_EnableICache+0x48>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
}
 8000fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fea:	f3bf 8f6f 	isb	sy
}
 8000fee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <SCB_EnableDCache+0x84>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <SCB_EnableDCache+0x84>)
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0b5b      	lsrs	r3, r3, #13
 8001020:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001024:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800102e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001038:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800103e:	4911      	ldr	r1, [pc, #68]	; (8001084 <SCB_EnableDCache+0x84>)
 8001040:	4313      	orrs	r3, r2
 8001042:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ef      	bne.n	8001030 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	60fa      	str	r2, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1e5      	bne.n	8001026 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800105a:	f3bf 8f4f 	dsb	sy
}
 800105e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <SCB_EnableDCache+0x84>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <SCB_EnableDCache+0x84>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800106c:	f3bf 8f4f 	dsb	sy
}
 8001070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001072:	f3bf 8f6f 	isb	sy
}
 8001076:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800108c:	f7ff ff92 	bl	8000fb4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001090:	f7ff ffb6 	bl	8001000 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f001 f937 	bl	8002306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f84c 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f9b8 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a0:	f000 f998 	bl	80013d4 <MX_DMA_Init>
  MX_ADC3_Init();
 80010a4:	f000 f8b2 	bl	800120c <MX_ADC3_Init>
  MX_CRC_Init();
 80010a8:	f000 f902 	bl	80012b0 <MX_CRC_Init>
  MX_TIM2_Init();
 80010ac:	f000 f922 	bl	80012f4 <MX_TIM2_Init>
  MX_X_CUBE_AI_Init();
 80010b0:	f004 f8c4 	bl	800523c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  Preprocessing_Init();
 80010b4:	f000 fec2 	bl	8001e3c <Preprocessing_Init>
  SpectrColIndex = 0;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0x88>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)ADC_buffer, ADC_BUF_LEN);
 80010be:	f44f 4284 	mov.w	r2, #16896	; 0x4200
 80010c2:	4914      	ldr	r1, [pc, #80]	; (8001114 <main+0x8c>)
 80010c4:	4814      	ldr	r0, [pc, #80]	; (8001118 <main+0x90>)
 80010c6:	f001 f9e3 	bl	8002490 <HAL_ADC_Start_DMA>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <main+0x94>)
 80010ce:	f003 f9f9 	bl	80044c4 <HAL_TIM_IC_Start_IT>
  HAL_Delay(1000);
 80010d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d6:	f001 f973 	bl	80023c0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ind=hdma_adc3.Instance->NDTR;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <main+0x98>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <main+0x9c>)
 80010e2:	6013      	str	r3, [r2, #0]
	  write=ADC_BUF_LEN-ind;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <main+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5c3 4384 	rsb	r3, r3, #16896	; 0x4200
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <main+0xa0>)
 80010ee:	6013      	str	r3, [r2, #0]
	  Sort_ADC_buffer();
 80010f0:	f000 fa4c 	bl	800158c <Sort_ADC_buffer>
	  Mel_array();
 80010f4:	f000 fa88 	bl	8001608 <Mel_array>
	  PowerTodB(aSpectrogram);
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <main+0xa4>)
 80010fa:	f000 fd6f 	bl	8001bdc <PowerTodB>
	  ai_run(aSpectrogram, data_out);
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <main+0xa8>)
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <main+0xa4>)
 8001102:	f004 f867 	bl	80051d4 <ai_run>
	  Find_max_output_ind();
 8001106:	f000 faef 	bl	80016e8 <Find_max_output_ind>
	  Wakeup();
 800110a:	f000 fb55 	bl	80017b8 <Wakeup>
  {
 800110e:	e7e4      	b.n	80010da <main+0x52>
 8001110:	20001ec8 	.word	0x20001ec8
 8001114:	20018f5c 	.word	0x20018f5c
 8001118:	2000fa9c 	.word	0x2000fa9c
 800111c:	20018f1c 	.word	0x20018f1c
 8001120:	2000fa3c 	.word	0x2000fa3c
 8001124:	20001f38 	.word	0x20001f38
 8001128:	20001f3c 	.word	0x20001f3c
 800112c:	20000f50 	.word	0x20000f50
 8001130:	20017ee8 	.word	0x20017ee8

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fe90 	bl	8009e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SystemClock_Config+0xd0>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <SystemClock_Config+0xd0>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <SystemClock_Config+0xd0>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <SystemClock_Config+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <SystemClock_Config+0xd4>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800119c:	2308      	movs	r3, #8
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80011a0:	23c8      	movs	r3, #200	; 0xc8
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fce1 	bl	8003b78 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fe84 	bl	8001ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c0:	f002 fc8a 	bl	8003ad8 <HAL_PWREx_EnableOverDrive>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 fe7d 	bl	8001ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2106      	movs	r1, #6
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 ff67 	bl	80040c0 <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011f8:	f000 fe66 	bl	8001ec8 <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3750      	adds	r7, #80	; 0x50
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC3_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800122a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC3_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC3_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC3_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC3_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC3_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC3_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC3_Init+0x98>)
 800126e:	f001 f8cb 	bl	8002408 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 fe26 	bl	8001ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800127c:	2308      	movs	r3, #8
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001284:	2307      	movs	r3, #7
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC3_Init+0x98>)
 800128e:	f001 fa0b 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 fe16 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000fa9c 	.word	0x2000fa9c
 80012a8:	40012200 	.word	0x40012200
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_CRC_Init+0x3c>)
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <MX_CRC_Init+0x40>)
 80012b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_CRC_Init+0x3c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_CRC_Init+0x3c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_CRC_Init+0x3c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_CRC_Init+0x3c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_CRC_Init+0x3c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_CRC_Init+0x3c>)
 80012da:	f001 fdbd 	bl	8002e58 <HAL_CRC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012e4:	f000 fdf0 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000fa14 	.word	0x2000fa14
 80012f0:	40023000 	.word	0x40023000

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_TIM2_Init+0xdc>)
 800132a:	2264      	movs	r2, #100	; 0x64
 800132c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001336:	f04f 32ff 	mov.w	r2, #4294967295
 800133a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_TIM2_Init+0xdc>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <MX_TIM2_Init+0xdc>)
 800134a:	f003 f85b 	bl	8004404 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 fdb8 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	4619      	mov	r1, r3
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001366:	f003 f9b7 	bl	80046d8 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001370:	f000 fdaa 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001376:	f003 f870 	bl	800445a <HAL_TIM_IC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001380:	f000 fda2 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_TIM2_Init+0xdc>)
 8001394:	f003 fcf0 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800139e:	f000 fd93 	bl	8001ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013a2:	230a      	movs	r3, #10
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80013ae:	230f      	movs	r3, #15
 80013b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0xdc>)
 80013ba:	f003 f8f1 	bl	80045a0 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013c4:	f000 fd80 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	; 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20018f1c 	.word	0x20018f1c

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_DMA_Init+0x38>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <MX_DMA_Init+0x38>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_DMA_Init+0x38>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f001 fcf7 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013fc:	2038      	movs	r0, #56	; 0x38
 80013fe:	f001 fd10 	bl	8002e22 <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b53      	ldr	r3, [pc, #332]	; (8001574 <MX_GPIO_Init+0x164>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <MX_GPIO_Init+0x164>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <MX_GPIO_Init+0x164>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <MX_GPIO_Init+0x164>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <MX_GPIO_Init+0x164>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <MX_GPIO_Init+0x164>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <MX_GPIO_Init+0x164>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a46      	ldr	r2, [pc, #280]	; (8001574 <MX_GPIO_Init+0x164>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <MX_GPIO_Init+0x164>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <MX_GPIO_Init+0x164>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a40      	ldr	r2, [pc, #256]	; (8001574 <MX_GPIO_Init+0x164>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <MX_GPIO_Init+0x164>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <MX_GPIO_Init+0x164>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <MX_GPIO_Init+0x164>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MX_GPIO_Init+0x164>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <MX_GPIO_Init+0x164>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <MX_GPIO_Init+0x164>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <MX_GPIO_Init+0x164>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|COI_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0110 	movw	r1, #16400	; 0x4010
 80014bc:	482e      	ldr	r0, [pc, #184]	; (8001578 <MX_GPIO_Init+0x168>)
 80014be:	f002 faf1 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, IR_LED_Pin|LED_USER_Pin|LED4_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2107      	movs	r1, #7
 80014c6:	482d      	ldr	r0, [pc, #180]	; (800157c <MX_GPIO_Init+0x16c>)
 80014c8:	f002 faec 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED1_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	21c0      	movs	r1, #192	; 0xc0
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <MX_GPIO_Init+0x170>)
 80014d2:	f002 fae7 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	482a      	ldr	r0, [pc, #168]	; (8001584 <MX_GPIO_Init+0x174>)
 80014dc:	f002 fae2 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin COI_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|COI_Pin;
 80014e0:	f244 0310 	movw	r3, #16400	; 0x4010
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	481f      	ldr	r0, [pc, #124]	; (8001578 <MX_GPIO_Init+0x168>)
 80014fa:	f002 f90f 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_LED_Pin LED_USER_Pin LED4_Pin */
  GPIO_InitStruct.Pin = IR_LED_Pin|LED_USER_Pin|LED4_Pin;
 80014fe:	2307      	movs	r3, #7
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4819      	ldr	r0, [pc, #100]	; (800157c <MX_GPIO_Init+0x16c>)
 8001516:	f002 f901 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0x170>)
 8001532:	f002 f8f3 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <MX_GPIO_Init+0x178>)
 800154c:	f002 f8e6 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001558:	2302      	movs	r3, #2
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_GPIO_Init+0x174>)
 8001568:	f002 f8d8 	bl	800371c <HAL_GPIO_Init>

}
 800156c:	bf00      	nop
 800156e:	3730      	adds	r7, #48	; 0x30
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400
 800157c:	40022000 	.word	0x40022000
 8001580:	40021800 	.word	0x40021800
 8001584:	40021c00 	.word	0x40021c00
 8001588:	40021400 	.word	0x40021400

0800158c <Sort_ADC_buffer>:

/* USER CODE BEGIN 4 */
//-----Sắp xếp lại dữ liệu----//
void Sort_ADC_buffer()
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
	for(int i=0;i<ind;i++)
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e00d      	b.n	80015b4 <Sort_ADC_buffer+0x28>
		   ADC_buffer_sort[i]=ADC_buffer[i+write];
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <Sort_ADC_buffer+0x6c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <Sort_ADC_buffer+0x70>)
 80015a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <Sort_ADC_buffer+0x74>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<ind;i++)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <Sort_ADC_buffer+0x78>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3ec      	bcc.n	8001598 <Sort_ADC_buffer+0xc>
	for(int i=0;i<write;i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	e00d      	b.n	80015e0 <Sort_ADC_buffer+0x54>
		   ADC_buffer_sort[i+ind]=ADC_buffer[i];
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <Sort_ADC_buffer+0x78>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	490b      	ldr	r1, [pc, #44]	; (80015fc <Sort_ADC_buffer+0x70>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <Sort_ADC_buffer+0x74>)
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<write;i++)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <Sort_ADC_buffer+0x6c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3ec      	bcc.n	80015c4 <Sort_ADC_buffer+0x38>
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20001f3c 	.word	0x20001f3c
 80015fc:	20018f5c 	.word	0x20018f5c
 8001600:	2000fae4 	.word	0x2000fae4
 8001604:	20001f38 	.word	0x20001f38

08001608 <Mel_array>:

//-----------Mảng MelSpectrogram 30x32-----//
void Mel_array()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <Mel_array+0xc8>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e04f      	b.n	80016b6 <Mel_array+0xae>
	{
		for(int i=0; i<1024; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e027      	b.n	800166c <Mel_array+0x64>
		  	pBuffer[i]=(ADC_buffer_sort[ColIndex*HOPLENGTH+i]-2047.0)/2047.0;
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <Mel_array+0xc8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	025a      	lsls	r2, r3, #9
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <Mel_array+0xcc>)
 8001628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fff1 	bl	8000614 <__aeabi_i2d>
 8001632:	a325      	add	r3, pc, #148	; (adr r3, 80016c8 <Mel_array+0xc0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fe9e 	bl	8000378 <__aeabi_dsub>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	a320      	add	r3, pc, #128	; (adr r3, 80016c8 <Mel_array+0xc0>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f977 	bl	800093c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fae1 	bl	8000c1c <__aeabi_d2f>
 800165a:	4602      	mov	r2, r0
 800165c:	491e      	ldr	r1, [pc, #120]	; (80016d8 <Mel_array+0xd0>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
		for(int i=0; i<1024; i++)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	dbd3      	blt.n	800161c <Mel_array+0x14>
		MelSpectrogramColumn(&S_MelSpectr, pBuffer, aColBuffer);
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <Mel_array+0xd4>)
 8001676:	4918      	ldr	r1, [pc, #96]	; (80016d8 <Mel_array+0xd0>)
 8001678:	4819      	ldr	r0, [pc, #100]	; (80016e0 <Mel_array+0xd8>)
 800167a:	f003 fc93 	bl	8004fa4 <MelSpectrogramColumn>
		for (uint32_t j = 0; j < NMELS; j++)
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	e010      	b.n	80016a6 <Mel_array+0x9e>
		{
		  	aSpectrogram[j * SPECTROGRAM_COLS + ColIndex] = aColBuffer[j];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <Mel_array+0xc8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4913      	ldr	r1, [pc, #76]	; (80016dc <Mel_array+0xd4>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	440a      	add	r2, r1
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4912      	ldr	r1, [pc, #72]	; (80016e4 <Mel_array+0xdc>)
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < NMELS; j++)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b1d      	cmp	r3, #29
 80016aa:	d9eb      	bls.n	8001684 <Mel_array+0x7c>
	for (ColIndex=0; ColIndex<SPECTROGRAM_COLS; ColIndex++)
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <Mel_array+0xc8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <Mel_array+0xc8>)
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <Mel_array+0xc8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b1f      	cmp	r3, #31
 80016bc:	d9ab      	bls.n	8001616 <Mel_array+0xe>
		}
	}
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	00000000 	.word	0x00000000
 80016cc:	409ffc00 	.word	0x409ffc00
 80016d0:	20001f40 	.word	0x20001f40
 80016d4:	2000fae4 	.word	0x2000fae4
 80016d8:	2002135c 	.word	0x2002135c
 80016dc:	20001e50 	.word	0x20001e50
 80016e0:	20001f30 	.word	0x20001f30
 80016e4:	20000f50 	.word	0x20000f50

080016e8 <Find_max_output_ind>:

//-----Tìm vị trí và giá trị lớn nhất của output---//
void Find_max_output_ind()
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
	confirm2=max_output_ind;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <Find_max_output_ind+0xb8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <Find_max_output_ind+0xbc>)
 80016f4:	6013      	str	r3, [r2, #0]
	max_output_ind=0;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <Find_max_output_ind+0xb8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
	max_output=data_out[0];
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <Find_max_output_ind+0xc0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2a      	ldr	r2, [pc, #168]	; (80017ac <Find_max_output_ind+0xc4>)
 8001702:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 8001704:	2301      	movs	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	e01a      	b.n	8001740 <Find_max_output_ind+0x58>
	{
		if(data_out[i]>max_output)
 800170a:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <Find_max_output_ind+0xc0>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <Find_max_output_ind+0xc4>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	dd09      	ble.n	800173a <Find_max_output_ind+0x52>
		{
			max_output=data_out[i];
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <Find_max_output_ind+0xc0>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <Find_max_output_ind+0xc4>)
 8001732:	6013      	str	r3, [r2, #0]
			max_output_ind=i;
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <Find_max_output_ind+0xb8>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
	for (int i=1; i<n_label;i++)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b09      	cmp	r3, #9
 8001744:	dde1      	ble.n	800170a <Find_max_output_ind+0x22>
//	if ((max_output>0.8)&(max_output_ind==1||max_output_ind==3||max_output_ind==5||max_output_ind==7))
//		{
//			confirm1 = max_output_ind*11111;
//		}
//	else
		if ((max_output>0.9)&(max_output_ind!=0))
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Find_max_output_ind+0xc4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe ff74 	bl	8000638 <__aeabi_f2d>
 8001750:	2301      	movs	r3, #1
 8001752:	461c      	mov	r4, r3
 8001754:	a310      	add	r3, pc, #64	; (adr r3, 8001798 <Find_max_output_ind+0xb0>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7ff fa55 	bl	8000c08 <__aeabi_dcmpgt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <Find_max_output_ind+0x80>
 8001764:	2300      	movs	r3, #0
 8001766:	461c      	mov	r4, r3
 8001768:	b2e2      	uxtb	r2, r4
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <Find_max_output_ind+0xb8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4013      	ands	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <Find_max_output_ind+0xa6>
		{
			confirm1 = max_output_ind*111111;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <Find_max_output_ind+0xb8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <Find_max_output_ind+0xc8>)
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <Find_max_output_ind+0xcc>)
 800178c:	6013      	str	r3, [r2, #0]
		}
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	3feccccc 	.word	0x3feccccc
 80017a0:	2000fa10 	.word	0x2000fa10
 80017a4:	20017f14 	.word	0x20017f14
 80017a8:	20017ee8 	.word	0x20017ee8
 80017ac:	20017f10 	.word	0x20017f10
 80017b0:	0001b207 	.word	0x0001b207
 80017b4:	20001f50 	.word	0x20001f50

080017b8 <Wakeup>:

void Wakeup()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	//----wakeup bang cam bien dien dung-----//
	if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET)
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	48bf      	ldr	r0, [pc, #764]	; (8001ac0 <Wakeup+0x308>)
 80017c2:	f002 f957 	bl	8003a74 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <Wakeup+0x24>
	{
		wake = 9;
 80017cc:	4bbd      	ldr	r3, [pc, #756]	; (8001ac4 <Wakeup+0x30c>)
 80017ce:	2209      	movs	r2, #9
 80017d0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2102      	movs	r1, #2
 80017d6:	48bc      	ldr	r0, [pc, #752]	; (8001ac8 <Wakeup+0x310>)
 80017d8:	f002 f964 	bl	8003aa4 <HAL_GPIO_WritePin>
	}

	//----wakeup bang keyword "tro ly" ------//
	if((wake == 0)&&(max_output_ind==9)&&(max_output>=0.98))  // nếu trước đó chưa tìm thấy key đánh thức và đột nhiên timf được
 80017dc:	4bb9      	ldr	r3, [pc, #740]	; (8001ac4 <Wakeup+0x30c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d120      	bne.n	8001826 <Wakeup+0x6e>
 80017e4:	4bb9      	ldr	r3, [pc, #740]	; (8001acc <Wakeup+0x314>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d11c      	bne.n	8001826 <Wakeup+0x6e>
 80017ec:	4bb8      	ldr	r3, [pc, #736]	; (8001ad0 <Wakeup+0x318>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff21 	bl	8000638 <__aeabi_f2d>
 80017f6:	a3ae      	add	r3, pc, #696	; (adr r3, 8001ab0 <Wakeup+0x2f8>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f9fa 	bl	8000bf4 <__aeabi_dcmpge>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <Wakeup+0x6e>
		  {
			  wake = 9;  // xét key wake lên 1
 8001806:	4baf      	ldr	r3, [pc, #700]	; (8001ac4 <Wakeup+0x30c>)
 8001808:	2209      	movs	r2, #9
 800180a:	601a      	str	r2, [r3, #0]
			  t1 = HAL_GetTick();  // bắt đầu đếm time 5s
 800180c:	f000 fdcc 	bl	80023a8 <HAL_GetTick>
 8001810:	4603      	mov	r3, r0
 8001812:	4ab0      	ldr	r2, [pc, #704]	; (8001ad4 <Wakeup+0x31c>)
 8001814:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2102      	movs	r1, #2
 800181a:	48ab      	ldr	r0, [pc, #684]	; (8001ac8 <Wakeup+0x310>)
 800181c:	f002 f942 	bl	8003aa4 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 8001820:	20c8      	movs	r0, #200	; 0xc8
 8001822:	f000 fdcd 	bl	80023c0 <HAL_Delay>
//			  if (wake == 9)
//			  	  buzzer_beep();
		  }

	//------ Neu dang duoc danh thuc-------//
	if (wake == 9)
 8001826:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <Wakeup+0x30c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b09      	cmp	r3, #9
 800182c:	f040 81c6 	bne.w	8001bbc <Wakeup+0x404>
		  {
			  Find_max_output_ind();    // tim key action
 8001830:	f7ff ff5a 	bl	80016e8 <Find_max_output_ind>
			  if((max_output_ind!=9)&&(max_output_ind!=0)&&(max_output>0.85))  // tìm xem có key action được phát ra hay không
 8001834:	4ba5      	ldr	r3, [pc, #660]	; (8001acc <Wakeup+0x314>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	f000 819d 	beq.w	8001b78 <Wakeup+0x3c0>
 800183e:	4ba3      	ldr	r3, [pc, #652]	; (8001acc <Wakeup+0x314>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8198 	beq.w	8001b78 <Wakeup+0x3c0>
 8001848:	4ba1      	ldr	r3, [pc, #644]	; (8001ad0 <Wakeup+0x318>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fef3 	bl	8000638 <__aeabi_f2d>
 8001852:	a399      	add	r3, pc, #612	; (adr r3, 8001ab8 <Wakeup+0x300>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7ff f9d6 	bl	8000c08 <__aeabi_dcmpgt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 818b 	beq.w	8001b7a <Wakeup+0x3c2>
			  {
				  action = max_output_ind;  // nếu có xét keyaction lên 1 rồi thực hiện action
 8001864:	4b99      	ldr	r3, [pc, #612]	; (8001acc <Wakeup+0x314>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b9b      	ldr	r3, [pc, #620]	; (8001ad8 <Wakeup+0x320>)
 800186c:	601a      	str	r2, [r3, #0]
				  switch (action)
 800186e:	4b9a      	ldr	r3, [pc, #616]	; (8001ad8 <Wakeup+0x320>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	2b07      	cmp	r3, #7
 8001876:	f200 8180 	bhi.w	8001b7a <Wakeup+0x3c2>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <Wakeup+0xc8>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018a1 	.word	0x080018a1
 8001884:	080018ed 	.word	0x080018ed
 8001888:	08001943 	.word	0x08001943
 800188c:	08001999 	.word	0x08001999
 8001890:	080019e5 	.word	0x080019e5
 8001894:	08001a31 	.word	0x08001a31
 8001898:	08001a87 	.word	0x08001a87
 800189c:	08001b2d 	.word	0x08001b2d
				  {
				  case 1:
					  if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == GPIO_PIN_SET)
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	488e      	ldr	r0, [pc, #568]	; (8001adc <Wakeup+0x324>)
 80018a4:	f002 f8e6 	bl	8003a74 <HAL_GPIO_ReadPin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d10c      	bne.n	80018c8 <Wakeup+0x110>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2102      	movs	r1, #2
 80018b2:	4885      	ldr	r0, [pc, #532]	; (8001ac8 <Wakeup+0x310>)
 80018b4:	f002 f8f6 	bl	8003aa4 <HAL_GPIO_WritePin>
						  	  HAL_Delay(500);
 80018b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018bc:	f000 fd80 	bl	80023c0 <HAL_Delay>
						   	   wake = 0;
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <Wakeup+0x30c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
						   	   break;
 80018c6:	e158      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					  {
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	4883      	ldr	r0, [pc, #524]	; (8001adc <Wakeup+0x324>)
 80018ce:	f002 f8e9 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2102      	movs	r1, #2
 80018d6:	487c      	ldr	r0, [pc, #496]	; (8001ac8 <Wakeup+0x310>)
 80018d8:	f002 f8e4 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80018dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e0:	f000 fd6e 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 80018e4:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <Wakeup+0x30c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
						  break;
 80018ea:	e146      	b.n	8001b7a <Wakeup+0x3c2>
					  }

				  case 2:
					  if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == GPIO_PIN_SET)
 80018ec:	2110      	movs	r1, #16
 80018ee:	487c      	ldr	r0, [pc, #496]	; (8001ae0 <Wakeup+0x328>)
 80018f0:	f002 f8c0 	bl	8003a74 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10c      	bne.n	8001914 <Wakeup+0x15c>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2102      	movs	r1, #2
 80018fe:	4872      	ldr	r0, [pc, #456]	; (8001ac8 <Wakeup+0x310>)
 8001900:	f002 f8d0 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001908:	f000 fd5a 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 800190c:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <Wakeup+0x30c>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
						  break;
 8001912:	e132      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					  {
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4871      	ldr	r0, [pc, #452]	; (8001ae0 <Wakeup+0x328>)
 800191a:	f002 f8c3 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	4869      	ldr	r0, [pc, #420]	; (8001ac8 <Wakeup+0x310>)
 8001924:	f002 f8be 	bl	8003aa4 <HAL_GPIO_WritePin>
						  sendRaw(dieuhoa,253,38);
 8001928:	2226      	movs	r2, #38	; 0x26
 800192a:	21fd      	movs	r1, #253	; 0xfd
 800192c:	486d      	ldr	r0, [pc, #436]	; (8001ae4 <Wakeup+0x32c>)
 800192e:	f000 fa55 	bl	8001ddc <sendRaw>
						  HAL_Delay(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001936:	f000 fd43 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <Wakeup+0x30c>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
						  break;
 8001940:	e11b      	b.n	8001b7a <Wakeup+0x3c2>
					  }

				  case 3:
					  if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin) == GPIO_PIN_SET)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	4865      	ldr	r0, [pc, #404]	; (8001adc <Wakeup+0x324>)
 8001946:	f002 f895 	bl	8003a74 <HAL_GPIO_ReadPin>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10c      	bne.n	800196a <Wakeup+0x1b2>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2102      	movs	r1, #2
 8001954:	485c      	ldr	r0, [pc, #368]	; (8001ac8 <Wakeup+0x310>)
 8001956:	f002 f8a5 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f000 fd2f 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <Wakeup+0x30c>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
						  break;
 8001968:	e107      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					 	  {
						  	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	485b      	ldr	r0, [pc, #364]	; (8001adc <Wakeup+0x324>)
 8001970:	f002 f898 	bl	8003aa4 <HAL_GPIO_WritePin>
						  	  sendRaw(maychieu,67,38);
 8001974:	2226      	movs	r2, #38	; 0x26
 8001976:	2143      	movs	r1, #67	; 0x43
 8001978:	485b      	ldr	r0, [pc, #364]	; (8001ae8 <Wakeup+0x330>)
 800197a:	f000 fa2f 	bl	8001ddc <sendRaw>
							//  buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2102      	movs	r1, #2
 8001982:	4851      	ldr	r0, [pc, #324]	; (8001ac8 <Wakeup+0x310>)
 8001984:	f002 f88e 	bl	8003aa4 <HAL_GPIO_WritePin>
							  HAL_Delay(500);
 8001988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800198c:	f000 fd18 	bl	80023c0 <HAL_Delay>
							  wake = 0;
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <Wakeup+0x30c>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
							  break;
 8001996:	e0f0      	b.n	8001b7a <Wakeup+0x3c2>
					 	  }

				  case 4:
					  if (HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin) == GPIO_PIN_SET)
 8001998:	2101      	movs	r1, #1
 800199a:	484b      	ldr	r0, [pc, #300]	; (8001ac8 <Wakeup+0x310>)
 800199c:	f002 f86a 	bl	8003a74 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10c      	bne.n	80019c0 <Wakeup+0x208>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2102      	movs	r1, #2
 80019aa:	4847      	ldr	r0, [pc, #284]	; (8001ac8 <Wakeup+0x310>)
 80019ac:	f002 f87a 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b4:	f000 fd04 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <Wakeup+0x30c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
						  break;
 80019be:	e0dc      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					  	{
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2101      	movs	r1, #1
 80019c4:	4840      	ldr	r0, [pc, #256]	; (8001ac8 <Wakeup+0x310>)
 80019c6:	f002 f86d 	bl	8003aa4 <HAL_GPIO_WritePin>
						  //buzzer_beep2();
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	483e      	ldr	r0, [pc, #248]	; (8001ac8 <Wakeup+0x310>)
 80019d0:	f002 f868 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d8:	f000 fcf2 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <Wakeup+0x30c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
						  break;
 80019e2:	e0ca      	b.n	8001b7a <Wakeup+0x3c2>
					  	}
				  case 5:
					  if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == GPIO_PIN_RESET)
 80019e4:	2140      	movs	r1, #64	; 0x40
 80019e6:	483d      	ldr	r0, [pc, #244]	; (8001adc <Wakeup+0x324>)
 80019e8:	f002 f844 	bl	8003a74 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <Wakeup+0x254>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2102      	movs	r1, #2
 80019f6:	4834      	ldr	r0, [pc, #208]	; (8001ac8 <Wakeup+0x310>)
 80019f8:	f002 f854 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80019fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a00:	f000 fcde 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <Wakeup+0x30c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
						  break;
 8001a0a:	e0b6      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
						  {
						  	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	4832      	ldr	r0, [pc, #200]	; (8001adc <Wakeup+0x324>)
 8001a12:	f002 f847 	bl	8003aa4 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2102      	movs	r1, #2
 8001a1a:	482b      	ldr	r0, [pc, #172]	; (8001ac8 <Wakeup+0x310>)
 8001a1c:	f002 f842 	bl	8003aa4 <HAL_GPIO_WritePin>
							  HAL_Delay(500);
 8001a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a24:	f000 fccc 	bl	80023c0 <HAL_Delay>
							  wake = 0;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <Wakeup+0x30c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
							  break;
 8001a2e:	e0a4      	b.n	8001b7a <Wakeup+0x3c2>
						  }

				  case 6:
					  if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) == GPIO_PIN_RESET)
 8001a30:	2110      	movs	r1, #16
 8001a32:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <Wakeup+0x328>)
 8001a34:	f002 f81e 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <Wakeup+0x2a0>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2102      	movs	r1, #2
 8001a42:	4821      	ldr	r0, [pc, #132]	; (8001ac8 <Wakeup+0x310>)
 8001a44:	f002 f82e 	bl	8003aa4 <HAL_GPIO_WritePin>

						  HAL_Delay(500);
 8001a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4c:	f000 fcb8 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <Wakeup+0x30c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
						  break;
 8001a56:	e090      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					 	 {
						  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <Wakeup+0x328>)
 8001a5e:	f002 f821 	bl	8003aa4 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2102      	movs	r1, #2
 8001a66:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <Wakeup+0x310>)
 8001a68:	f002 f81c 	bl	8003aa4 <HAL_GPIO_WritePin>
						    sendRaw(dieuhoa,253,38);
 8001a6c:	2226      	movs	r2, #38	; 0x26
 8001a6e:	21fd      	movs	r1, #253	; 0xfd
 8001a70:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <Wakeup+0x32c>)
 8001a72:	f000 f9b3 	bl	8001ddc <sendRaw>
							  HAL_Delay(500);
 8001a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a7a:	f000 fca1 	bl	80023c0 <HAL_Delay>
							  wake = 0;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <Wakeup+0x30c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
							  break;
 8001a84:	e079      	b.n	8001b7a <Wakeup+0x3c2>
					 	 }

				  case 7:
					  if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin) == GPIO_PIN_RESET)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	4814      	ldr	r0, [pc, #80]	; (8001adc <Wakeup+0x324>)
 8001a8a:	f001 fff3 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d12b      	bne.n	8001aec <Wakeup+0x334>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <Wakeup+0x310>)
 8001a9a:	f002 f803 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa2:	f000 fc8d 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <Wakeup+0x30c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
						  break;
 8001aac:	e065      	b.n	8001b7a <Wakeup+0x3c2>
 8001aae:	bf00      	nop
 8001ab0:	f5c28f5c 	.word	0xf5c28f5c
 8001ab4:	3fef5c28 	.word	0x3fef5c28
 8001ab8:	33333333 	.word	0x33333333
 8001abc:	3feb3333 	.word	0x3feb3333
 8001ac0:	40021400 	.word	0x40021400
 8001ac4:	20001f48 	.word	0x20001f48
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	2000fa10 	.word	0x2000fa10
 8001ad0:	20017f10 	.word	0x20017f10
 8001ad4:	20001f44 	.word	0x20001f44
 8001ad8:	20001f4c 	.word	0x20001f4c
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	2000008c 	.word	0x2000008c
 8001ae8:	20000004 	.word	0x20000004
						  }
					  else
						  {
						  	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <Wakeup+0x408>)
 8001af2:	f001 ffd7 	bl	8003aa4 <HAL_GPIO_WritePin>
						  	  sendRaw(maychieu,67,38);
 8001af6:	2226      	movs	r2, #38	; 0x26
 8001af8:	2143      	movs	r1, #67	; 0x43
 8001afa:	4832      	ldr	r0, [pc, #200]	; (8001bc4 <Wakeup+0x40c>)
 8001afc:	f000 f96e 	bl	8001ddc <sendRaw>
						  	  HAL_Delay(1000);
 8001b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b04:	f000 fc5c 	bl	80023c0 <HAL_Delay>
						  	  sendRaw(maychieu,67,38);
 8001b08:	2226      	movs	r2, #38	; 0x26
 8001b0a:	2143      	movs	r1, #67	; 0x43
 8001b0c:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <Wakeup+0x40c>)
 8001b0e:	f000 f965 	bl	8001ddc <sendRaw>
							  //buzzer_beep2();
							  HAL_Delay(500);
 8001b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b16:	f000 fc53 	bl	80023c0 <HAL_Delay>
							  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <Wakeup+0x410>)
 8001b20:	f001 ffc0 	bl	8003aa4 <HAL_GPIO_WritePin>
							  wake = 0;
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <Wakeup+0x414>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
							  break;
 8001b2a:	e026      	b.n	8001b7a <Wakeup+0x3c2>
						  }

				  case 8:
					  if (HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin) == GPIO_PIN_RESET)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <Wakeup+0x410>)
 8001b30:	f001 ffa0 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <Wakeup+0x39c>
						  {
						  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4822      	ldr	r0, [pc, #136]	; (8001bc8 <Wakeup+0x410>)
 8001b40:	f001 ffb0 	bl	8003aa4 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 8001b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b48:	f000 fc3a 	bl	80023c0 <HAL_Delay>
						  wake = 0;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <Wakeup+0x414>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
						  break;
 8001b52:	e012      	b.n	8001b7a <Wakeup+0x3c2>
						  }
					  else
					 	{
						  	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2101      	movs	r1, #1
 8001b58:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <Wakeup+0x410>)
 8001b5a:	f001 ffa3 	bl	8003aa4 <HAL_GPIO_WritePin>
							  //buzzer_beep2();
						  	  wake = 0;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <Wakeup+0x414>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
						  	HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2102      	movs	r1, #2
 8001b68:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <Wakeup+0x410>)
 8001b6a:	f001 ff9b 	bl	8003aa4 <HAL_GPIO_WritePin>
						  	  HAL_Delay(500);
 8001b6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b72:	f000 fc25 	bl	80023c0 <HAL_Delay>
							  break;
 8001b76:	e000      	b.n	8001b7a <Wakeup+0x3c2>
					 	}
				  }
			  }
 8001b78:	bf00      	nop
			if ((HAL_GetTick()-t1 > 5000)&&(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET))
 8001b7a:	f000 fc15 	bl	80023a8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <Wakeup+0x418>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d913      	bls.n	8001bb6 <Wakeup+0x3fe>
 8001b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b92:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <Wakeup+0x41c>)
 8001b94:	f001 ff6e 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <Wakeup+0x3fe>
			{
				HAL_Delay(500);
 8001b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba2:	f000 fc0d 	bl	80023c0 <HAL_Delay>
				wake = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <Wakeup+0x414>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <Wakeup+0x410>)
 8001bb2:	f001 ff77 	bl	8003aa4 <HAL_GPIO_WritePin>
				//buzzer_beep();
			}
			t = 0;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <Wakeup+0x420>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
		  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	20001f48 	.word	0x20001f48
 8001bd0:	20001f44 	.word	0x20001f44
 8001bd4:	40021400 	.word	0x40021400
 8001bd8:	2000fa0c 	.word	0x2000fa0c

08001bdc <PowerTodB>:


//----------Power to dB----------//
static void PowerTodB(float32_t *pSpectrogram)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  float32_t max_mel_energy = 0.0f;
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Find MelEnergy Scaling factor */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	e017      	b.n	8001c20 <PowerTodB+0x44>
    max_mel_energy = (max_mel_energy > pSpectrogram[i]) ? max_mel_energy : pSpectrogram[i];
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	dd01      	ble.n	8001c0e <PowerTodB+0x32>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	e004      	b.n	8001c18 <PowerTodB+0x3c>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c26:	d3e3      	bcc.n	8001bf0 <PowerTodB+0x14>
  }

  /* Scale Mel Energies */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	e012      	b.n	8001c54 <PowerTodB+0x78>
    pSpectrogram[i] /= max_mel_energy;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	edd3 6a00 	vldr	s13, [r3]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c5a:	d3e8      	bcc.n	8001c2e <PowerTodB+0x52>
  }

  /* Convert power spectrogram to decibel */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	e018      	b.n	8001c94 <PowerTodB+0xb8>
    pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i]);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	f009 f90b 	bl	800ae8c <log10f>
 8001c76:	eef0 7a40 	vmov.f32	s15, s0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c9a:	d3e2      	bcc.n	8001c62 <PowerTodB+0x86>
  }

  /* Threshold output to -80.0 dB */
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	e01b      	b.n	8001cda <PowerTodB+0xfe>
    pSpectrogram[i] = (pSpectrogram[i] < -80.0f) ? (-80.0f) : (pSpectrogram[i]);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cec <PowerTodB+0x110>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d501      	bpl.n	8001cc0 <PowerTodB+0xe4>
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <PowerTodB+0x114>)
 8001cbe:	e004      	b.n	8001cca <PowerTodB+0xee>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NMELS * SPECTROGRAM_COLS; i++) {
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001ce0:	d3df      	bcc.n	8001ca2 <PowerTodB+0xc6>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	c2a00000 	.word	0xc2a00000
 8001cf0:	c2a00000 	.word	0xc2a00000

08001cf4 <delay_us>:
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
}
//----------------------------IIRR--------------------//
//-----------delay us---------//
void delay_us(uint16_t us)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2,0);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <delay_us+0x30>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001d06:	bf00      	nop
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <delay_us+0x30>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3f9      	bcc.n	8001d08 <delay_us+0x14>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20018f1c 	.word	0x20018f1c

08001d28 <mark>:

//------------Mark Function--------/
void mark(uint16_t time)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  //uint16_t count=(uint16_t)time/(us/38000);
  //uint16_t count=(uint16_t)((uint32_t)(time*38000))/us;
  uint16_t idx=0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	82fb      	strh	r3, [r7, #22]
  uint32_t a=time*38000;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f249 4270 	movw	r2, #38000	; 0x9470
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t count=a/us;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <mark+0x78>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
  uint32_t b=us/76000;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <mark+0x78>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <mark+0x7c>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	60bb      	str	r3, [r7, #8]
  while(idx < count)
 8001d5c:	e016      	b.n	8001d8c <mark+0x64>
  {
    //led on
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_SET );
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2104      	movs	r1, #4
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <mark+0x80>)
 8001d64:	f001 fe9e 	bl	8003aa4 <HAL_GPIO_WritePin>
    delay_us(b);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ffc1 	bl	8001cf4 <delay_us>
    HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_RESET );
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <mark+0x80>)
 8001d78:	f001 fe94 	bl	8003aa4 <HAL_GPIO_WritePin>
    delay_us(b);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ffb7 	bl	8001cf4 <delay_us>
    idx=idx+1;
 8001d86:	8afb      	ldrh	r3, [r7, #22]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	82fb      	strh	r3, [r7, #22]
  while(idx < count)
 8001d8c:	8afb      	ldrh	r3, [r7, #22]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8e4      	bhi.n	8001d5e <mark+0x36>
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000
 8001da4:	dcc0ba43 	.word	0xdcc0ba43
 8001da8:	40022000 	.word	0x40022000

08001dac <space>:


//--------------Space function------------//
void space(uint16_t time)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin,GPIO_PIN_RESET );
 8001db6:	2200      	movs	r2, #0
 8001db8:	2104      	movs	r1, #4
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <space+0x2c>)
 8001dbc:	f001 fe72 	bl	8003aa4 <HAL_GPIO_WritePin>
    if(time==0) return;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <space+0x24>
    delay_us(time);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff93 	bl	8001cf4 <delay_us>
 8001dce:	e000      	b.n	8001dd2 <space+0x26>
    if(time==0) return;
 8001dd0:	bf00      	nop
}
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000

08001ddc <sendRaw>:

//--------Send data------//
void sendRaw(uint16_t buf[], uint8_t len, uint8_t khz)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
 8001de8:	4613      	mov	r3, r2
 8001dea:	70bb      	strb	r3, [r7, #2]
  //enableIROut(khz);

  for(uint16_t i = 0; i < len; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	81fb      	strh	r3, [r7, #14]
 8001df0:	e018      	b.n	8001e24 <sendRaw+0x48>
  {
    if(i & 1) space(buf[i]);
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <sendRaw+0x32>
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ffd0 	bl	8001dac <space>
 8001e0c:	e007      	b.n	8001e1e <sendRaw+0x42>
    else mark(buf[i]);
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff85 	bl	8001d28 <mark>
  for(uint16_t i = 0; i < len; i++)
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	3301      	adds	r3, #1
 8001e22:	81fb      	strh	r3, [r7, #14]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	89fa      	ldrh	r2, [r7, #14]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3e1      	bcc.n	8001df2 <sendRaw+0x16>
  }

  space(0);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff ffbc 	bl	8001dac <space>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <Preprocessing_Init>:
  return code;
}

//------Preprocessing Init-------//
static void Preprocessing_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <Preprocessing_Init+0x68>)
 8001e46:	f003 fc89 	bl	800575c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <Preprocessing_Init+0x68>)
 8001e4e:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <Preprocessing_Init+0x70>)
 8001e5a:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e5e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e62:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e72:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = aWorkingBuffer1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <Preprocessing_Init+0x74>)
 8001e78:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <Preprocessing_Init+0x78>)
 8001e7c:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <Preprocessing_Init+0x7c>)
 8001e7e:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <Preprocessing_Init+0x78>)
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <Preprocessing_Init+0x80>)
 8001e84:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <Preprocessing_Init+0x78>)
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <Preprocessing_Init+0x84>)
 8001e8a:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <Preprocessing_Init+0x78>)
 8001e8e:	221e      	movs	r2, #30
 8001e90:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <Preprocessing_Init+0x88>)
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <Preprocessing_Init+0x6c>)
 8001e96:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <Preprocessing_Init+0x88>)
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <Preprocessing_Init+0x78>)
 8001e9c:	605a      	str	r2, [r3, #4]
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20001ecc 	.word	0x20001ecc
 8001ea8:	20001f14 	.word	0x20001f14
 8001eac:	0800b5b4 	.word	0x0800b5b4
 8001eb0:	20017f1c 	.word	0x20017f1c
 8001eb4:	20001ee4 	.word	0x20001ee4
 8001eb8:	0800c5b4 	.word	0x0800c5b4
 8001ebc:	0800c62c 	.word	0x0800c62c
 8001ec0:	0800c6a4 	.word	0x0800c6a4
 8001ec4:	20001f30 	.word	0x20001f30

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d155      	bne.n	8001fee <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f60:	f043 0320 	orr.w	r3, r3, #32
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	481e      	ldr	r0, [pc, #120]	; (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f88:	f001 fbc8 	bl	800371c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_ADC_MspInit+0xe8>)
 8001f90:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001f94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fd4:	f001 f82a 	bl	800302c <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001fde:	f7ff ff73 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_ADC_MspInit+0xe4>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012200 	.word	0x40012200
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021400 	.word	0x40021400
 8002004:	2000fa3c 	.word	0x2000fa3c
 8002008:	40026410 	.word	0x40026410

0800200c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_CRC_MspInit+0x38>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10b      	bne.n	8002036 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_CRC_MspInit+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_CRC_MspInit+0x3c>)
 8002024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_CRC_MspInit+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023000 	.word	0x40023000
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d128      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800209e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <HAL_TIM_Base_MspInit+0x80>)
 80020bc:	f001 fb2e 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <HardFault_Handler+0x4>

080020e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler+0x4>

080020ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002124:	f000 f92c 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <DMA2_Stream0_IRQHandler+0x10>)
 8002132:	f001 f889 	bl	8003248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000fa3c 	.word	0x2000fa3c

08002140 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e00a      	b.n	8002168 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002152:	f3af 8000 	nop.w
 8002156:	4601      	mov	r1, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	b2ca      	uxtb	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf0      	blt.n	8002152 <_read+0x12>
	}

return len;
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e009      	b.n	80021a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf1      	blt.n	800218c <_write+0x12>
	}
	return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_close>:

int _close(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021da:	605a      	str	r2, [r3, #4]
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_isatty>:

int _isatty(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	return 1;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <_sbrk+0x5c>)
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <_sbrk+0x60>)
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <_sbrk+0x64>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <_sbrk+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d207      	bcs.n	800225c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800224c:	f007 fdd4 	bl	8009df8 <__errno>
 8002250:	4603      	mov	r3, r0
 8002252:	220c      	movs	r2, #12
 8002254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e009      	b.n	8002270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_sbrk+0x64>)
 800226c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20050000 	.word	0x20050000
 800227c:	00000800 	.word	0x00000800
 8002280:	20001f54 	.word	0x20001f54
 8002284:	20022378 	.word	0x20022378

08002288 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <SystemInit+0x28>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <SystemInit+0x28>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SystemInit+0x28>)
 800229e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a2:	609a      	str	r2, [r3, #8]
#endif
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ba:	e003      	b.n	80022c4 <LoopCopyDataInit>

080022bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022c2:	3104      	adds	r1, #4

080022c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022cc:	d3f6      	bcc.n	80022bc <CopyDataInit>
  ldr  r2, =_sbss
 80022ce:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022d0:	e002      	b.n	80022d8 <LoopFillZerobss>

080022d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022d4:	f842 3b04 	str.w	r3, [r2], #4

080022d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022dc:	d3f9      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022de:	f7ff ffd3 	bl	8002288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f007 fd8f 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e6:	f7fe fecf 	bl	8001088 <main>
  bx  lr    
 80022ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80022f0:	08031214 	.word	0x08031214
  ldr  r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f8:	20000f34 	.word	0x20000f34
  ldr  r2, =_sbss
 80022fc:	20000f34 	.word	0x20000f34
  ldr  r3, = _ebss
 8002300:	20022374 	.word	0x20022374

08002304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC_IRQHandler>

08002306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230a:	2003      	movs	r0, #3
 800230c:	f000 fd62 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002310:	2000      	movs	r0, #0
 8002312:	f000 f805 	bl	8002320 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002316:	f7ff fddf 	bl	8001ed8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fd7d 	bl	8002e3e <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 fd45 	bl	8002dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000288 	.word	0x20000288
 8002378:	20000290 	.word	0x20000290
 800237c:	2000028c 	.word	0x2000028c

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000290 	.word	0x20000290
 80023a4:	20022360 	.word	0x20022360

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20022360 	.word	0x20022360

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000290 	.word	0x20000290

08002408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e031      	b.n	8002482 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fd7a 	bl	8001f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_ADC_Init+0x84>)
 800244c:	4013      	ands	r3, r2
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa70 	bl	800293c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
 8002472:	e001      	b.n	8002478 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	ffffeefd 	.word	0xffffeefd

08002490 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Start_DMA+0x1e>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0c7      	b.n	800263e <HAL_ADC_Start_DMA+0x1ae>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d018      	beq.n	80024f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024d4:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_ADC_Start_DMA+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_ADC_Start_DMA+0x1bc>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 809b 	bne.w	800263c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250a:	4b51      	ldr	r3, [pc, #324]	; (8002650 <HAL_ADC_Start_DMA+0x1c0>)
 800250c:	4013      	ands	r3, r2
 800250e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800252c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002540:	d106      	bne.n	8002550 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f023 0206 	bic.w	r2, r3, #6
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
 800254e:	e002      	b.n	8002556 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <HAL_ADC_Start_DMA+0x1c4>)
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <HAL_ADC_Start_DMA+0x1c8>)
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	4a3a      	ldr	r2, [pc, #232]	; (800265c <HAL_ADC_Start_DMA+0x1cc>)
 8002574:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800257e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	334c      	adds	r3, #76	; 0x4c
 80025aa:	4619      	mov	r1, r3
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f000 fdea 	bl	8003188 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_ADC_Start_DMA+0x1d0>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10f      	bne.n	80025e0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d136      	bne.n	800263c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	e02d      	b.n	800263c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_ADC_Start_DMA+0x1d4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_ADC_Start_DMA+0x178>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002606:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_ADC_Start_DMA+0x1d0>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d113      	bne.n	800263c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_ADC_Start_DMA+0x1d8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_ADC_Start_DMA+0x1ac>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800263a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000288 	.word	0x20000288
 800264c:	431bde83 	.word	0x431bde83
 8002650:	fffff8fe 	.word	0xfffff8fe
 8002654:	08002b31 	.word	0x08002b31
 8002658:	08002beb 	.word	0x08002beb
 800265c:	08002c07 	.word	0x08002c07
 8002660:	40012300 	.word	0x40012300
 8002664:	40012000 	.word	0x40012000
 8002668:	40012200 	.word	0x40012200

0800266c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e12a      	b.n	800291a <HAL_ADC_ConfigChannel+0x272>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d93a      	bls.n	800274a <HAL_ADC_ConfigChannel+0xa2>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026dc:	d035      	beq.n	800274a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68d9      	ldr	r1, [r3, #12]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	2207      	movs	r2, #7
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a87      	ldr	r2, [pc, #540]	; (8002928 <HAL_ADC_ConfigChannel+0x280>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002722:	e035      	b.n	8002790 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68d9      	ldr	r1, [r3, #12]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	4603      	mov	r3, r0
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4403      	add	r3, r0
 800273c:	3b1e      	subs	r3, #30
 800273e:	409a      	lsls	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002748:	e022      	b.n	8002790 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6919      	ldr	r1, [r3, #16]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	4603      	mov	r3, r0
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4403      	add	r3, r0
 8002786:	409a      	lsls	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d824      	bhi.n	80027e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b05      	subs	r3, #5
 80027aa:	221f      	movs	r2, #31
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43da      	mvns	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	400a      	ands	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3b05      	subs	r3, #5
 80027d4:	fa00 f203 	lsl.w	r2, r0, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
 80027e0:	e04c      	b.n	800287c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d824      	bhi.n	8002834 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b23      	subs	r3, #35	; 0x23
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b23      	subs	r3, #35	; 0x23
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
 8002832:	e023      	b.n	800287c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b41      	subs	r3, #65	; 0x41
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b41      	subs	r3, #65	; 0x41
 8002870:	fa00 f203 	lsl.w	r2, r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_ADC_ConfigChannel+0x284>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1f4>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 8002896:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800289a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <HAL_ADC_ConfigChannel+0x284>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d109      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x212>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 80028b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_ADC_ConfigChannel+0x284>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d125      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x268>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_ADC_ConfigChannel+0x280>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x22e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b11      	cmp	r3, #17
 80028d4:	d11c      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_ADC_ConfigChannel+0x288>)
 80028dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_ADC_ConfigChannel+0x280>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d111      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_ADC_ConfigChannel+0x28c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_ADC_ConfigChannel+0x290>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9a      	lsrs	r2, r3, #18
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002902:	e002      	b.n	800290a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3b01      	subs	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f9      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	10000012 	.word	0x10000012
 800292c:	40012000 	.word	0x40012000
 8002930:	40012300 	.word	0x40012300
 8002934:	20000288 	.word	0x20000288
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <ADC_Init+0x1ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a77      	ldr	r2, [pc, #476]	; (8002b28 <ADC_Init+0x1ec>)
 800294a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800294e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <ADC_Init+0x1ec>)
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4973      	ldr	r1, [pc, #460]	; (8002b28 <ADC_Init+0x1ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <ADC_Init+0x1f0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13c      	bne.n	8002bc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d127      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d119      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd55 	bl	800266c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bc2:	e00e      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fd5f 	bl	8002694 <HAL_ADC_ErrorCallback>
}
 8002bd6:	e004      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fd41 	bl	8002680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fd34 	bl	8002694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <__NVIC_SetPriorityGrouping>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	60d3      	str	r3, [r2, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	05fa0000 	.word	0x05fa0000

08002c7c <__NVIC_GetPriorityGrouping>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	; (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff8e 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff29 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff3e 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff8e 	bl	8002d28 <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5d 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff31 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa2 	bl	8002d90 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e054      	b.n	8002f14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7f5b      	ldrb	r3, [r3, #29]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff f8c6 	bl	800200c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	791b      	ldrb	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_CRC_Init+0xc4>)
 8002e94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0218 	bic.w	r2, r2, #24
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	e00c      	b.n	8002ec2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f834 	bl	8002f20 <HAL_CRCEx_Polynomial_Set>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e028      	b.n	8002f14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	795b      	ldrb	r3, [r3, #5]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	e004      	b.n	8002ee0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6912      	ldr	r2, [r2, #16]
 8002ede:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	04c11db7 	.word	0x04c11db7

08002f20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f30:	231f      	movs	r3, #31
 8002f32:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f34:	bf00      	nop
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	613a      	str	r2, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_CRCEx_Polynomial_Set+0x16>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b18      	cmp	r3, #24
 8002f58:	d846      	bhi.n	8002fe8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002fef 	.word	0x08002fef
 8002f64:	08002fe9 	.word	0x08002fe9
 8002f68:	08002fe9 	.word	0x08002fe9
 8002f6c:	08002fe9 	.word	0x08002fe9
 8002f70:	08002fe9 	.word	0x08002fe9
 8002f74:	08002fe9 	.word	0x08002fe9
 8002f78:	08002fe9 	.word	0x08002fe9
 8002f7c:	08002fe9 	.word	0x08002fe9
 8002f80:	08002fdd 	.word	0x08002fdd
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	08002fe9 	.word	0x08002fe9
 8002f8c:	08002fe9 	.word	0x08002fe9
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	08002fe9 	.word	0x08002fe9
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fe9 	.word	0x08002fe9
 8002fa8:	08002fe9 	.word	0x08002fe9
 8002fac:	08002fe9 	.word	0x08002fe9
 8002fb0:	08002fe9 	.word	0x08002fe9
 8002fb4:	08002fe9 	.word	0x08002fe9
 8002fb8:	08002fe9 	.word	0x08002fe9
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fc5 	.word	0x08002fc5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d913      	bls.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fce:	e010      	b.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d90f      	bls.n	8002ff6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fda:	e00c      	b.n	8002ff6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	d90b      	bls.n	8002ffa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fe6:	e008      	b.n	8002ffa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e006      	b.n	8002ffc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ffa:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 0118 	bic.w	r1, r3, #24
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff f9b6 	bl	80023a8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e099      	b.n	800317c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003068:	e00f      	b.n	800308a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306a:	f7ff f99d 	bl	80023a8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b05      	cmp	r3, #5
 8003076:	d908      	bls.n	800308a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e078      	b.n	800317c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e8      	bne.n	800306a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_DMA_Init+0x158>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d107      	bne.n	80030f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4313      	orrs	r3, r2
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0307 	bic.w	r3, r3, #7
 800310a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b04      	cmp	r3, #4
 800311c:	d117      	bne.n	800314e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fa77 	bl	8003624 <DMA_CheckFifoParam>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314a:	2301      	movs	r3, #1
 800314c:	e016      	b.n	800317c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa2e 	bl	80035b8 <DMA_CalcBaseAndBitshift>
 800315c:	4603      	mov	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	223f      	movs	r2, #63	; 0x3f
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	f010803f 	.word	0xf010803f

08003188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_DMA_Start_IT+0x26>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e048      	b.n	8003240 <HAL_DMA_Start_IT+0xb8>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d137      	bne.n	8003232 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f9c0 	bl	800355c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	409a      	lsls	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0216 	orr.w	r2, r2, #22
 80031f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003206:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0208 	orr.w	r2, r2, #8
 800321e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e005      	b.n	800323e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_DMA_IRQHandler+0x258>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a92      	ldr	r2, [pc, #584]	; (80034a4 <HAL_DMA_IRQHandler+0x25c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2208      	movs	r2, #8
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2208      	movs	r2, #8
 80032a2:	409a      	lsls	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2204      	movs	r2, #4
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d012      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2210      	movs	r2, #16
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d043      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	2210      	movs	r2, #16
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d018      	beq.n	800338a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d024      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
 8003376:	e01f      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e016      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0208 	bic.w	r2, r2, #8
 80033a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	2220      	movs	r2, #32
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 808e 	beq.w	80034e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2220      	movs	r2, #32
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d136      	bne.n	8003460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_IRQHandler+0x1da>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	223f      	movs	r2, #63	; 0x3f
 8003438:	409a      	lsls	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
        }
        return;
 800345e:	e078      	b.n	8003552 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d108      	bne.n	800348e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	2b00      	cmp	r3, #0
 8003482:	d030      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e02b      	b.n	80034e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
 800349e:	e022      	b.n	80034e6 <HAL_DMA_IRQHandler+0x29e>
 80034a0:	20000288 	.word	0x20000288
 80034a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10f      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0210 	bic.w	r2, r2, #16
 80034c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d032      	beq.n	8003554 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2205      	movs	r2, #5
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3301      	adds	r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	429a      	cmp	r2, r3
 800351c:	d307      	bcc.n	800352e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f2      	bne.n	8003512 <HAL_DMA_IRQHandler+0x2ca>
 800352c:	e000      	b.n	8003530 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800352e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003552:	bf00      	nop
    }
  }
}
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003578:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d108      	bne.n	800359c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800359a:	e007      	b.n	80035ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3b10      	subs	r3, #16
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <DMA_CalcBaseAndBitshift+0x60>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035d2:	4a12      	ldr	r2, [pc, #72]	; (800361c <DMA_CalcBaseAndBitshift+0x64>)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d908      	bls.n	80035f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <DMA_CalcBaseAndBitshift+0x68>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	; 0x58
 80035f6:	e006      	b.n	8003606 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <DMA_CalcBaseAndBitshift+0x68>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	aaaaaaab 	.word	0xaaaaaaab
 800361c:	0800b5ac 	.word	0x0800b5ac
 8003620:	fffffc00 	.word	0xfffffc00

08003624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11f      	bne.n	800367e <DMA_CheckFifoParam+0x5a>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d856      	bhi.n	80036f2 <DMA_CheckFifoParam+0xce>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x28>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	0800366f 	.word	0x0800366f
 8003654:	0800365d 	.word	0x0800365d
 8003658:	080036f3 	.word	0x080036f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d046      	beq.n	80036f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e043      	b.n	80036f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003676:	d140      	bne.n	80036fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367c:	e03d      	b.n	80036fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d121      	bne.n	80036cc <DMA_CheckFifoParam+0xa8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d837      	bhi.n	80036fe <DMA_CheckFifoParam+0xda>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DMA_CheckFifoParam+0x70>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036ab 	.word	0x080036ab
 800369c:	080036a5 	.word	0x080036a5
 80036a0:	080036bd 	.word	0x080036bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e030      	b.n	800370c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e022      	b.n	8003702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c4:	d11f      	bne.n	8003706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ca:	e01c      	b.n	8003706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d903      	bls.n	80036da <DMA_CheckFifoParam+0xb6>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036d8:	e018      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      break;
 80036de:	e015      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e00b      	b.n	800370a <DMA_CheckFifoParam+0xe6>
      break;
 80036f2:	bf00      	nop
 80036f4:	e00a      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e008      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
 80036fc:	e006      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;   
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
    }
  } 
  
  return status; 
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e175      	b.n	8003a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800373c:	2201      	movs	r2, #1
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	429a      	cmp	r2, r3
 8003756:	f040 8164 	bne.w	8003a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d00b      	beq.n	800377a <HAL_GPIO_Init+0x5e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d007      	beq.n	800377a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800376e:	2b11      	cmp	r3, #17
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b12      	cmp	r3, #18
 8003778:	d130      	bne.n	80037dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b0:	2201      	movs	r2, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 0201 	and.w	r2, r3, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x100>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b12      	cmp	r3, #18
 800381a:	d123      	bne.n	8003864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	08da      	lsrs	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3208      	adds	r2, #8
 8003824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	220f      	movs	r2, #15
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	08da      	lsrs	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3208      	adds	r2, #8
 800385e:	69b9      	ldr	r1, [r7, #24]
 8003860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	2203      	movs	r2, #3
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0203 	and.w	r2, r3, #3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80be 	beq.w	8003a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038be:	4a61      	ldr	r2, [pc, #388]	; (8003a44 <HAL_GPIO_Init+0x328>)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	220f      	movs	r2, #15
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a58      	ldr	r2, [pc, #352]	; (8003a48 <HAL_GPIO_Init+0x32c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d037      	beq.n	800395a <HAL_GPIO_Init+0x23e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a57      	ldr	r2, [pc, #348]	; (8003a4c <HAL_GPIO_Init+0x330>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d031      	beq.n	8003956 <HAL_GPIO_Init+0x23a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a56      	ldr	r2, [pc, #344]	; (8003a50 <HAL_GPIO_Init+0x334>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02b      	beq.n	8003952 <HAL_GPIO_Init+0x236>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a55      	ldr	r2, [pc, #340]	; (8003a54 <HAL_GPIO_Init+0x338>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d025      	beq.n	800394e <HAL_GPIO_Init+0x232>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <HAL_GPIO_Init+0x33c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01f      	beq.n	800394a <HAL_GPIO_Init+0x22e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a53      	ldr	r2, [pc, #332]	; (8003a5c <HAL_GPIO_Init+0x340>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d019      	beq.n	8003946 <HAL_GPIO_Init+0x22a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_GPIO_Init+0x344>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x226>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a51      	ldr	r2, [pc, #324]	; (8003a64 <HAL_GPIO_Init+0x348>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00d      	beq.n	800393e <HAL_GPIO_Init+0x222>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_GPIO_Init+0x34c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x21e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a4f      	ldr	r2, [pc, #316]	; (8003a6c <HAL_GPIO_Init+0x350>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_GPIO_Init+0x21a>
 8003932:	2309      	movs	r3, #9
 8003934:	e012      	b.n	800395c <HAL_GPIO_Init+0x240>
 8003936:	230a      	movs	r3, #10
 8003938:	e010      	b.n	800395c <HAL_GPIO_Init+0x240>
 800393a:	2308      	movs	r3, #8
 800393c:	e00e      	b.n	800395c <HAL_GPIO_Init+0x240>
 800393e:	2307      	movs	r3, #7
 8003940:	e00c      	b.n	800395c <HAL_GPIO_Init+0x240>
 8003942:	2306      	movs	r3, #6
 8003944:	e00a      	b.n	800395c <HAL_GPIO_Init+0x240>
 8003946:	2305      	movs	r3, #5
 8003948:	e008      	b.n	800395c <HAL_GPIO_Init+0x240>
 800394a:	2304      	movs	r3, #4
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x240>
 800394e:	2303      	movs	r3, #3
 8003950:	e004      	b.n	800395c <HAL_GPIO_Init+0x240>
 8003952:	2302      	movs	r3, #2
 8003954:	e002      	b.n	800395c <HAL_GPIO_Init+0x240>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_GPIO_Init+0x240>
 800395a:	2300      	movs	r3, #0
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	f002 0203 	and.w	r2, r2, #3
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	4093      	lsls	r3, r2
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800396c:	4935      	ldr	r1, [pc, #212]	; (8003a44 <HAL_GPIO_Init+0x328>)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <HAL_GPIO_Init+0x354>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_GPIO_Init+0x354>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a1c:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <HAL_GPIO_Init+0x354>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f ae86 	bls.w	800373c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40020800 	.word	0x40020800
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40021400 	.word	0x40021400
 8003a60:	40021800 	.word	0x40021800
 8003a64:	40021c00 	.word	0x40021c00
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40022400 	.word	0x40022400
 8003a70:	40013c00 	.word	0x40013c00

08003a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e001      	b.n	8003a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b06:	f7fe fc4f 	bl	80023a8 <HAL_GetTick>
 8003b0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b0c:	e009      	b.n	8003b22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b0e:	f7fe fc4b 	bl	80023a8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1c:	d901      	bls.n	8003b22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e022      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3c:	f7fe fc34 	bl	80023a8 <HAL_GetTick>
 8003b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b42:	e009      	b.n	8003b58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b44:	f7fe fc30 	bl	80023a8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d901      	bls.n	8003b58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e007      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b64:	d1ee      	bne.n	8003b44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e291      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8087 	beq.w	8003caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b9c:	4b96      	ldr	r3, [pc, #600]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba8:	4b93      	ldr	r3, [pc, #588]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d112      	bne.n	8003bda <HAL_RCC_OscConfig+0x62>
 8003bb4:	4b90      	ldr	r3, [pc, #576]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d06c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x130>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d168      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e26b      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x7a>
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e02e      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x9c>
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fba6 	bl	80023a8 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fba2 	bl	80023a8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e21f      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fb92 	bl	80023a8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fb8e 	bl	80023a8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e20b      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x110>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d069      	beq.n	8003d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x190>
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1df      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	493d      	ldr	r1, [pc, #244]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e040      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d023      	beq.n	8003d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fb44 	bl	80023a8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d24:	f7fe fb40 	bl	80023a8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1bd      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4929      	ldr	r1, [pc, #164]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
 8003d56:	e018      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fb20 	bl	80023a8 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fb1c 	bl	80023a8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e199      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d038      	beq.n	8003e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fe fafd 	bl	80023a8 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe faf9 	bl	80023a8 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e176      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x23a>
 8003dd0:	e01a      	b.n	8003e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe fae3 	bl	80023a8 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe fadf 	bl	80023a8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d903      	bls.n	8003dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e15c      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
 8003df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b91      	ldr	r3, [pc, #580]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ee      	bne.n	8003de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a4 	beq.w	8003f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a87      	ldr	r2, [pc, #540]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b85      	ldr	r3, [pc, #532]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	4b82      	ldr	r3, [pc, #520]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d118      	bne.n	8003e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e4a:	4b7f      	ldr	r3, [pc, #508]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7e      	ldr	r2, [pc, #504]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e56:	f7fe faa7 	bl	80023a8 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5e:	f7fe faa3 	bl	80023a8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e120      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	4b75      	ldr	r3, [pc, #468]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x31a>
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	e02d      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x33c>
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a69      	ldr	r2, [pc, #420]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a66      	ldr	r2, [pc, #408]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	e01c      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x35e>
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a5d      	ldr	r2, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e00b      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003ed6:	4b5b      	ldr	r3, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5a      	ldr	r2, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	4b58      	ldr	r3, [pc, #352]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a57      	ldr	r2, [pc, #348]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fa57 	bl	80023a8 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fa53 	bl	80023a8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0ce      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCC_OscConfig+0x386>
 8003f20:	e014      	b.n	8003f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fe fa41 	bl	80023a8 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fe fa3d 	bl	80023a8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a4 	beq.w	80040b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d06b      	beq.n	800404c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d149      	bne.n	8004010 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a30      	ldr	r2, [pc, #192]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fa0e 	bl	80023a8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fa0a 	bl	80023a8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f9de 	bl	80023a8 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe f9da 	bl	80023a8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e057      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x478>
 800400e:	e04f      	b.n	80040b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe f9c4 	bl	80023a8 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fe f9c0 	bl	80023a8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e03d      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x4ac>
 8004042:	e035      	b.n	80040b0 <HAL_RCC_OscConfig+0x538>
 8004044:	40023800 	.word	0x40023800
 8004048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x544>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0d0      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	4965      	ldr	r1, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d040      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d115      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e073      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06b      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4936      	ldr	r1, [pc, #216]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b4:	f7fe f8f8 	bl	80023a8 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fe f8f4 	bl	80023a8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e053      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d210      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1cc>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1d0>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1d4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe f854 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	0800b59c 	.word	0x0800b59c
 8004290:	20000288 	.word	0x20000288
 8004294:	2000028c 	.word	0x2000028c

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b5b0      	push	{r4, r5, r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800429e:	2100      	movs	r1, #0
 80042a0:	6079      	str	r1, [r7, #4]
 80042a2:	2100      	movs	r1, #0
 80042a4:	60f9      	str	r1, [r7, #12]
 80042a6:	2100      	movs	r1, #0
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042aa:	2100      	movs	r1, #0
 80042ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ae:	4952      	ldr	r1, [pc, #328]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042b0:	6889      	ldr	r1, [r1, #8]
 80042b2:	f001 010c 	and.w	r1, r1, #12
 80042b6:	2908      	cmp	r1, #8
 80042b8:	d00d      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80042ba:	2908      	cmp	r1, #8
 80042bc:	f200 8094 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x150>
 80042c0:	2900      	cmp	r1, #0
 80042c2:	d002      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x32>
 80042c4:	2904      	cmp	r1, #4
 80042c6:	d003      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x38>
 80042c8:	e08e      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_GetSysClockFreq+0x164>)
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	e08e      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d0:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <HAL_RCC_GetSysClockFreq+0x168>)
 80042d2:	60bb      	str	r3, [r7, #8]
      break;
 80042d4:	e08b      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d6:	4948      	ldr	r1, [pc, #288]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042d8:	6849      	ldr	r1, [r1, #4]
 80042da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042de:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042e0:	4945      	ldr	r1, [pc, #276]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042e2:	6849      	ldr	r1, [r1, #4]
 80042e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042e8:	2900      	cmp	r1, #0
 80042ea:	d024      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ec:	4942      	ldr	r1, [pc, #264]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ee:	6849      	ldr	r1, [r1, #4]
 80042f0:	0989      	lsrs	r1, r1, #6
 80042f2:	4608      	mov	r0, r1
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042fc:	f04f 0500 	mov.w	r5, #0
 8004300:	ea00 0204 	and.w	r2, r0, r4
 8004304:	ea01 0305 	and.w	r3, r1, r5
 8004308:	493d      	ldr	r1, [pc, #244]	; (8004400 <HAL_RCC_GetSysClockFreq+0x168>)
 800430a:	fb01 f003 	mul.w	r0, r1, r3
 800430e:	2100      	movs	r1, #0
 8004310:	fb01 f102 	mul.w	r1, r1, r2
 8004314:	1844      	adds	r4, r0, r1
 8004316:	493a      	ldr	r1, [pc, #232]	; (8004400 <HAL_RCC_GetSysClockFreq+0x168>)
 8004318:	fba2 0101 	umull	r0, r1, r2, r1
 800431c:	1863      	adds	r3, r4, r1
 800431e:	4619      	mov	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	f7fc fcc8 	bl	8000cbc <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e04a      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	461a      	mov	r2, r3
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	ea02 0400 	and.w	r4, r2, r0
 800434e:	ea03 0501 	and.w	r5, r3, r1
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004364:	0142      	lsls	r2, r0, #5
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	1b00      	subs	r0, r0, r4
 800436c:	eb61 0105 	sbc.w	r1, r1, r5
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	018b      	lsls	r3, r1, #6
 800437a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800437e:	0182      	lsls	r2, r0, #6
 8004380:	1a12      	subs	r2, r2, r0
 8004382:	eb63 0301 	sbc.w	r3, r3, r1
 8004386:	f04f 0000 	mov.w	r0, #0
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	00d9      	lsls	r1, r3, #3
 8004390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004394:	00d0      	lsls	r0, r2, #3
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	1912      	adds	r2, r2, r4
 800439c:	eb45 0303 	adc.w	r3, r5, r3
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	0299      	lsls	r1, r3, #10
 80043aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ae:	0290      	lsls	r0, r2, #10
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f7fc fc7c 	bl	8000cbc <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	60bb      	str	r3, [r7, #8]
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <HAL_RCC_GetSysClockFreq+0x164>)
 80043ea:	60bb      	str	r3, [r7, #8]
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	68bb      	ldr	r3, [r7, #8]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	017d7840 	.word	0x017d7840

08004404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e01d      	b.n	8004452 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fe0e 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f000 fa0e 	bl	8004864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e01d      	b.n	80044a8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f815 	bl	80044b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 f9e3 	bl	8004864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d841      	bhi.n	8004558 <HAL_TIM_IC_Start_IT+0x94>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <HAL_TIM_IC_Start_IT+0x18>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004559 	.word	0x08004559
 80044e4:	08004559 	.word	0x08004559
 80044e8:	08004559 	.word	0x08004559
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004559 	.word	0x08004559
 80044f4:	08004559 	.word	0x08004559
 80044f8:	08004559 	.word	0x08004559
 80044fc:	08004535 	.word	0x08004535
 8004500:	08004559 	.word	0x08004559
 8004504:	08004559 	.word	0x08004559
 8004508:	08004559 	.word	0x08004559
 800450c:	08004547 	.word	0x08004547
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0202 	orr.w	r2, r2, #2
 800451e:	60da      	str	r2, [r3, #12]
      break;
 8004520:	e01b      	b.n	800455a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0204 	orr.w	r2, r2, #4
 8004530:	60da      	str	r2, [r3, #12]
      break;
 8004532:	e012      	b.n	800455a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	60da      	str	r2, [r3, #12]
      break;
 8004544:	e009      	b.n	800455a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0210 	orr.w	r2, r2, #16
 8004554:	60da      	str	r2, [r3, #12]
      break;
 8004556:	e000      	b.n	800455a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004558:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fbe2 	bl	8004d2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_TIM_IC_Start_IT+0xd8>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b06      	cmp	r3, #6
 8004578:	d00b      	beq.n	8004592 <HAL_TIM_IC_Start_IT+0xce>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d007      	beq.n	8004592 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	00010007 	.word	0x00010007

080045a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_IC_ConfigChannel+0x1a>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e08a      	b.n	80046d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f000 f9e0 	bl	80049a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 020c 	bic.w	r2, r2, #12
 80045f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
 8004606:	e05a      	b.n	80046be <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d11c      	bne.n	8004648 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f000 fa64 	bl	8004aea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004630:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6999      	ldr	r1, [r3, #24]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	619a      	str	r2, [r3, #24]
 8004646:	e03a      	b.n	80046be <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b08      	cmp	r3, #8
 800464c:	d11b      	bne.n	8004686 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f000 fab1 	bl	8004bc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 020c 	bic.w	r2, r2, #12
 8004670:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	61da      	str	r2, [r3, #28]
 8004684:	e01b      	b.n	80046be <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f000 fad1 	bl	8004c3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	021a      	lsls	r2, r3, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0b3      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x180>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4b55      	ldr	r3, [pc, #340]	; (8004860 <HAL_TIM_ConfigClockSource+0x188>)
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d03e      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0xd0>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	f200 8087 	bhi.w	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	f000 8085 	beq.w	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d87f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d01a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xa2>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d87b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d050      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x116>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d877      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d03c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xf6>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d873      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d058      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x136>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d86f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d064      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d86b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d060      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d867      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d05a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004778:	e062      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f000 faaf 	bl	8004cec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800479c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
      break;
 80047a6:	e04e      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f000 fa98 	bl	8004cec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e03b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 f956 	bl	8004a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2150      	movs	r1, #80	; 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fa65 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e02b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f9b2 	bl	8004b64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2160      	movs	r1, #96	; 0x60
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa55 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 800480c:	e01b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f936 	bl	8004a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa45 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 800482c:	e00b      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fa3c 	bl	8004cb6 <TIM_ITRx_SetConfig>
      break;
 800483e:	e002      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	fffeff88 	.word	0xfffeff88

08004864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a40      	ldr	r2, [pc, #256]	; (8004978 <TIM_Base_SetConfig+0x114>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004882:	d00f      	beq.n	80048a4 <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3d      	ldr	r2, [pc, #244]	; (800497c <TIM_Base_SetConfig+0x118>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00b      	beq.n	80048a4 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <TIM_Base_SetConfig+0x11c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <TIM_Base_SetConfig+0x120>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3a      	ldr	r2, [pc, #232]	; (8004988 <TIM_Base_SetConfig+0x124>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d108      	bne.n	80048b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <TIM_Base_SetConfig+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02b      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c4:	d027      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	; (800497c <TIM_Base_SetConfig+0x118>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d023      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <TIM_Base_SetConfig+0x11c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <TIM_Base_SetConfig+0x120>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01b      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a29      	ldr	r2, [pc, #164]	; (8004988 <TIM_Base_SetConfig+0x124>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d017      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a28      	ldr	r2, [pc, #160]	; (800498c <TIM_Base_SetConfig+0x128>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <TIM_Base_SetConfig+0x12c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00f      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a26      	ldr	r2, [pc, #152]	; (8004994 <TIM_Base_SetConfig+0x130>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a25      	ldr	r2, [pc, #148]	; (8004998 <TIM_Base_SetConfig+0x134>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a24      	ldr	r2, [pc, #144]	; (800499c <TIM_Base_SetConfig+0x138>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <TIM_Base_SetConfig+0x13c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <TIM_Base_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0xf8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <TIM_Base_SetConfig+0x124>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d103      	bne.n	8004964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	615a      	str	r2, [r3, #20]
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800
 8004998:	40001800 	.word	0x40001800
 800499c:	40001c00 	.word	0x40001c00
 80049a0:	40002000 	.word	0x40002000

080049a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f023 0201 	bic.w	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_TI1_SetConfig+0xcc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01b      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d8:	d017      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <TIM_TI1_SetConfig+0xd0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <TIM_TI1_SetConfig+0xd4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <TIM_TI1_SetConfig+0xd8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <TIM_TI1_SetConfig+0xdc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <TIM_TI1_SetConfig+0xe0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_TI1_SetConfig+0x66>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <TIM_TI1_SetConfig+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <TIM_TI1_SetConfig+0x6a>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <TIM_TI1_SetConfig+0x6c>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e003      	b.n	8004a2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 030a 	bic.w	r3, r3, #10
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 030a 	and.w	r3, r3, #10
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40001800 	.word	0x40001800

08004a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 030a 	bic.w	r3, r3, #10
 8004ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b087      	sub	sp, #28
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f023 0210 	bic.w	r2, r3, #16
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f023 0210 	bic.w	r2, r3, #16
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	031b      	lsls	r3, r3, #12
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f023 0303 	bic.w	r3, r3, #3
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	031b      	lsls	r3, r3, #12
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	031b      	lsls	r3, r3, #12
 8004c94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b085      	sub	sp, #20
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f043 0307 	orr.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	401a      	ands	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e06d      	b.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d022      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d01d      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10c      	bne.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40010400 	.word	0x40010400
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	; 0x30
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6899      	ldr	r1, [r3, #8]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68b8      	ldr	r0, [r7, #8]
 8004ebc:	f001 f9be 	bl	800623c <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	18d0      	adds	r0, r2, r3
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f004 ffc9 	bl	8009e68 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	f000 fcee 	bl	80058c0 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	ed93 7a00 	vldr	s14, [r3]
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	edd3 7a00 	vldr	s15, [r3]
 8004ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef4:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	3304      	adds	r3, #4
 8004efc:	ed93 7a00 	vldr	s14, [r3]
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	3304      	adds	r3, #4
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0c:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f103 0008 	add.w	r0, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1d19      	adds	r1, r3, #4
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	461a      	mov	r2, r3
 8004f28:	f001 f930 	bl	800618c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	791b      	ldrb	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d12c      	bne.n	8004f9c <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	e023      	b.n	8004f90 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	440b      	add	r3, r1
 8004f5a:	617a      	str	r2, [r7, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8004f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	db09      	blt.n	8004f80 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004f6c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004f70:	f005 ffc2 	bl	800aef8 <sqrtf>
 8004f74:	eef0 7a40 	vmov.f32	s15, s0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004f7e:	e004      	b.n	8004f8a <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004f88:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	3301      	adds	r3, #1
 8004f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3d5      	bcc.n	8004f48 <SpectrogramColumn+0xb4>
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff ff67 	bl	8004e94 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f804 	bl	8004fdc <MelFilterbank>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b08d      	sub	sp, #52	; 0x34
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
 8005004:	e034      	b.n	8005070 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4413      	add	r3, r2
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005024:	8a7b      	ldrh	r3, [r7, #18]
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	e015      	b.n	8005056 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4413      	add	r3, r2
 8005032:	ed93 7a00 	vldr	s14, [r3]
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503c:	edd3 7a00 	vldr	s15, [r3]
 8005040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005044:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	3301      	adds	r3, #1
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	8a3b      	ldrh	r3, [r7, #16]
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	429a      	cmp	r2, r3
 800505c:	d9e5      	bls.n	800502a <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	3301      	adds	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3c6      	bcc.n	8005006 <MelFilterbank+0x2a>
  }
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3734      	adds	r7, #52	; 0x34
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 0 */
  if (fct)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005098:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800509a:	461a      	mov	r2, r3
        err.type, err.code);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	4806      	ldr	r0, [pc, #24]	; (80050c0 <ai_log_err+0x38>)
 80050a6:	f004 ff91 	bl	8009fcc <iprintf>
 80050aa:	e008      	b.n	80050be <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80050ac:	793b      	ldrb	r3, [r7, #4]
 80050ae:	4619      	mov	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80050b6:	461a      	mov	r2, r3
 80050b8:	4802      	ldr	r0, [pc, #8]	; (80050c4 <ai_log_err+0x3c>)
 80050ba:	f004 ff87 	bl	8009fcc <iprintf>

  do {} while (1);
 80050be:	e7fe      	b.n	80050be <ai_log_err+0x36>
 80050c0:	0800b3c0 	.word	0x0800b3c0
 80050c4:	0800b3f4 	.word	0x0800b3f4

080050c8 <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b090      	sub	sp, #64	; 0x40
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80050d2:	2100      	movs	r1, #0
 80050d4:	4837      	ldr	r0, [pc, #220]	; (80051b4 <ai_boostrap+0xec>)
 80050d6:	f000 fac5 	bl	8005664 <ai_network_create>
 80050da:	4603      	mov	r3, r0
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80050de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <ai_boostrap+0xf0>)
 80050e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050ea:	f7ff ffcd 	bl	8005088 <ai_log_err>
    return -1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	e05b      	b.n	80051ac <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 80050f4:	4b31      	ldr	r3, [pc, #196]	; (80051bc <ai_boostrap+0xf4>)
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	2301      	movs	r3, #1
 80050fa:	823b      	strh	r3, [r7, #16]
 80050fc:	2301      	movs	r3, #1
 80050fe:	827b      	strh	r3, [r7, #18]
 8005100:	2301      	movs	r3, #1
 8005102:	82bb      	strh	r3, [r7, #20]
 8005104:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <ai_boostrap+0xf8>)
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	2300      	movs	r3, #0
 800510e:	623b      	str	r3, [r7, #32]
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <ai_boostrap+0xfc>)
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
 8005114:	2301      	movs	r3, #1
 8005116:	853b      	strh	r3, [r7, #40]	; 0x28
 8005118:	2301      	movs	r3, #1
 800511a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800511c:	2301      	movs	r3, #1
 800511e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005120:	f64d 1340 	movw	r3, #55616	; 0xd940
 8005124:	633b      	str	r3, [r7, #48]	; 0x30
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
 800512a:	2300      	movs	r3, #0
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 800512e:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <ai_boostrap+0xec>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f107 020c 	add.w	r2, r7, #12
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fab5 	bl	80056a8 <ai_network_init>
 800513e:	4603      	mov	r3, r0
 8005140:	f083 0301 	eor.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <ai_boostrap+0xec>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fa7c 	bl	800564c <ai_network_get_error>
 8005154:	4603      	mov	r3, r0
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8005158:	491b      	ldr	r1, [pc, #108]	; (80051c8 <ai_boostrap+0x100>)
 800515a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800515c:	f7ff ff94 	bl	8005088 <ai_log_err>
      return -1;
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	e022      	b.n	80051ac <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <ai_boostrap+0xec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4918      	ldr	r1, [pc, #96]	; (80051cc <ai_boostrap+0x104>)
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa05 	bl	800557c <ai_network_get_info>
 8005172:	4603      	mov	r3, r0
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <ai_boostrap+0xec>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa62 	bl	800564c <ai_network_get_error>
 8005188:	4603      	mov	r3, r0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 800518c:	4910      	ldr	r1, [pc, #64]	; (80051d0 <ai_boostrap+0x108>)
 800518e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005190:	f7ff ff7a 	bl	8005088 <ai_log_err>
    ai_network_destroy(network);
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <ai_boostrap+0xec>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fa79 	bl	8005690 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <ai_boostrap+0xec>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    return -3;
 80051a4:	f06f 0302 	mvn.w	r3, #2
 80051a8:	e000      	b.n	80051ac <ai_boostrap+0xe4>
  }

  return 0;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3740      	adds	r7, #64	; 0x40
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20001f58 	.word	0x20001f58
 80051b8:	0800b424 	.word	0x0800b424
 80051bc:	40040440 	.word	0x40040440
 80051c0:	00010668 	.word	0x00010668
 80051c4:	00040440 	.word	0x00040440
 80051c8:	0800b438 	.word	0x0800b438
 80051cc:	20001f5c 	.word	0x20001f5c
 80051d0:	0800b448 	.word	0x0800b448

080051d4 <ai_run>:

int ai_run(void *data_in, void *data_out)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 80051de:	4b14      	ldr	r3, [pc, #80]	; (8005230 <ai_run+0x5c>)
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <ai_run+0x5c>)
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <ai_run+0x60>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa91 	bl	8005726 <ai_network_run>
 8005204:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d00c      	beq.n	8005226 <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <ai_run+0x60>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa1b 	bl	800564c <ai_network_get_error>
 8005216:	4603      	mov	r3, r0
 8005218:	4907      	ldr	r1, [pc, #28]	; (8005238 <ai_run+0x64>)
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff34 	bl	8005088 <ai_log_err>
        "ai_network_run");
    return -1;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	e000      	b.n	8005228 <ai_run+0x54>
  }

  return 0;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20001f5c 	.word	0x20001f5c
 8005234:	20001f58 	.word	0x20001f58
 8005238:	0800b460 	.word	0x0800b460

0800523c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005240:	4805      	ldr	r0, [pc, #20]	; (8005258 <MX_X_CUBE_AI_Init+0x1c>)
 8005242:	f004 ff49 	bl	800a0d8 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8005246:	f000 fa7f 	bl	8005748 <ai_network_data_weights_get>
 800524a:	4603      	mov	r3, r0
 800524c:	4903      	ldr	r1, [pc, #12]	; (800525c <MX_X_CUBE_AI_Init+0x20>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff3a 	bl	80050c8 <ai_boostrap>
    /* USER CODE END 3 */
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}
 8005258:	0800b470 	.word	0x0800b470
 800525c:	20001fd0 	.word	0x20001fd0

08005260 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	3303      	adds	r3, #3
 8005270:	f023 0303 	bic.w	r3, r3, #3
 8005274:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8005276:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <network_configure_activations+0xc4>)
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800527c:	4b29      	ldr	r3, [pc, #164]	; (8005324 <network_configure_activations+0xc4>)
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 1856);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8005288:	4a27      	ldr	r2, [pc, #156]	; (8005328 <network_configure_activations+0xc8>)
 800528a:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 1856);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8005292:	4a25      	ldr	r2, [pc, #148]	; (8005328 <network_configure_activations+0xc8>)
 8005294:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 8005296:	4a25      	ldr	r2, [pc, #148]	; (800532c <network_configure_activations+0xcc>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <network_configure_activations+0xcc>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations + 0);
 80052a2:	4a23      	ldr	r2, [pc, #140]	; (8005330 <network_configure_activations+0xd0>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations + 0);
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <network_configure_activations+0xd0>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	60d3      	str	r3, [r2, #12]
    max_pooling2d_1_output_array.data = AI_PTR(activations + 0);
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <network_configure_activations+0xd4>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6093      	str	r3, [r2, #8]
    max_pooling2d_1_output_array.data_start = AI_PTR(activations + 0);
 80052b4:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <network_configure_activations+0xd4>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(activations + 11648);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <network_configure_activations+0xd8>)
 80052c2:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(activations + 11648);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <network_configure_activations+0xd8>)
 80052cc:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 0);
 80052ce:	4a1b      	ldr	r2, [pc, #108]	; (800533c <network_configure_activations+0xdc>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 0);
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <network_configure_activations+0xdc>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_output_array.data = AI_PTR(activations + 11520);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <network_configure_activations+0xe0>)
 80052e2:	6093      	str	r3, [r2, #8]
    batch_normalization_4_output_array.data_start = AI_PTR(activations + 11520);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <network_configure_activations+0xe0>)
 80052ec:	60d3      	str	r3, [r2, #12]
    global_max_pooling2d_1_output_array.data = AI_PTR(activations + 0);
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <network_configure_activations+0xe4>)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6093      	str	r3, [r2, #8]
    global_max_pooling2d_1_output_array.data_start = AI_PTR(activations + 0);
 80052f4:	4a13      	ldr	r2, [pc, #76]	; (8005344 <network_configure_activations+0xe4>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 128);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3380      	adds	r3, #128	; 0x80
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <network_configure_activations+0xe8>)
 8005300:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 128);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3380      	adds	r3, #128	; 0x80
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <network_configure_activations+0xe8>)
 8005308:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <network_configure_activations+0xec>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <network_configure_activations+0xec>)
 8005312:	2200      	movs	r2, #0
 8005314:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8005316:	2301      	movs	r3, #1
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200003d4 	.word	0x200003d4
 8005328:	200003e4 	.word	0x200003e4
 800532c:	200003f4 	.word	0x200003f4
 8005330:	20000404 	.word	0x20000404
 8005334:	20000414 	.word	0x20000414
 8005338:	20000424 	.word	0x20000424
 800533c:	20000434 	.word	0x20000434
 8005340:	20000444 	.word	0x20000444
 8005344:	20000454 	.word	0x20000454
 8005348:	20000464 	.word	0x20000464
 800534c:	20000474 	.word	0x20000474

08005350 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005360:	4b74      	ldr	r3, [pc, #464]	; (8005534 <network_configure_weights+0x1e4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005368:	4a72      	ldr	r2, [pc, #456]	; (8005534 <network_configure_weights+0x1e4>)
 800536a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 67136);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b72      	ldr	r3, [pc, #456]	; (8005538 <network_configure_weights+0x1e8>)
 8005370:	4413      	add	r3, r2
 8005372:	4a70      	ldr	r2, [pc, #448]	; (8005534 <network_configure_weights+0x1e4>)
 8005374:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 67136);
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <network_configure_weights+0x1e8>)
 800537a:	4413      	add	r3, r2
 800537c:	4a6d      	ldr	r2, [pc, #436]	; (8005534 <network_configure_weights+0x1e4>)
 800537e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005380:	4b6e      	ldr	r3, [pc, #440]	; (800553c <network_configure_weights+0x1ec>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005388:	4a6c      	ldr	r2, [pc, #432]	; (800553c <network_configure_weights+0x1ec>)
 800538a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 65856);
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4b6c      	ldr	r3, [pc, #432]	; (8005540 <network_configure_weights+0x1f0>)
 8005390:	4413      	add	r3, r2
 8005392:	4a6a      	ldr	r2, [pc, #424]	; (800553c <network_configure_weights+0x1ec>)
 8005394:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 65856);
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4b69      	ldr	r3, [pc, #420]	; (8005540 <network_configure_weights+0x1f0>)
 800539a:	4413      	add	r3, r2
 800539c:	4a67      	ldr	r2, [pc, #412]	; (800553c <network_configure_weights+0x1ec>)
 800539e:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80053a0:	4b68      	ldr	r3, [pc, #416]	; (8005544 <network_configure_weights+0x1f4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a8:	4a66      	ldr	r2, [pc, #408]	; (8005544 <network_configure_weights+0x1f4>)
 80053aa:	6013      	str	r3, [r2, #0]
    batch_normalization_4_bias_array.data = AI_PTR(weights + 65728);
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4b66      	ldr	r3, [pc, #408]	; (8005548 <network_configure_weights+0x1f8>)
 80053b0:	4413      	add	r3, r2
 80053b2:	4a64      	ldr	r2, [pc, #400]	; (8005544 <network_configure_weights+0x1f4>)
 80053b4:	6093      	str	r3, [r2, #8]
    batch_normalization_4_bias_array.data_start = AI_PTR(weights + 65728);
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4b63      	ldr	r3, [pc, #396]	; (8005548 <network_configure_weights+0x1f8>)
 80053ba:	4413      	add	r3, r2
 80053bc:	4a61      	ldr	r2, [pc, #388]	; (8005544 <network_configure_weights+0x1f4>)
 80053be:	60d3      	str	r3, [r2, #12]
    batch_normalization_4_scale_array.format |= AI_FMT_FLAG_CONST;
 80053c0:	4b62      	ldr	r3, [pc, #392]	; (800554c <network_configure_weights+0x1fc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	4a60      	ldr	r2, [pc, #384]	; (800554c <network_configure_weights+0x1fc>)
 80053ca:	6013      	str	r3, [r2, #0]
    batch_normalization_4_scale_array.data = AI_PTR(weights + 65600);
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4b60      	ldr	r3, [pc, #384]	; (8005550 <network_configure_weights+0x200>)
 80053d0:	4413      	add	r3, r2
 80053d2:	4a5e      	ldr	r2, [pc, #376]	; (800554c <network_configure_weights+0x1fc>)
 80053d4:	6093      	str	r3, [r2, #8]
    batch_normalization_4_scale_array.data_start = AI_PTR(weights + 65600);
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4b5d      	ldr	r3, [pc, #372]	; (8005550 <network_configure_weights+0x200>)
 80053da:	4413      	add	r3, r2
 80053dc:	4a5b      	ldr	r2, [pc, #364]	; (800554c <network_configure_weights+0x1fc>)
 80053de:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e0:	4b5c      	ldr	r3, [pc, #368]	; (8005554 <network_configure_weights+0x204>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e8:	4a5a      	ldr	r2, [pc, #360]	; (8005554 <network_configure_weights+0x204>)
 80053ea:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 65472);
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80053f2:	4413      	add	r3, r2
 80053f4:	4a57      	ldr	r2, [pc, #348]	; (8005554 <network_configure_weights+0x204>)
 80053f6:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 65472);
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80053fe:	4413      	add	r3, r2
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <network_configure_weights+0x204>)
 8005402:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005404:	4b54      	ldr	r3, [pc, #336]	; (8005558 <network_configure_weights+0x208>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540c:	4a52      	ldr	r2, [pc, #328]	; (8005558 <network_configure_weights+0x208>)
 800540e:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 28608);
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 8005416:	4413      	add	r3, r2
 8005418:	4a4f      	ldr	r2, [pc, #316]	; (8005558 <network_configure_weights+0x208>)
 800541a:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 28608);
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	f646 73c0 	movw	r3, #28608	; 0x6fc0
 8005422:	4413      	add	r3, r2
 8005424:	4a4c      	ldr	r2, [pc, #304]	; (8005558 <network_configure_weights+0x208>)
 8005426:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005428:	4b4c      	ldr	r3, [pc, #304]	; (800555c <network_configure_weights+0x20c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005430:	4a4a      	ldr	r2, [pc, #296]	; (800555c <network_configure_weights+0x20c>)
 8005432:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights + 28480);
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f646 7340 	movw	r3, #28480	; 0x6f40
 800543a:	4413      	add	r3, r2
 800543c:	4a47      	ldr	r2, [pc, #284]	; (800555c <network_configure_weights+0x20c>)
 800543e:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 28480);
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	f646 7340 	movw	r3, #28480	; 0x6f40
 8005446:	4413      	add	r3, r2
 8005448:	4a44      	ldr	r2, [pc, #272]	; (800555c <network_configure_weights+0x20c>)
 800544a:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800544c:	4b44      	ldr	r3, [pc, #272]	; (8005560 <network_configure_weights+0x210>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005454:	4a42      	ldr	r2, [pc, #264]	; (8005560 <network_configure_weights+0x210>)
 8005456:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(weights + 10048);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 800545e:	4a40      	ldr	r2, [pc, #256]	; (8005560 <network_configure_weights+0x210>)
 8005460:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(weights + 10048);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8005468:	4a3d      	ldr	r2, [pc, #244]	; (8005560 <network_configure_weights+0x210>)
 800546a:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800546c:	4b3d      	ldr	r3, [pc, #244]	; (8005564 <network_configure_weights+0x214>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005474:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <network_configure_weights+0x214>)
 8005476:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights + 9984);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800547e:	4a39      	ldr	r2, [pc, #228]	; (8005564 <network_configure_weights+0x214>)
 8005480:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights + 9984);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005488:	4a36      	ldr	r2, [pc, #216]	; (8005564 <network_configure_weights+0x214>)
 800548a:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <network_configure_weights+0x218>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005494:	4a34      	ldr	r2, [pc, #208]	; (8005568 <network_configure_weights+0x218>)
 8005496:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights + 9920);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 800549e:	4a32      	ldr	r2, [pc, #200]	; (8005568 <network_configure_weights+0x218>)
 80054a0:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights + 9920);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 531b 	add.w	r3, r3, #9920	; 0x26c0
 80054a8:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <network_configure_weights+0x218>)
 80054aa:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <network_configure_weights+0x21c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	4a2d      	ldr	r2, [pc, #180]	; (800556c <network_configure_weights+0x21c>)
 80054b6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 9856);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 80054be:	4a2b      	ldr	r2, [pc, #172]	; (800556c <network_configure_weights+0x21c>)
 80054c0:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 9856);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <network_configure_weights+0x21c>)
 80054ca:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <network_configure_weights+0x220>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <network_configure_weights+0x220>)
 80054d6:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 640);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <network_configure_weights+0x220>)
 80054e0:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 640);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054e8:	4a21      	ldr	r2, [pc, #132]	; (8005570 <network_configure_weights+0x220>)
 80054ea:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ec:	4b21      	ldr	r3, [pc, #132]	; (8005574 <network_configure_weights+0x224>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <network_configure_weights+0x224>)
 80054f6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 576);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <network_configure_weights+0x224>)
 8005500:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 576);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8005508:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <network_configure_weights+0x224>)
 800550a:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <network_configure_weights+0x228>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <network_configure_weights+0x228>)
 8005516:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <network_configure_weights+0x228>)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <network_configure_weights+0x228>)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005524:	2301      	movs	r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	200002f4 	.word	0x200002f4
 8005538:	00010640 	.word	0x00010640
 800553c:	20000304 	.word	0x20000304
 8005540:	00010140 	.word	0x00010140
 8005544:	20000314 	.word	0x20000314
 8005548:	000100c0 	.word	0x000100c0
 800554c:	20000324 	.word	0x20000324
 8005550:	00010040 	.word	0x00010040
 8005554:	20000334 	.word	0x20000334
 8005558:	20000344 	.word	0x20000344
 800555c:	20000354 	.word	0x20000354
 8005560:	20000364 	.word	0x20000364
 8005564:	20000374 	.word	0x20000374
 8005568:	20000384 	.word	0x20000384
 800556c:	20000394 	.word	0x20000394
 8005570:	200003a4 	.word	0x200003a4
 8005574:	200003b4 	.word	0x200003b4
 8005578:	200003c4 	.word	0x200003c4

0800557c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b0a0      	sub	sp, #128	; 0x80
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 faf2 	bl	8006b70 <ai_platform_context_acquire>
 800558c:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d049      	beq.n	8005628 <ai_network_get_info+0xac>
 8005594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d046      	beq.n	8005628 <ai_network_get_info+0xac>
  {
    ai_network_report r = {
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	2274      	movs	r2, #116	; 0x74
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f004 fc60 	bl	8009e68 <memset>
 80055a8:	4b22      	ldr	r3, [pc, #136]	; (8005634 <ai_network_get_info+0xb8>)
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <ai_network_get_info+0xbc>)
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <ai_network_get_info+0xc0>)
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	4b22      	ldr	r3, [pc, #136]	; (8005640 <ai_network_get_info+0xc4>)
 80055b6:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80055b8:	f001 f966 	bl	8006888 <ai_platform_runtime_get_revision>
 80055bc:	4603      	mov	r3, r0
    ai_network_report r = {
 80055be:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 80055c0:	f001 f9b0 	bl	8006924 <ai_platform_runtime_get_version>
 80055c4:	4603      	mov	r3, r0
 80055c6:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <ai_network_get_info+0xc8>)
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	2305      	movs	r3, #5
 80055ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80055d2:	2302      	movs	r3, #2
 80055d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80055de:	2303      	movs	r3, #3
 80055e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = {AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR,
                            AI_TOOLS_API_VERSION_MICRO, 0x0},

      .api_version            = ai_platform_api_get_version(),
 80055e4:	f001 fa00 	bl	80069e8 <ai_platform_api_get_version>
 80055e8:	4603      	mov	r3, r0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80055ec:	f001 fa5e 	bl	8006aac <ai_platform_interface_api_get_version>
 80055f0:	4603      	mov	r3, r0
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 80055f4:	4b14      	ldr	r3, [pc, #80]	; (8005648 <ai_network_get_info+0xcc>)
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 fb96 	bl	8006d30 <ai_platform_api_get_network_report>
 8005604:	4603      	mov	r3, r0
 8005606:	f083 0301 	eor.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <ai_network_get_info+0x98>
 8005610:	2300      	movs	r3, #0
 8005612:	e00a      	b.n	800562a <ai_network_get_info+0xae>

    *report = r;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f107 0308 	add.w	r3, r7, #8
 800561c:	2274      	movs	r2, #116	; 0x74
 800561e:	4619      	mov	r1, r3
 8005620:	f004 fc14 	bl	8009e4c <memcpy>
    return true;
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <ai_network_get_info+0xae>
  }

  return false;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3780      	adds	r7, #128	; 0x80
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	0800b52c 	.word	0x0800b52c
 8005638:	0800b534 	.word	0x0800b534
 800563c:	0800b558 	.word	0x0800b558
 8005640:	0800b574 	.word	0x0800b574
 8005644:	0800b58c 	.word	0x0800b58c
 8005648:	00338636 	.word	0x00338636

0800564c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fadd 	bl	8006c14 <ai_platform_network_get_error>
 800565a:	4603      	mov	r3, r0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800566e:	2300      	movs	r3, #0
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	2303      	movs	r3, #3
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2301      	movs	r3, #1
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <ai_network_create+0x28>)
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fde5 	bl	800724c <ai_platform_network_create>
 8005682:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000294 	.word	0x20000294

08005690 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fe5b 	bl	8007354 <ai_platform_network_destroy>
 800569e:	4603      	mov	r3, r0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fed7 	bl	8007468 <ai_platform_network_init>
 80056ba:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <ai_network_init+0x1e>
 80056c2:	2300      	movs	r3, #0
 80056c4:	e02b      	b.n	800571e <ai_network_init+0x76>

  ai_bool ok = true;
 80056c6:	2301      	movs	r3, #1
 80056c8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	4619      	mov	r1, r3
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fe3e 	bl	8005350 <network_configure_weights>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3318      	adds	r3, #24
 80056ea:	4619      	mov	r1, r3
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fdb7 	bl	8005260 <network_configure_activations>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 ff97 	bl	8007638 <ai_platform_network_post_init>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	4013      	ands	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800571c:	7afb      	ldrb	r3, [r7, #11]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f002 f82a 	bl	8007790 <ai_platform_network_process>
 800573c:	4603      	mov	r3, r0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
    0x95, 0xa1, 0x3b, 0x8c, 0xc7, 0x09, 0xbd, 0xc8, 0x83,
    0x26, 0x3d, 0x83, 0xb1, 0x3d, 0xbd, 0xd1, 0x00, 0xff,
    0xbc, 0xcc, 0x80, 0x11, 0xbd, 0x8b, 0xb8, 0xa0, 0xbb
  };

  return AI_HANDLE_PTR(s_network_weights);
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <ai_network_data_weights_get+0x10>)

}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	0800d684 	.word	0x0800d684

0800575c <arm_rfft_fast_init_f32>:
 800575c:	084b      	lsrs	r3, r1, #1
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	b430      	push	{r4, r5}
 8005762:	8201      	strh	r1, [r0, #16]
 8005764:	8003      	strh	r3, [r0, #0]
 8005766:	d06f      	beq.n	8005848 <arm_rfft_fast_init_f32+0xec>
 8005768:	d916      	bls.n	8005798 <arm_rfft_fast_init_f32+0x3c>
 800576a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576e:	d05e      	beq.n	800582e <arm_rfft_fast_init_f32+0xd2>
 8005770:	d935      	bls.n	80057de <arm_rfft_fast_init_f32+0x82>
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005776:	d025      	beq.n	80057c4 <arm_rfft_fast_init_f32+0x68>
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577c:	d112      	bne.n	80057a4 <arm_rfft_fast_init_f32+0x48>
 800577e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8005782:	4c37      	ldr	r4, [pc, #220]	; (8005860 <arm_rfft_fast_init_f32+0x104>)
 8005784:	4937      	ldr	r1, [pc, #220]	; (8005864 <arm_rfft_fast_init_f32+0x108>)
 8005786:	2300      	movs	r3, #0
 8005788:	4a37      	ldr	r2, [pc, #220]	; (8005868 <arm_rfft_fast_init_f32+0x10c>)
 800578a:	8185      	strh	r5, [r0, #12]
 800578c:	6084      	str	r4, [r0, #8]
 800578e:	6041      	str	r1, [r0, #4]
 8005790:	6142      	str	r2, [r0, #20]
 8005792:	b258      	sxtb	r0, r3
 8005794:	bc30      	pop	{r4, r5}
 8005796:	4770      	bx	lr
 8005798:	2b20      	cmp	r3, #32
 800579a:	d030      	beq.n	80057fe <arm_rfft_fast_init_f32+0xa2>
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d005      	beq.n	80057ac <arm_rfft_fast_init_f32+0x50>
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d038      	beq.n	8005816 <arm_rfft_fast_init_f32+0xba>
 80057a4:	23ff      	movs	r3, #255	; 0xff
 80057a6:	bc30      	pop	{r4, r5}
 80057a8:	b258      	sxtb	r0, r3
 80057aa:	4770      	bx	lr
 80057ac:	2538      	movs	r5, #56	; 0x38
 80057ae:	4c2f      	ldr	r4, [pc, #188]	; (800586c <arm_rfft_fast_init_f32+0x110>)
 80057b0:	492f      	ldr	r1, [pc, #188]	; (8005870 <arm_rfft_fast_init_f32+0x114>)
 80057b2:	2300      	movs	r3, #0
 80057b4:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <arm_rfft_fast_init_f32+0x118>)
 80057b6:	8185      	strh	r5, [r0, #12]
 80057b8:	6084      	str	r4, [r0, #8]
 80057ba:	6041      	str	r1, [r0, #4]
 80057bc:	6142      	str	r2, [r0, #20]
 80057be:	b258      	sxtb	r0, r3
 80057c0:	bc30      	pop	{r4, r5}
 80057c2:	4770      	bx	lr
 80057c4:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80057c8:	4c2b      	ldr	r4, [pc, #172]	; (8005878 <arm_rfft_fast_init_f32+0x11c>)
 80057ca:	492c      	ldr	r1, [pc, #176]	; (800587c <arm_rfft_fast_init_f32+0x120>)
 80057cc:	2300      	movs	r3, #0
 80057ce:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <arm_rfft_fast_init_f32+0x124>)
 80057d0:	8185      	strh	r5, [r0, #12]
 80057d2:	6084      	str	r4, [r0, #8]
 80057d4:	6041      	str	r1, [r0, #4]
 80057d6:	6142      	str	r2, [r0, #20]
 80057d8:	b258      	sxtb	r0, r3
 80057da:	bc30      	pop	{r4, r5}
 80057dc:	4770      	bx	lr
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	d1df      	bne.n	80057a4 <arm_rfft_fast_init_f32+0x48>
 80057e4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80057e8:	4c26      	ldr	r4, [pc, #152]	; (8005884 <arm_rfft_fast_init_f32+0x128>)
 80057ea:	4927      	ldr	r1, [pc, #156]	; (8005888 <arm_rfft_fast_init_f32+0x12c>)
 80057ec:	2300      	movs	r3, #0
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <arm_rfft_fast_init_f32+0x130>)
 80057f0:	8185      	strh	r5, [r0, #12]
 80057f2:	6084      	str	r4, [r0, #8]
 80057f4:	6041      	str	r1, [r0, #4]
 80057f6:	6142      	str	r2, [r0, #20]
 80057f8:	b258      	sxtb	r0, r3
 80057fa:	bc30      	pop	{r4, r5}
 80057fc:	4770      	bx	lr
 80057fe:	2530      	movs	r5, #48	; 0x30
 8005800:	4c23      	ldr	r4, [pc, #140]	; (8005890 <arm_rfft_fast_init_f32+0x134>)
 8005802:	4924      	ldr	r1, [pc, #144]	; (8005894 <arm_rfft_fast_init_f32+0x138>)
 8005804:	2300      	movs	r3, #0
 8005806:	4a24      	ldr	r2, [pc, #144]	; (8005898 <arm_rfft_fast_init_f32+0x13c>)
 8005808:	8185      	strh	r5, [r0, #12]
 800580a:	6084      	str	r4, [r0, #8]
 800580c:	6041      	str	r1, [r0, #4]
 800580e:	6142      	str	r2, [r0, #20]
 8005810:	b258      	sxtb	r0, r3
 8005812:	bc30      	pop	{r4, r5}
 8005814:	4770      	bx	lr
 8005816:	2514      	movs	r5, #20
 8005818:	4c20      	ldr	r4, [pc, #128]	; (800589c <arm_rfft_fast_init_f32+0x140>)
 800581a:	4921      	ldr	r1, [pc, #132]	; (80058a0 <arm_rfft_fast_init_f32+0x144>)
 800581c:	2300      	movs	r3, #0
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <arm_rfft_fast_init_f32+0x148>)
 8005820:	8185      	strh	r5, [r0, #12]
 8005822:	6084      	str	r4, [r0, #8]
 8005824:	6041      	str	r1, [r0, #4]
 8005826:	6142      	str	r2, [r0, #20]
 8005828:	b258      	sxtb	r0, r3
 800582a:	bc30      	pop	{r4, r5}
 800582c:	4770      	bx	lr
 800582e:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8005832:	4c1d      	ldr	r4, [pc, #116]	; (80058a8 <arm_rfft_fast_init_f32+0x14c>)
 8005834:	491d      	ldr	r1, [pc, #116]	; (80058ac <arm_rfft_fast_init_f32+0x150>)
 8005836:	2300      	movs	r3, #0
 8005838:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <arm_rfft_fast_init_f32+0x154>)
 800583a:	8185      	strh	r5, [r0, #12]
 800583c:	6084      	str	r4, [r0, #8]
 800583e:	6041      	str	r1, [r0, #4]
 8005840:	6142      	str	r2, [r0, #20]
 8005842:	b258      	sxtb	r0, r3
 8005844:	bc30      	pop	{r4, r5}
 8005846:	4770      	bx	lr
 8005848:	25d0      	movs	r5, #208	; 0xd0
 800584a:	4c1a      	ldr	r4, [pc, #104]	; (80058b4 <arm_rfft_fast_init_f32+0x158>)
 800584c:	491a      	ldr	r1, [pc, #104]	; (80058b8 <arm_rfft_fast_init_f32+0x15c>)
 800584e:	2300      	movs	r3, #0
 8005850:	4a1a      	ldr	r2, [pc, #104]	; (80058bc <arm_rfft_fast_init_f32+0x160>)
 8005852:	8185      	strh	r5, [r0, #12]
 8005854:	6084      	str	r4, [r0, #8]
 8005856:	6041      	str	r1, [r0, #4]
 8005858:	6142      	str	r2, [r0, #20]
 800585a:	b258      	sxtb	r0, r3
 800585c:	bc30      	pop	{r4, r5}
 800585e:	4770      	bx	lr
 8005860:	0802caf4 	.word	0x0802caf4
 8005864:	0801dcec 	.word	0x0801dcec
 8005868:	08023e5c 	.word	0x08023e5c
 800586c:	08021dec 	.word	0x08021dec
 8005870:	0802e8b4 	.word	0x0802e8b4
 8005874:	08030da4 	.word	0x08030da4
 8005878:	0802a7dc 	.word	0x0802a7dc
 800587c:	080286dc 	.word	0x080286dc
 8005880:	08021e5c 	.word	0x08021e5c
 8005884:	08030a34 	.word	0x08030a34
 8005888:	08027e5c 	.word	0x08027e5c
 800588c:	0802eab4 	.word	0x0802eab4
 8005890:	0802b694 	.word	0x0802b694
 8005894:	0802a6dc 	.word	0x0802a6dc
 8005898:	08021cec 	.word	0x08021cec
 800589c:	0802b5ec 	.word	0x0802b5ec
 80058a0:	0802865c 	.word	0x0802865c
 80058a4:	0802b614 	.word	0x0802b614
 80058a8:	0802f2b4 	.word	0x0802f2b4
 80058ac:	0802baf4 	.word	0x0802baf4
 80058b0:	0802f634 	.word	0x0802f634
 80058b4:	08030fa4 	.word	0x08030fa4
 80058b8:	0802b6f4 	.word	0x0802b6f4
 80058bc:	08030634 	.word	0x08030634

080058c0 <arm_rfft_fast_f32>:
 80058c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c4:	8a05      	ldrh	r5, [r0, #16]
 80058c6:	4606      	mov	r6, r0
 80058c8:	4690      	mov	r8, r2
 80058ca:	460c      	mov	r4, r1
 80058cc:	086d      	lsrs	r5, r5, #1
 80058ce:	8005      	strh	r5, [r0, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d15e      	bne.n	8005992 <arm_rfft_fast_f32+0xd2>
 80058d4:	461a      	mov	r2, r3
 80058d6:	2301      	movs	r3, #1
 80058d8:	f000 fbe0 	bl	800609c <arm_cfft_f32>
 80058dc:	edd4 7a00 	vldr	s15, [r4]
 80058e0:	ed94 7a01 	vldr	s14, [r4, #4]
 80058e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80058e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80058ec:	8837      	ldrh	r7, [r6, #0]
 80058ee:	ee37 7a07 	vadd.f32	s14, s14, s14
 80058f2:	6975      	ldr	r5, [r6, #20]
 80058f4:	3f01      	subs	r7, #1
 80058f6:	eef0 3a46 	vmov.f32	s7, s12
 80058fa:	3510      	adds	r5, #16
 80058fc:	f108 0610 	add.w	r6, r8, #16
 8005900:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005904:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8005908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800590c:	f104 0310 	add.w	r3, r4, #16
 8005910:	3808      	subs	r0, #8
 8005912:	ee26 7a86 	vmul.f32	s14, s13, s12
 8005916:	ee67 7a86 	vmul.f32	s15, s15, s12
 800591a:	ed88 7a00 	vstr	s14, [r8]
 800591e:	edc8 7a01 	vstr	s15, [r8, #4]
 8005922:	edd0 6a02 	vldr	s13, [r0, #8]
 8005926:	3f01      	subs	r7, #1
 8005928:	ed13 5a02 	vldr	s10, [r3, #-8]
 800592c:	f1a0 0008 	sub.w	r0, r0, #8
 8005930:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005934:	f105 0508 	add.w	r5, r5, #8
 8005938:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800593c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005940:	edd0 5a05 	vldr	s11, [r0, #20]
 8005944:	ee36 5a85 	vadd.f32	s10, s13, s10
 8005948:	ed55 6a03 	vldr	s13, [r5, #-12]
 800594c:	f103 0308 	add.w	r3, r3, #8
 8005950:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005954:	f106 0608 	add.w	r6, r6, #8
 8005958:	ee66 4a27 	vmul.f32	s9, s12, s15
 800595c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005960:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005964:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005968:	ee26 6a04 	vmul.f32	s12, s12, s8
 800596c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005970:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005974:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005978:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800597c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005980:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005984:	ed46 6a04 	vstr	s13, [r6, #-16]
 8005988:	ed46 7a03 	vstr	s15, [r6, #-12]
 800598c:	d1c9      	bne.n	8005922 <arm_rfft_fast_f32+0x62>
 800598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005992:	edd1 7a00 	vldr	s15, [r1]
 8005996:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800599a:	edd1 6a01 	vldr	s13, [r1, #4]
 800599e:	1e68      	subs	r0, r5, #1
 80059a0:	6975      	ldr	r5, [r6, #20]
 80059a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80059a6:	00c1      	lsls	r1, r0, #3
 80059a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059ac:	ee27 7a23 	vmul.f32	s14, s14, s7
 80059b0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059b4:	ed82 7a00 	vstr	s14, [r2]
 80059b8:	edc2 7a01 	vstr	s15, [r2, #4]
 80059bc:	b3e0      	cbz	r0, 8005a38 <arm_rfft_fast_f32+0x178>
 80059be:	3908      	subs	r1, #8
 80059c0:	f104 0210 	add.w	r2, r4, #16
 80059c4:	3510      	adds	r5, #16
 80059c6:	440c      	add	r4, r1
 80059c8:	f108 0110 	add.w	r1, r8, #16
 80059cc:	ed94 7a02 	vldr	s14, [r4, #8]
 80059d0:	3801      	subs	r0, #1
 80059d2:	ed52 6a02 	vldr	s13, [r2, #-8]
 80059d6:	f1a4 0408 	sub.w	r4, r4, #8
 80059da:	ed15 6a02 	vldr	s12, [r5, #-8]
 80059de:	f102 0208 	add.w	r2, r2, #8
 80059e2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80059e6:	ed94 4a05 	vldr	s8, [r4, #20]
 80059ea:	ed12 5a03 	vldr	s10, [r2, #-12]
 80059ee:	ee77 6a26 	vadd.f32	s13, s14, s13
 80059f2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80059f6:	f101 0108 	add.w	r1, r1, #8
 80059fa:	ee26 3a27 	vmul.f32	s6, s12, s15
 80059fe:	f105 0508 	add.w	r5, r5, #8
 8005a02:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005a06:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005a0a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005a0e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005a12:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005a16:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005a1a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005a1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005a22:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005a26:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005a2a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005a2e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005a32:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005a36:	d1c9      	bne.n	80059cc <arm_rfft_fast_f32+0x10c>
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	f000 bb2a 	b.w	800609c <arm_cfft_f32>

08005a48 <arm_cfft_radix8by2_f32>:
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	ed2d 8b06 	vpush	{d8-d10}
 8005a50:	f8b0 e000 	ldrh.w	lr, [r0]
 8005a54:	4607      	mov	r7, r0
 8005a56:	6842      	ldr	r2, [r0, #4]
 8005a58:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005a5c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005a60:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005a64:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005a68:	f000 80af 	beq.w	8005bca <arm_cfft_radix8by2_f32+0x182>
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	3210      	adds	r2, #16
 8005a70:	f101 0610 	add.w	r6, r1, #16
 8005a74:	f108 0510 	add.w	r5, r8, #16
 8005a78:	18cc      	adds	r4, r1, r3
 8005a7a:	4443      	add	r3, r8
 8005a7c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8005a80:	f1be 0e01 	subs.w	lr, lr, #1
 8005a84:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005a88:	f104 0410 	add.w	r4, r4, #16
 8005a8c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8005a90:	f106 0610 	add.w	r6, r6, #16
 8005a94:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8005a98:	ed53 0a04 	vldr	s1, [r3, #-16]
 8005a9c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005aa0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005aa4:	ed13 3a02 	vldr	s6, [r3, #-8]
 8005aa8:	f102 0210 	add.w	r2, r2, #16
 8005aac:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005ab0:	f103 0310 	add.w	r3, r3, #16
 8005ab4:	ed55 2a01 	vldr	s5, [r5, #-4]
 8005ab8:	f105 0510 	add.w	r5, r5, #16
 8005abc:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8005ac0:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8005ac4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005ac8:	ee33 8a83 	vadd.f32	s16, s7, s6
 8005acc:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8005ad0:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8005ad4:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005ad8:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8005adc:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005ae0:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005ae4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005ae8:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8005aec:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8005af0:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8005af4:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005af8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005afc:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8005b00:	ee72 9a22 	vadd.f32	s19, s4, s5
 8005b04:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005b08:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005b0c:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8005b10:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8005b14:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005b18:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8005b1c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8005b20:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8005b24:	ee72 7a62 	vsub.f32	s15, s4, s5
 8005b28:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8005b2c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8005b30:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8005b34:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8005b38:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8005b3c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8005b40:	ee27 2a26 	vmul.f32	s4, s14, s13
 8005b44:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005b48:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8005b4c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005b50:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005b54:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005b58:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005b5c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005b60:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005b64:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005b68:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005b6c:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8005b70:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8005b74:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005b78:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8005b7c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8005b80:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005b84:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005b88:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005b8c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b94:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005b98:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005b9c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005ba0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8005ba4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ba8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005bac:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005bb0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005bb4:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8005bb8:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8005bbc:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8005bc0:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8005bc4:	f47f af5a 	bne.w	8005a7c <arm_cfft_radix8by2_f32+0x34>
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	fa1f f48c 	uxth.w	r4, ip
 8005bce:	4608      	mov	r0, r1
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	f000 fb78 	bl	80062c8 <arm_radix8_butterfly_f32>
 8005bd8:	4640      	mov	r0, r8
 8005bda:	4621      	mov	r1, r4
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	2302      	movs	r3, #2
 8005be0:	ecbd 8b06 	vpop	{d8-d10}
 8005be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be8:	f000 bb6e 	b.w	80062c8 <arm_radix8_butterfly_f32>

08005bec <arm_cfft_radix8by4_f32>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	ed2d 8b06 	vpush	{d8-d10}
 8005bf4:	8804      	ldrh	r4, [r0, #0]
 8005bf6:	b08f      	sub	sp, #60	; 0x3c
 8005bf8:	ed91 6a00 	vldr	s12, [r1]
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	0864      	lsrs	r4, r4, #1
 8005c00:	ed91 7a01 	vldr	s14, [r1, #4]
 8005c04:	9101      	str	r1, [sp, #4]
 8005c06:	00a3      	lsls	r3, r4, #2
 8005c08:	9104      	str	r1, [sp, #16]
 8005c0a:	0864      	lsrs	r4, r4, #1
 8005c0c:	6841      	ldr	r1, [r0, #4]
 8005c0e:	900c      	str	r0, [sp, #48]	; 0x30
 8005c10:	4625      	mov	r5, r4
 8005c12:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c14:	f101 0408 	add.w	r4, r1, #8
 8005c18:	f101 0610 	add.w	r6, r1, #16
 8005c1c:	9406      	str	r4, [sp, #24]
 8005c1e:	18d4      	adds	r4, r2, r3
 8005c20:	1eaa      	subs	r2, r5, #2
 8005c22:	f101 0518 	add.w	r5, r1, #24
 8005c26:	18e0      	adds	r0, r4, r3
 8005c28:	ed94 4a00 	vldr	s8, [r4]
 8005c2c:	edd4 3a01 	vldr	s7, [r4, #4]
 8005c30:	46a6      	mov	lr, r4
 8005c32:	edd0 6a00 	vldr	s13, [r0]
 8005c36:	18c7      	adds	r7, r0, r3
 8005c38:	edd0 7a01 	vldr	s15, [r0, #4]
 8005c3c:	46a0      	mov	r8, r4
 8005c3e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005c42:	edd7 4a00 	vldr	s9, [r7]
 8005c46:	9402      	str	r4, [sp, #8]
 8005c48:	4604      	mov	r4, r0
 8005c4a:	9507      	str	r5, [sp, #28]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8005c52:	900a      	str	r0, [sp, #40]	; 0x28
 8005c54:	9801      	ldr	r0, [sp, #4]
 8005c56:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005c5a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005c5e:	ed97 5a01 	vldr	s10, [r7, #4]
 8005c62:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005c66:	46bc      	mov	ip, r7
 8005c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c6c:	9605      	str	r6, [sp, #20]
 8005c6e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8005c72:	9703      	str	r7, [sp, #12]
 8005c74:	ee12 9a90 	vmov	r9, s5
 8005c78:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8005c7c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005c80:	1f3e      	subs	r6, r7, #4
 8005c82:	f840 9b08 	str.w	r9, [r0], #8
 8005c86:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8005c8a:	edde 2a01 	vldr	s5, [lr, #4]
 8005c8e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8005c92:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005c96:	ed9c 4a01 	vldr	s8, [ip, #4]
 8005c9a:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005c9e:	9001      	str	r0, [sp, #4]
 8005ca0:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005ca4:	9804      	ldr	r0, [sp, #16]
 8005ca6:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005caa:	f1ae 0704 	sub.w	r7, lr, #4
 8005cae:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005cb2:	ee33 4a45 	vsub.f32	s8, s6, s10
 8005cb6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005cba:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8005cbe:	ed80 6a01 	vstr	s12, [r0, #4]
 8005cc2:	ee14 9a10 	vmov	r9, s8
 8005cc6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005cca:	f848 9b08 	str.w	r9, [r8], #8
 8005cce:	ed8e 5a01 	vstr	s10, [lr, #4]
 8005cd2:	ee15 ea90 	vmov	lr, s11
 8005cd6:	f844 eb08 	str.w	lr, [r4], #8
 8005cda:	ee16 ea90 	vmov	lr, s13
 8005cde:	9408      	str	r4, [sp, #32]
 8005ce0:	462c      	mov	r4, r5
 8005ce2:	ed85 7a01 	vstr	s14, [r5, #4]
 8005ce6:	9d03      	ldr	r5, [sp, #12]
 8005ce8:	f84c eb08 	str.w	lr, [ip], #8
 8005cec:	edc5 7a01 	vstr	s15, [r5, #4]
 8005cf0:	0855      	lsrs	r5, r2, #1
 8005cf2:	9509      	str	r5, [sp, #36]	; 0x24
 8005cf4:	f000 8130 	beq.w	8005f58 <arm_cfft_radix8by4_f32+0x36c>
 8005cf8:	9804      	ldr	r0, [sp, #16]
 8005cfa:	3b08      	subs	r3, #8
 8005cfc:	46ab      	mov	fp, r5
 8005cfe:	f1a4 020c 	sub.w	r2, r4, #12
 8005d02:	f100 0510 	add.w	r5, r0, #16
 8005d06:	f101 0920 	add.w	r9, r1, #32
 8005d0a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005d0e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005d12:	4433      	add	r3, r6
 8005d14:	3410      	adds	r4, #16
 8005d16:	4660      	mov	r0, ip
 8005d18:	4641      	mov	r1, r8
 8005d1a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8005d1e:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005d22:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d26:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005d2a:	f10a 0a08 	add.w	sl, sl, #8
 8005d2e:	edd1 7a00 	vldr	s15, [r1]
 8005d32:	f105 0508 	add.w	r5, r5, #8
 8005d36:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005d3a:	edd0 2a00 	vldr	s5, [r0]
 8005d3e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005d42:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005d46:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005d4a:	f1a2 0208 	sub.w	r2, r2, #8
 8005d4e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005d52:	ed90 2a01 	vldr	s4, [r0, #4]
 8005d56:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005d5a:	ed91 6a01 	vldr	s12, [r1, #4]
 8005d5e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005d62:	f109 0910 	add.w	r9, r9, #16
 8005d66:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005d6a:	f104 0408 	add.w	r4, r4, #8
 8005d6e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005d72:	f10e 0e18 	add.w	lr, lr, #24
 8005d76:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005d7a:	f1a3 0308 	sub.w	r3, r3, #8
 8005d7e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d86:	edd1 6a01 	vldr	s13, [r1, #4]
 8005d8a:	ee76 1a25 	vadd.f32	s3, s12, s11
 8005d8e:	edd0 4a01 	vldr	s9, [r0, #4]
 8005d92:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005d96:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005d9a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005d9e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005da2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005da6:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005daa:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005dae:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005db2:	ee32 2a06 	vadd.f32	s4, s4, s12
 8005db6:	edd6 7a00 	vldr	s15, [r6]
 8005dba:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005dbe:	ed97 1a00 	vldr	s2, [r7]
 8005dc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005dc6:	ed92 8a04 	vldr	s16, [r2, #16]
 8005dca:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005dce:	ed93 aa04 	vldr	s20, [r3, #16]
 8005dd2:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005dd6:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005dda:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005dde:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005de2:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005de6:	edd3 9a03 	vldr	s19, [r3, #12]
 8005dea:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005dee:	ed92 9a03 	vldr	s18, [r2, #12]
 8005df2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005df6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8005dfa:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005dfe:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005e02:	ee16 ca10 	vmov	ip, s12
 8005e06:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005e0a:	ee71 4a07 	vadd.f32	s9, s2, s14
 8005e0e:	f847 c908 	str.w	ip, [r7], #-8
 8005e12:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005e16:	edd2 8a03 	vldr	s17, [r2, #12]
 8005e1a:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005e1e:	ed93 8a03 	vldr	s16, [r3, #12]
 8005e22:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005e26:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005e2a:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005e2e:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005e32:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005e36:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e3e:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005e42:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005e46:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005e4a:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005e4e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005e52:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005e56:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005e5a:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005e5e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005e62:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005e66:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005e6a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005e6e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005e72:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005e76:	ee17 ca10 	vmov	ip, s14
 8005e7a:	f841 cb08 	str.w	ip, [r1], #8
 8005e7e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005e82:	ed82 0a04 	vstr	s0, [r2, #16]
 8005e86:	edc2 6a03 	vstr	s13, [r2, #12]
 8005e8a:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8005e8e:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8005e92:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005e96:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005e9a:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005e9e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005ea2:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005ea6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005eaa:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005eae:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eb6:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005eba:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005ebe:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005ec2:	ee17 ca90 	vmov	ip, s15
 8005ec6:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005eca:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005ece:	f846 c908 	str.w	ip, [r6], #-8
 8005ed2:	edc6 6a01 	vstr	s13, [r6, #4]
 8005ed6:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8005eda:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8005ede:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005ee2:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005ee6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005eea:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005eee:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005ef2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005ef6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005efa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005efe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005f02:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005f06:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f0e:	ee16 ca10 	vmov	ip, s12
 8005f12:	f840 cb08 	str.w	ip, [r0], #8
 8005f16:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005f1a:	edc3 0a04 	vstr	s1, [r3, #16]
 8005f1e:	edc3 7a03 	vstr	s15, [r3, #12]
 8005f22:	f47f aefc 	bne.w	8005d1e <arm_cfft_radix8by4_f32+0x132>
 8005f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f28:	9805      	ldr	r0, [sp, #20]
 8005f2a:	00cb      	lsls	r3, r1, #3
 8005f2c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8005f30:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005f34:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005f38:	4498      	add	r8, r3
 8005f3a:	449c      	add	ip, r3
 8005f3c:	9105      	str	r1, [sp, #20]
 8005f3e:	9901      	ldr	r1, [sp, #4]
 8005f40:	4419      	add	r1, r3
 8005f42:	9101      	str	r1, [sp, #4]
 8005f44:	9906      	ldr	r1, [sp, #24]
 8005f46:	4419      	add	r1, r3
 8005f48:	9106      	str	r1, [sp, #24]
 8005f4a:	9908      	ldr	r1, [sp, #32]
 8005f4c:	4419      	add	r1, r3
 8005f4e:	9b07      	ldr	r3, [sp, #28]
 8005f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f54:	9108      	str	r1, [sp, #32]
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	9a01      	ldr	r2, [sp, #4]
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	9e08      	ldr	r6, [sp, #32]
 8005f5e:	edd2 6a00 	vldr	s13, [r2]
 8005f62:	ed96 4a00 	vldr	s8, [r6]
 8005f66:	edd8 7a00 	vldr	s15, [r8]
 8005f6a:	ee36 6a84 	vadd.f32	s12, s13, s8
 8005f6e:	eddc 2a00 	vldr	s5, [ip]
 8005f72:	ed96 7a01 	vldr	s14, [r6, #4]
 8005f76:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8005f7a:	edd2 6a01 	vldr	s13, [r2, #4]
 8005f7e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8005f82:	ed98 2a01 	vldr	s4, [r8, #4]
 8005f86:	ee76 5a87 	vadd.f32	s11, s13, s14
 8005f8a:	ed9c 5a01 	vldr	s10, [ip, #4]
 8005f8e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f92:	9d05      	ldr	r5, [sp, #20]
 8005f94:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8005f98:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005f9c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005fa0:	9804      	ldr	r0, [sp, #16]
 8005fa2:	ee77 4a67 	vsub.f32	s9, s14, s15
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	edc2 6a00 	vstr	s13, [r2]
 8005fac:	ee76 6a67 	vsub.f32	s13, s12, s15
 8005fb0:	ed98 3a01 	vldr	s6, [r8, #4]
 8005fb4:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8005fb8:	eddc 1a01 	vldr	s3, [ip, #4]
 8005fbc:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8005fc0:	ee35 3a83 	vadd.f32	s6, s11, s6
 8005fc4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005fc8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005fcc:	ee73 5a21 	vadd.f32	s11, s6, s3
 8005fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fd4:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005fd8:	edc2 5a01 	vstr	s11, [r2, #4]
 8005fdc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005fe0:	9a06      	ldr	r2, [sp, #24]
 8005fe2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005fe6:	edd2 7a00 	vldr	s15, [r2]
 8005fea:	edd2 5a01 	vldr	s11, [r2, #4]
 8005fee:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8005ff2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8005ff6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8005ffa:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8005ffe:	ee77 7a62 	vsub.f32	s15, s14, s5
 8006002:	ee74 5a25 	vadd.f32	s11, s8, s11
 8006006:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800600a:	edc8 5a00 	vstr	s11, [r8]
 800600e:	edc8 4a01 	vstr	s9, [r8, #4]
 8006012:	edd5 4a01 	vldr	s9, [r5, #4]
 8006016:	ed95 7a00 	vldr	s14, [r5]
 800601a:	9d07      	ldr	r5, [sp, #28]
 800601c:	ee66 5a87 	vmul.f32	s11, s13, s14
 8006020:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8006024:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006028:	ee26 6a24 	vmul.f32	s12, s12, s9
 800602c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006030:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006034:	edc6 6a01 	vstr	s13, [r6, #4]
 8006038:	ed86 6a00 	vstr	s12, [r6]
 800603c:	ed95 6a01 	vldr	s12, [r5, #4]
 8006040:	ed95 7a00 	vldr	s14, [r5]
 8006044:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006046:	ee65 6a07 	vmul.f32	s13, s10, s14
 800604a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800604e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8006052:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006056:	ee37 5a45 	vsub.f32	s10, s14, s10
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006062:	edcc 7a00 	vstr	s15, [ip]
 8006066:	6872      	ldr	r2, [r6, #4]
 8006068:	f000 f92e 	bl	80062c8 <arm_radix8_butterfly_f32>
 800606c:	9802      	ldr	r0, [sp, #8]
 800606e:	4621      	mov	r1, r4
 8006070:	6872      	ldr	r2, [r6, #4]
 8006072:	2304      	movs	r3, #4
 8006074:	f000 f928 	bl	80062c8 <arm_radix8_butterfly_f32>
 8006078:	980a      	ldr	r0, [sp, #40]	; 0x28
 800607a:	4621      	mov	r1, r4
 800607c:	6872      	ldr	r2, [r6, #4]
 800607e:	2304      	movs	r3, #4
 8006080:	f000 f922 	bl	80062c8 <arm_radix8_butterfly_f32>
 8006084:	9803      	ldr	r0, [sp, #12]
 8006086:	4621      	mov	r1, r4
 8006088:	6872      	ldr	r2, [r6, #4]
 800608a:	2304      	movs	r3, #4
 800608c:	b00f      	add	sp, #60	; 0x3c
 800608e:	ecbd 8b06 	vpop	{d8-d10}
 8006092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006096:	f000 b917 	b.w	80062c8 <arm_radix8_butterfly_f32>
 800609a:	bf00      	nop

0800609c <arm_cfft_f32>:
 800609c:	2a01      	cmp	r2, #1
 800609e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	4606      	mov	r6, r0
 80060a4:	4617      	mov	r7, r2
 80060a6:	460c      	mov	r4, r1
 80060a8:	4698      	mov	r8, r3
 80060aa:	8805      	ldrh	r5, [r0, #0]
 80060ac:	d053      	beq.n	8006156 <arm_cfft_f32+0xba>
 80060ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80060b2:	d04b      	beq.n	800614c <arm_cfft_f32+0xb0>
 80060b4:	d916      	bls.n	80060e4 <arm_cfft_f32+0x48>
 80060b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80060ba:	d01a      	beq.n	80060f2 <arm_cfft_f32+0x56>
 80060bc:	d95a      	bls.n	8006174 <arm_cfft_f32+0xd8>
 80060be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80060c2:	d043      	beq.n	800614c <arm_cfft_f32+0xb0>
 80060c4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80060c8:	d105      	bne.n	80060d6 <arm_cfft_f32+0x3a>
 80060ca:	4620      	mov	r0, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	6872      	ldr	r2, [r6, #4]
 80060d0:	2301      	movs	r3, #1
 80060d2:	f000 f8f9 	bl	80062c8 <arm_radix8_butterfly_f32>
 80060d6:	f1b8 0f00 	cmp.w	r8, #0
 80060da:	d111      	bne.n	8006100 <arm_cfft_f32+0x64>
 80060dc:	2f01      	cmp	r7, #1
 80060de:	d016      	beq.n	800610e <arm_cfft_f32+0x72>
 80060e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e4:	2d20      	cmp	r5, #32
 80060e6:	d031      	beq.n	800614c <arm_cfft_f32+0xb0>
 80060e8:	d948      	bls.n	800617c <arm_cfft_f32+0xe0>
 80060ea:	2d40      	cmp	r5, #64	; 0x40
 80060ec:	d0ed      	beq.n	80060ca <arm_cfft_f32+0x2e>
 80060ee:	2d80      	cmp	r5, #128	; 0x80
 80060f0:	d1f1      	bne.n	80060d6 <arm_cfft_f32+0x3a>
 80060f2:	4630      	mov	r0, r6
 80060f4:	4621      	mov	r1, r4
 80060f6:	f7ff fca7 	bl	8005a48 <arm_cfft_radix8by2_f32>
 80060fa:	f1b8 0f00 	cmp.w	r8, #0
 80060fe:	d0ed      	beq.n	80060dc <arm_cfft_f32+0x40>
 8006100:	4620      	mov	r0, r4
 8006102:	89b1      	ldrh	r1, [r6, #12]
 8006104:	68b2      	ldr	r2, [r6, #8]
 8006106:	f7fa f883 	bl	8000210 <arm_bitreversal_32>
 800610a:	2f01      	cmp	r7, #1
 800610c:	d1e8      	bne.n	80060e0 <arm_cfft_f32+0x44>
 800610e:	ee07 5a90 	vmov	s15, r5
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800611a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800611e:	2d00      	cmp	r5, #0
 8006120:	d0de      	beq.n	80060e0 <arm_cfft_f32+0x44>
 8006122:	f104 0108 	add.w	r1, r4, #8
 8006126:	2300      	movs	r3, #0
 8006128:	ed11 7a02 	vldr	s14, [r1, #-8]
 800612c:	3301      	adds	r3, #1
 800612e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006132:	3108      	adds	r1, #8
 8006134:	429d      	cmp	r5, r3
 8006136:	ee27 7a26 	vmul.f32	s14, s14, s13
 800613a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800613e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006142:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006146:	d1ef      	bne.n	8006128 <arm_cfft_f32+0x8c>
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	4630      	mov	r0, r6
 800614e:	4621      	mov	r1, r4
 8006150:	f7ff fd4c 	bl	8005bec <arm_cfft_radix8by4_f32>
 8006154:	e7bf      	b.n	80060d6 <arm_cfft_f32+0x3a>
 8006156:	b1a5      	cbz	r5, 8006182 <arm_cfft_f32+0xe6>
 8006158:	f101 030c 	add.w	r3, r1, #12
 800615c:	2200      	movs	r2, #0
 800615e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006162:	3201      	adds	r2, #1
 8006164:	3308      	adds	r3, #8
 8006166:	eef1 7a67 	vneg.f32	s15, s15
 800616a:	4295      	cmp	r5, r2
 800616c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006170:	d1f5      	bne.n	800615e <arm_cfft_f32+0xc2>
 8006172:	e79c      	b.n	80060ae <arm_cfft_f32+0x12>
 8006174:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006178:	d0a7      	beq.n	80060ca <arm_cfft_f32+0x2e>
 800617a:	e7ac      	b.n	80060d6 <arm_cfft_f32+0x3a>
 800617c:	2d10      	cmp	r5, #16
 800617e:	d0b8      	beq.n	80060f2 <arm_cfft_f32+0x56>
 8006180:	e7a9      	b.n	80060d6 <arm_cfft_f32+0x3a>
 8006182:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006186:	d896      	bhi.n	80060b6 <arm_cfft_f32+0x1a>
 8006188:	e7ac      	b.n	80060e4 <arm_cfft_f32+0x48>
 800618a:	bf00      	nop

0800618c <arm_cmplx_mag_squared_f32>:
 800618c:	b470      	push	{r4, r5, r6}
 800618e:	0896      	lsrs	r6, r2, #2
 8006190:	d03e      	beq.n	8006210 <arm_cmplx_mag_squared_f32+0x84>
 8006192:	f100 0320 	add.w	r3, r0, #32
 8006196:	f101 0410 	add.w	r4, r1, #16
 800619a:	4635      	mov	r5, r6
 800619c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80061a0:	3d01      	subs	r5, #1
 80061a2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80061a6:	f104 0410 	add.w	r4, r4, #16
 80061aa:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 80061ae:	ee27 5a07 	vmul.f32	s10, s14, s14
 80061b2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80061b6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80061ba:	ed13 7a04 	vldr	s14, [r3, #-16]
 80061be:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80061c2:	ed13 4a03 	vldr	s8, [r3, #-12]
 80061c6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80061ca:	ed53 7a02 	vldr	s15, [r3, #-8]
 80061ce:	ee27 7a07 	vmul.f32	s14, s14, s14
 80061d2:	ed53 4a01 	vldr	s9, [r3, #-4]
 80061d6:	ee24 4a04 	vmul.f32	s8, s8, s8
 80061da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061de:	f103 0320 	add.w	r3, r3, #32
 80061e2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80061e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80061ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80061ee:	ee37 7a04 	vadd.f32	s14, s14, s8
 80061f2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80061f6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 80061fa:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 80061fe:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8006202:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006206:	d1c9      	bne.n	800619c <arm_cmplx_mag_squared_f32+0x10>
 8006208:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800620c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8006210:	f012 0203 	ands.w	r2, r2, #3
 8006214:	d010      	beq.n	8006238 <arm_cmplx_mag_squared_f32+0xac>
 8006216:	3008      	adds	r0, #8
 8006218:	ed50 7a02 	vldr	s15, [r0, #-8]
 800621c:	3a01      	subs	r2, #1
 800621e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006222:	f100 0008 	add.w	r0, r0, #8
 8006226:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800622a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800622e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006232:	ece1 7a01 	vstmia	r1!, {s15}
 8006236:	d1ef      	bne.n	8006218 <arm_cmplx_mag_squared_f32+0x8c>
 8006238:	bc70      	pop	{r4, r5, r6}
 800623a:	4770      	bx	lr

0800623c <arm_mult_f32>:
 800623c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8006242:	d033      	beq.n	80062ac <arm_mult_f32+0x70>
 8006244:	f100 0610 	add.w	r6, r0, #16
 8006248:	f101 0510 	add.w	r5, r1, #16
 800624c:	f102 0410 	add.w	r4, r2, #16
 8006250:	4677      	mov	r7, lr
 8006252:	ed16 7a04 	vldr	s14, [r6, #-16]
 8006256:	3f01      	subs	r7, #1
 8006258:	ed15 6a04 	vldr	s12, [r5, #-16]
 800625c:	f106 0610 	add.w	r6, r6, #16
 8006260:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006264:	f105 0510 	add.w	r5, r5, #16
 8006268:	ee27 6a06 	vmul.f32	s12, s14, s12
 800626c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8006270:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8006274:	f104 0410 	add.w	r4, r4, #16
 8006278:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800627c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006280:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006284:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8006288:	ee27 7a25 	vmul.f32	s14, s14, s11
 800628c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8006290:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8006294:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006298:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800629c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80062a0:	d1d7      	bne.n	8006252 <arm_mult_f32+0x16>
 80062a2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80062a6:	4420      	add	r0, r4
 80062a8:	4421      	add	r1, r4
 80062aa:	4422      	add	r2, r4
 80062ac:	f013 0303 	ands.w	r3, r3, #3
 80062b0:	d009      	beq.n	80062c6 <arm_mult_f32+0x8a>
 80062b2:	ecf0 7a01 	vldmia	r0!, {s15}
 80062b6:	3b01      	subs	r3, #1
 80062b8:	ecb1 7a01 	vldmia	r1!, {s14}
 80062bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c0:	ece2 7a01 	vstmia	r2!, {s15}
 80062c4:	d1f5      	bne.n	80062b2 <arm_mult_f32+0x76>
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062c8 <arm_radix8_butterfly_f32>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	469e      	mov	lr, r3
 80062ce:	1d03      	adds	r3, r0, #4
 80062d0:	4683      	mov	fp, r0
 80062d2:	468a      	mov	sl, r1
 80062d4:	4688      	mov	r8, r1
 80062d6:	469c      	mov	ip, r3
 80062d8:	ed2d 8b10 	vpush	{d8-d15}
 80062dc:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 80065f0 <arm_radix8_butterfly_f32+0x328>
 80062e0:	b09f      	sub	sp, #124	; 0x7c
 80062e2:	921c      	str	r2, [sp, #112]	; 0x70
 80062e4:	931d      	str	r3, [sp, #116]	; 0x74
 80062e6:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	461a      	mov	r2, r3
 80062f0:	930e      	str	r3, [sp, #56]	; 0x38
 80062f2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80062f6:	0051      	lsls	r1, r2, #1
 80062f8:	4608      	mov	r0, r1
 80062fa:	9103      	str	r1, [sp, #12]
 80062fc:	00d1      	lsls	r1, r2, #3
 80062fe:	1885      	adds	r5, r0, r2
 8006300:	0110      	lsls	r0, r2, #4
 8006302:	eb0b 0601 	add.w	r6, fp, r1
 8006306:	9101      	str	r1, [sp, #4]
 8006308:	18ac      	adds	r4, r5, r2
 800630a:	9002      	str	r0, [sp, #8]
 800630c:	1877      	adds	r7, r6, r1
 800630e:	4611      	mov	r1, r2
 8006310:	4422      	add	r2, r4
 8006312:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8006316:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800631a:	1850      	adds	r0, r2, r1
 800631c:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8006320:	4401      	add	r1, r0
 8006322:	3204      	adds	r2, #4
 8006324:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8006328:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800632c:	3104      	adds	r1, #4
 800632e:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8006332:	44c1      	add	r9, r8
 8006334:	edd4 6a00 	vldr	s13, [r4]
 8006338:	ed97 6a00 	vldr	s12, [r7]
 800633c:	45ca      	cmp	sl, r9
 800633e:	edd0 7a00 	vldr	s15, [r0]
 8006342:	ee37 5a66 	vsub.f32	s10, s14, s13
 8006346:	edd6 5a00 	vldr	s11, [r6]
 800634a:	ee37 2a26 	vadd.f32	s4, s14, s13
 800634e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8006352:	edd5 6a00 	vldr	s13, [r5]
 8006356:	ed12 7a01 	vldr	s14, [r2, #-4]
 800635a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800635e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006362:	ee75 1a87 	vadd.f32	s3, s11, s14
 8006366:	ee36 4a86 	vadd.f32	s8, s13, s12
 800636a:	ee72 7a24 	vadd.f32	s15, s4, s9
 800636e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006372:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8006376:	ee31 6a84 	vadd.f32	s12, s3, s8
 800637a:	ee32 2a64 	vsub.f32	s4, s4, s9
 800637e:	ee77 6a65 	vsub.f32	s13, s14, s11
 8006382:	ee77 4a86 	vadd.f32	s9, s15, s12
 8006386:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800638a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800638e:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8006392:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006396:	edc4 7a00 	vstr	s15, [r4]
 800639a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800639e:	edd6 5a01 	vldr	s11, [r6, #4]
 80063a2:	ee27 6a09 	vmul.f32	s12, s14, s18
 80063a6:	edd5 3a01 	vldr	s7, [r5, #4]
 80063aa:	ed92 4a00 	vldr	s8, [r2]
 80063ae:	ee35 1a26 	vadd.f32	s2, s10, s13
 80063b2:	edd1 4a00 	vldr	s9, [r1]
 80063b6:	ee75 6a66 	vsub.f32	s13, s10, s13
 80063ba:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80063be:	ed94 0a01 	vldr	s0, [r4, #4]
 80063c2:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80063c6:	ed9c 7a00 	vldr	s14, [ip]
 80063ca:	edd0 0a01 	vldr	s1, [r0, #4]
 80063ce:	ee35 4a84 	vadd.f32	s8, s11, s8
 80063d2:	ed97 5a01 	vldr	s10, [r7, #4]
 80063d6:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80063da:	ee73 5a27 	vadd.f32	s11, s6, s15
 80063de:	ee77 3a00 	vadd.f32	s7, s14, s0
 80063e2:	ee33 3a67 	vsub.f32	s6, s6, s15
 80063e6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80063ea:	ee35 0a20 	vadd.f32	s0, s10, s1
 80063ee:	ee63 7a09 	vmul.f32	s15, s6, s18
 80063f2:	ee35 5a60 	vsub.f32	s10, s10, s1
 80063f6:	ee33 3a80 	vadd.f32	s6, s7, s0
 80063fa:	ee74 0a24 	vadd.f32	s1, s8, s9
 80063fe:	ee65 5a89 	vmul.f32	s11, s11, s18
 8006402:	ee74 4a64 	vsub.f32	s9, s8, s9
 8006406:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800640a:	ee75 3a25 	vadd.f32	s7, s10, s11
 800640e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006412:	ee37 5a27 	vadd.f32	s10, s14, s15
 8006416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641a:	ee32 7a86 	vadd.f32	s14, s5, s12
 800641e:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8006422:	ee73 2a20 	vadd.f32	s5, s6, s1
 8006426:	ee33 3a60 	vsub.f32	s6, s6, s1
 800642a:	ee72 0a24 	vadd.f32	s1, s4, s9
 800642e:	edcc 2a00 	vstr	s5, [ip]
 8006432:	ee72 4a64 	vsub.f32	s9, s4, s9
 8006436:	ed84 3a01 	vstr	s6, [r4, #4]
 800643a:	ee74 2a61 	vsub.f32	s5, s8, s3
 800643e:	ee31 3a23 	vadd.f32	s6, s2, s7
 8006442:	edc7 0a00 	vstr	s1, [r7]
 8006446:	ee31 1a63 	vsub.f32	s2, s2, s7
 800644a:	edc0 4a00 	vstr	s9, [r0]
 800644e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8006452:	edc7 2a01 	vstr	s5, [r7, #4]
 8006456:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800645a:	441c      	add	r4, r3
 800645c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006460:	449c      	add	ip, r3
 8006462:	ee35 5a07 	vadd.f32	s10, s10, s14
 8006466:	441f      	add	r7, r3
 8006468:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800646c:	ee34 4a21 	vadd.f32	s8, s8, s3
 8006470:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006474:	ed80 4a01 	vstr	s8, [r0, #4]
 8006478:	4418      	add	r0, r3
 800647a:	ed86 3a00 	vstr	s6, [r6]
 800647e:	ed01 1a01 	vstr	s2, [r1, #-4]
 8006482:	ed42 3a01 	vstr	s7, [r2, #-4]
 8006486:	edc5 6a00 	vstr	s13, [r5]
 800648a:	edc6 5a01 	vstr	s11, [r6, #4]
 800648e:	441e      	add	r6, r3
 8006490:	ed81 5a00 	vstr	s10, [r1]
 8006494:	4419      	add	r1, r3
 8006496:	ed82 7a00 	vstr	s14, [r2]
 800649a:	441a      	add	r2, r3
 800649c:	edc5 7a01 	vstr	s15, [r5, #4]
 80064a0:	441d      	add	r5, r3
 80064a2:	f63f af44 	bhi.w	800632e <arm_radix8_butterfly_f32+0x66>
 80064a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80064a8:	2f07      	cmp	r7, #7
 80064aa:	f240 81e8 	bls.w	800687e <arm_radix8_butterfly_f32+0x5b6>
 80064ae:	9903      	ldr	r1, [sp, #12]
 80064b0:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80064b4:	9e01      	ldr	r6, [sp, #4]
 80064b6:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80064ba:	19ca      	adds	r2, r1, r7
 80064bc:	1c4c      	adds	r4, r1, #1
 80064be:	eb05 010e 	add.w	r1, r5, lr
 80064c2:	00ed      	lsls	r5, r5, #3
 80064c4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80064c8:	3608      	adds	r6, #8
 80064ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80064cc:	eb01 050e 	add.w	r5, r1, lr
 80064d0:	00c9      	lsls	r1, r1, #3
 80064d2:	443c      	add	r4, r7
 80064d4:	9618      	str	r6, [sp, #96]	; 0x60
 80064d6:	00ee      	lsls	r6, r5, #3
 80064d8:	460f      	mov	r7, r1
 80064da:	9114      	str	r1, [sp, #80]	; 0x50
 80064dc:	9902      	ldr	r1, [sp, #8]
 80064de:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80064e2:	9611      	str	r6, [sp, #68]	; 0x44
 80064e4:	00c0      	lsls	r0, r0, #3
 80064e6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80064e8:	3108      	adds	r1, #8
 80064ea:	3404      	adds	r4, #4
 80064ec:	f04f 0901 	mov.w	r9, #1
 80064f0:	9119      	str	r1, [sp, #100]	; 0x64
 80064f2:	eb05 010e 	add.w	r1, r5, lr
 80064f6:	4635      	mov	r5, r6
 80064f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	443d      	add	r5, r7
 80064fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006500:	9507      	str	r5, [sp, #28]
 8006502:	eb01 050e 	add.w	r5, r1, lr
 8006506:	00c9      	lsls	r1, r1, #3
 8006508:	19f7      	adds	r7, r6, r7
 800650a:	00ed      	lsls	r5, r5, #3
 800650c:	9110      	str	r1, [sp, #64]	; 0x40
 800650e:	00d1      	lsls	r1, r2, #3
 8006510:	970a      	str	r7, [sp, #40]	; 0x28
 8006512:	462f      	mov	r7, r5
 8006514:	9515      	str	r5, [sp, #84]	; 0x54
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800651a:	19f4      	adds	r4, r6, r7
 800651c:	320c      	adds	r2, #12
 800651e:	3108      	adds	r1, #8
 8006520:	1975      	adds	r5, r6, r5
 8006522:	9408      	str	r4, [sp, #32]
 8006524:	9217      	str	r2, [sp, #92]	; 0x5c
 8006526:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800652a:	9509      	str	r5, [sp, #36]	; 0x24
 800652c:	f100 020c 	add.w	r2, r0, #12
 8006530:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006532:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006534:	1975      	adds	r5, r6, r5
 8006536:	9216      	str	r2, [sp, #88]	; 0x58
 8006538:	1932      	adds	r2, r6, r4
 800653a:	911b      	str	r1, [sp, #108]	; 0x6c
 800653c:	9505      	str	r5, [sp, #20]
 800653e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8006542:	0179      	lsls	r1, r7, #5
 8006544:	9204      	str	r2, [sp, #16]
 8006546:	1972      	adds	r2, r6, r5
 8006548:	9412      	str	r4, [sp, #72]	; 0x48
 800654a:	9513      	str	r5, [sp, #76]	; 0x4c
 800654c:	9206      	str	r2, [sp, #24]
 800654e:	f101 0208 	add.w	r2, r1, #8
 8006552:	921a      	str	r2, [sp, #104]	; 0x68
 8006554:	2200      	movs	r2, #0
 8006556:	f102 0108 	add.w	r1, r2, #8
 800655a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800655c:	46cc      	mov	ip, r9
 800655e:	460f      	mov	r7, r1
 8006560:	910c      	str	r1, [sp, #48]	; 0x30
 8006562:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006564:	eb0b 0e07 	add.w	lr, fp, r7
 8006568:	9f04      	ldr	r7, [sp, #16]
 800656a:	188e      	adds	r6, r1, r2
 800656c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800656e:	edd7 fa00 	vldr	s31, [r7]
 8006572:	9f06      	ldr	r7, [sp, #24]
 8006574:	188d      	adds	r5, r1, r2
 8006576:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006578:	445e      	add	r6, fp
 800657a:	ed97 fa00 	vldr	s30, [r7]
 800657e:	445d      	add	r5, fp
 8006580:	9f05      	ldr	r7, [sp, #20]
 8006582:	188c      	adds	r4, r1, r2
 8006584:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006586:	edd7 ea00 	vldr	s29, [r7]
 800658a:	445c      	add	r4, fp
 800658c:	9f07      	ldr	r7, [sp, #28]
 800658e:	1888      	adds	r0, r1, r2
 8006590:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006592:	ed97 ea00 	vldr	s28, [r7]
 8006596:	4458      	add	r0, fp
 8006598:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800659a:	4411      	add	r1, r2
 800659c:	441a      	add	r2, r3
 800659e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a0:	edd7 da00 	vldr	s27, [r7]
 80065a4:	4459      	add	r1, fp
 80065a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065a8:	445a      	add	r2, fp
 80065aa:	930d      	str	r3, [sp, #52]	; 0x34
 80065ac:	ed97 da00 	vldr	s26, [r7]
 80065b0:	9f08      	ldr	r7, [sp, #32]
 80065b2:	edd7 ca00 	vldr	s25, [r7]
 80065b6:	9f04      	ldr	r7, [sp, #16]
 80065b8:	ed97 ca01 	vldr	s24, [r7, #4]
 80065bc:	9f06      	ldr	r7, [sp, #24]
 80065be:	edd7 ba01 	vldr	s23, [r7, #4]
 80065c2:	9f05      	ldr	r7, [sp, #20]
 80065c4:	ed97 ba01 	vldr	s22, [r7, #4]
 80065c8:	9f07      	ldr	r7, [sp, #28]
 80065ca:	edd7 aa01 	vldr	s21, [r7, #4]
 80065ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80065d0:	ed97 aa01 	vldr	s20, [r7, #4]
 80065d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80065dc:	9f08      	ldr	r7, [sp, #32]
 80065de:	edcd 7a02 	vstr	s15, [sp, #8]
 80065e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80065e8:	edcd 7a03 	vstr	s15, [sp, #12]
 80065ec:	e002      	b.n	80065f4 <arm_radix8_butterfly_f32+0x32c>
 80065ee:	bf00      	nop
 80065f0:	3f3504f3 	.word	0x3f3504f3
 80065f4:	ed90 2a00 	vldr	s4, [r0]
 80065f8:	44c4      	add	ip, r8
 80065fa:	ed96 7a00 	vldr	s14, [r6]
 80065fe:	ed94 8a00 	vldr	s16, [r4]
 8006602:	45e2      	cmp	sl, ip
 8006604:	ed52 7a01 	vldr	s15, [r2, #-4]
 8006608:	ed95 5a00 	vldr	s10, [r5]
 800660c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8006610:	ee38 6a27 	vadd.f32	s12, s16, s15
 8006614:	ed9e 1a00 	vldr	s2, [lr]
 8006618:	ee78 2a67 	vsub.f32	s5, s16, s15
 800661c:	ed17 4a01 	vldr	s8, [r7, #-4]
 8006620:	ee75 3a25 	vadd.f32	s7, s10, s11
 8006624:	ee31 3a07 	vadd.f32	s6, s2, s14
 8006628:	edde 4a01 	vldr	s9, [lr, #4]
 800662c:	ee72 6a04 	vadd.f32	s13, s4, s8
 8006630:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006634:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006638:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800663c:	ee32 4a44 	vsub.f32	s8, s4, s8
 8006640:	ee31 1a47 	vsub.f32	s2, s2, s14
 8006644:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006648:	ee75 7a84 	vadd.f32	s15, s11, s8
 800664c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8006650:	ed8e 7a00 	vstr	s14, [lr]
 8006654:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006658:	ee67 7a89 	vmul.f32	s15, s15, s18
 800665c:	ed90 2a01 	vldr	s4, [r0, #4]
 8006660:	ed95 7a01 	vldr	s14, [r5, #4]
 8006664:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8006668:	ed91 6a00 	vldr	s12, [r1]
 800666c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8006670:	edd7 8a00 	vldr	s17, [r7]
 8006674:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8006678:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800667c:	edd2 0a00 	vldr	s1, [r2]
 8006680:	ee72 6a68 	vsub.f32	s13, s4, s17
 8006684:	edd6 7a01 	vldr	s15, [r6, #4]
 8006688:	ee77 2a46 	vsub.f32	s5, s14, s12
 800668c:	ee37 0a06 	vadd.f32	s0, s14, s12
 8006690:	ed94 7a01 	vldr	s14, [r4, #4]
 8006694:	ee32 6a28 	vadd.f32	s12, s4, s17
 8006698:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800669c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80066a0:	ee72 2aa6 	vadd.f32	s5, s5, s13
 80066a4:	ee77 6a20 	vadd.f32	s13, s14, s1
 80066a8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80066ac:	ee37 7a60 	vsub.f32	s14, s14, s1
 80066b0:	ee24 4a09 	vmul.f32	s8, s8, s18
 80066b4:	ee70 0a06 	vadd.f32	s1, s0, s12
 80066b8:	ee69 7a89 	vmul.f32	s15, s19, s18
 80066bc:	ee62 2a89 	vmul.f32	s5, s5, s18
 80066c0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80066c4:	ee32 0a26 	vadd.f32	s0, s4, s13
 80066c8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80066cc:	ee77 8a62 	vsub.f32	s17, s14, s5
 80066d0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80066d4:	ee74 7ae7 	vsub.f32	s15, s9, s15
 80066d8:	ee77 4a22 	vadd.f32	s9, s14, s5
 80066dc:	ee71 2a04 	vadd.f32	s5, s2, s8
 80066e0:	ee31 7a44 	vsub.f32	s14, s2, s8
 80066e4:	ee30 1a60 	vsub.f32	s2, s0, s1
 80066e8:	ee73 1a06 	vadd.f32	s3, s6, s12
 80066ec:	ee33 6a46 	vsub.f32	s12, s6, s12
 80066f0:	ee36 3ae3 	vsub.f32	s6, s13, s7
 80066f4:	ee37 4ac8 	vsub.f32	s8, s15, s16
 80066f8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80066fc:	ee77 7a88 	vadd.f32	s15, s15, s16
 8006700:	ee72 3a65 	vsub.f32	s7, s4, s11
 8006704:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8006708:	ee72 5a25 	vadd.f32	s11, s4, s11
 800670c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8006710:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8006714:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8006718:	ee77 2a28 	vadd.f32	s5, s14, s17
 800671c:	ee37 7a68 	vsub.f32	s14, s14, s17
 8006720:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8006724:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8006728:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800672c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8006730:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8006734:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8006738:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800673c:	edce 0a01 	vstr	s1, [lr, #4]
 8006740:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006744:	449e      	add	lr, r3
 8006746:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800674a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800674e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8006752:	ed86 8a00 	vstr	s16, [r6]
 8006756:	ee39 0a80 	vadd.f32	s0, s19, s0
 800675a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800675e:	ed86 5a01 	vstr	s10, [r6, #4]
 8006762:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8006766:	edcd 3a01 	vstr	s7, [sp, #4]
 800676a:	ed9d 5a03 	vldr	s10, [sp, #12]
 800676e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8006772:	eddd 3a02 	vldr	s7, [sp, #8]
 8006776:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800677a:	ed84 0a00 	vstr	s0, [r4]
 800677e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8006782:	ed84 3a01 	vstr	s6, [r4, #4]
 8006786:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800678a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800678e:	eddd 3a01 	vldr	s7, [sp, #4]
 8006792:	ee25 5a25 	vmul.f32	s10, s10, s11
 8006796:	441e      	add	r6, r3
 8006798:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800679c:	441c      	add	r4, r3
 800679e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80067a2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80067a6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80067aa:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80067ae:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80067b2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80067b6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80067ba:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80067be:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80067c2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80067c6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80067ca:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80067ce:	ee38 8a01 	vadd.f32	s16, s16, s2
 80067d2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80067d6:	ee39 5a85 	vadd.f32	s10, s19, s10
 80067da:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80067de:	ed02 8a01 	vstr	s16, [r2, #-4]
 80067e2:	ee30 0a21 	vadd.f32	s0, s0, s3
 80067e6:	ed82 6a00 	vstr	s12, [r2]
 80067ea:	ee74 2a62 	vsub.f32	s5, s8, s5
 80067ee:	edc5 0a00 	vstr	s1, [r5]
 80067f2:	ee33 3a28 	vadd.f32	s6, s6, s17
 80067f6:	edc5 3a01 	vstr	s7, [r5, #4]
 80067fa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80067fe:	ed07 5a01 	vstr	s10, [r7, #-4]
 8006802:	edc7 4a00 	vstr	s9, [r7]
 8006806:	441d      	add	r5, r3
 8006808:	ed01 0a01 	vstr	s0, [r1, #-4]
 800680c:	441a      	add	r2, r3
 800680e:	edc1 2a00 	vstr	s5, [r1]
 8006812:	441f      	add	r7, r3
 8006814:	ed80 3a00 	vstr	s6, [r0]
 8006818:	4419      	add	r1, r3
 800681a:	ed80 7a01 	vstr	s14, [r0, #4]
 800681e:	4418      	add	r0, r3
 8006820:	f63f aee8 	bhi.w	80065f4 <arm_radix8_butterfly_f32+0x32c>
 8006824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006826:	f109 0901 	add.w	r9, r9, #1
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	4413      	add	r3, r2
 8006830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	9b06      	ldr	r3, [sp, #24]
 8006836:	4413      	add	r3, r2
 8006838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800683a:	9306      	str	r3, [sp, #24]
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	4413      	add	r3, r2
 8006840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006842:	9305      	str	r3, [sp, #20]
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	4413      	add	r3, r2
 8006848:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800684a:	9307      	str	r3, [sp, #28]
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	4413      	add	r3, r2
 8006850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006852:	930a      	str	r3, [sp, #40]	; 0x28
 8006854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006856:	4413      	add	r3, r2
 8006858:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800685a:	9309      	str	r3, [sp, #36]	; 0x24
 800685c:	9b08      	ldr	r3, [sp, #32]
 800685e:	4413      	add	r3, r2
 8006860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006862:	9308      	str	r3, [sp, #32]
 8006864:	3208      	adds	r2, #8
 8006866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006868:	920b      	str	r2, [sp, #44]	; 0x2c
 800686a:	4599      	cmp	r9, r3
 800686c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800686e:	f47f ae72 	bne.w	8006556 <arm_radix8_butterfly_f32+0x28e>
 8006872:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8006876:	46c8      	mov	r8, r9
 8006878:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 800687c:	e533      	b.n	80062e6 <arm_radix8_butterfly_f32+0x1e>
 800687e:	b01f      	add	sp, #124	; 0x7c
 8006880:	ecbd 8b10 	vpop	{d8-d15}
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006888 <ai_platform_runtime_get_revision>:
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <ai_platform_runtime_get_revision+0x74>)
 800688a:	491d      	ldr	r1, [pc, #116]	; (8006900 <ai_platform_runtime_get_revision+0x78>)
 800688c:	6813      	ldr	r3, [r2, #0]
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006898:	680b      	ldr	r3, [r1, #0]
 800689a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800689e:	189a      	adds	r2, r3, r2
 80068a0:	2a01      	cmp	r2, #1
 80068a2:	d90c      	bls.n	80068be <ai_platform_runtime_get_revision+0x36>
 80068a4:	f240 4249 	movw	r2, #1097	; 0x449
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d008      	beq.n	80068be <ai_platform_runtime_get_revision+0x36>
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <ai_platform_runtime_get_revision+0x7c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80068b8:	d010      	beq.n	80068dc <ai_platform_runtime_get_revision+0x54>
 80068ba:	4813      	ldr	r0, [pc, #76]	; (8006908 <ai_platform_runtime_get_revision+0x80>)
 80068bc:	4770      	bx	lr
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <ai_platform_runtime_get_revision+0x84>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	4619      	mov	r1, r3
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1fc      	bne.n	80068c6 <ai_platform_runtime_get_revision+0x3e>
 80068cc:	4b10      	ldr	r3, [pc, #64]	; (8006910 <ai_platform_runtime_get_revision+0x88>)
 80068ce:	4911      	ldr	r1, [pc, #68]	; (8006914 <ai_platform_runtime_get_revision+0x8c>)
 80068d0:	4a11      	ldr	r2, [pc, #68]	; (8006918 <ai_platform_runtime_get_revision+0x90>)
 80068d2:	6019      	str	r1, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d0ef      	beq.n	80068ba <ai_platform_runtime_get_revision+0x32>
 80068da:	e7fe      	b.n	80068da <ai_platform_runtime_get_revision+0x52>
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <ai_platform_runtime_get_revision+0x94>)
 80068de:	2201      	movs	r2, #1
 80068e0:	4619      	mov	r1, r3
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1fc      	bne.n	80068e4 <ai_platform_runtime_get_revision+0x5c>
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <ai_platform_runtime_get_revision+0x98>)
 80068ec:	4909      	ldr	r1, [pc, #36]	; (8006914 <ai_platform_runtime_get_revision+0x8c>)
 80068ee:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <ai_platform_runtime_get_revision+0x90>)
 80068f0:	6019      	str	r1, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d0e0      	beq.n	80068ba <ai_platform_runtime_get_revision+0x32>
 80068f8:	e7fe      	b.n	80068f8 <ai_platform_runtime_get_revision+0x70>
 80068fa:	bf00      	nop
 80068fc:	e0002000 	.word	0xe0002000
 8006900:	e0042000 	.word	0xe0042000
 8006904:	5c001000 	.word	0x5c001000
 8006908:	08031144 	.word	0x08031144
 800690c:	40023008 	.word	0x40023008
 8006910:	40023000 	.word	0x40023000
 8006914:	f407a5c2 	.word	0xf407a5c2
 8006918:	b5e8b5cd 	.word	0xb5e8b5cd
 800691c:	58024c08 	.word	0x58024c08
 8006920:	58024c00 	.word	0x58024c00

08006924 <ai_platform_runtime_get_version>:
 8006924:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <ai_platform_runtime_get_version+0x9c>)
 8006926:	4927      	ldr	r1, [pc, #156]	; (80069c4 <ai_platform_runtime_get_version+0xa0>)
 8006928:	6813      	ldr	r3, [r2, #0]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006934:	680b      	ldr	r3, [r1, #0]
 8006936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800693a:	189a      	adds	r2, r3, r2
 800693c:	2a01      	cmp	r2, #1
 800693e:	d921      	bls.n	8006984 <ai_platform_runtime_get_version+0x60>
 8006940:	f240 4249 	movw	r2, #1097	; 0x449
 8006944:	4293      	cmp	r3, r2
 8006946:	d01d      	beq.n	8006984 <ai_platform_runtime_get_version+0x60>
 8006948:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <ai_platform_runtime_get_version+0xa4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006950:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006954:	d025      	beq.n	80069a2 <ai_platform_runtime_get_version+0x7e>
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <ai_platform_runtime_get_version+0xa8>)
 8006958:	2000      	movs	r0, #0
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	b410      	push	{r4}
 800695e:	b2dc      	uxtb	r4, r3
 8006960:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006964:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006968:	0e1b      	lsrs	r3, r3, #24
 800696a:	f364 0007 	bfi	r0, r4, #0, #8
 800696e:	b083      	sub	sp, #12
 8006970:	f361 200f 	bfi	r0, r1, #8, #8
 8006974:	f362 4017 	bfi	r0, r2, #16, #8
 8006978:	f363 601f 	bfi	r0, r3, #24, #8
 800697c:	b003      	add	sp, #12
 800697e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <ai_platform_runtime_get_version+0xac>)
 8006986:	2201      	movs	r2, #1
 8006988:	4619      	mov	r1, r3
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	680b      	ldr	r3, [r1, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1fc      	bne.n	800698c <ai_platform_runtime_get_version+0x68>
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <ai_platform_runtime_get_version+0xb0>)
 8006994:	4910      	ldr	r1, [pc, #64]	; (80069d8 <ai_platform_runtime_get_version+0xb4>)
 8006996:	4a11      	ldr	r2, [pc, #68]	; (80069dc <ai_platform_runtime_get_version+0xb8>)
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4293      	cmp	r3, r2
 800699e:	d0da      	beq.n	8006956 <ai_platform_runtime_get_version+0x32>
 80069a0:	e7fe      	b.n	80069a0 <ai_platform_runtime_get_version+0x7c>
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <ai_platform_runtime_get_version+0xbc>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	4619      	mov	r1, r3
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	680b      	ldr	r3, [r1, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1fc      	bne.n	80069aa <ai_platform_runtime_get_version+0x86>
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <ai_platform_runtime_get_version+0xc0>)
 80069b2:	4909      	ldr	r1, [pc, #36]	; (80069d8 <ai_platform_runtime_get_version+0xb4>)
 80069b4:	4a09      	ldr	r2, [pc, #36]	; (80069dc <ai_platform_runtime_get_version+0xb8>)
 80069b6:	6019      	str	r1, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d0cb      	beq.n	8006956 <ai_platform_runtime_get_version+0x32>
 80069be:	e7fe      	b.n	80069be <ai_platform_runtime_get_version+0x9a>
 80069c0:	e0002000 	.word	0xe0002000
 80069c4:	e0042000 	.word	0xe0042000
 80069c8:	5c001000 	.word	0x5c001000
 80069cc:	08031148 	.word	0x08031148
 80069d0:	40023008 	.word	0x40023008
 80069d4:	40023000 	.word	0x40023000
 80069d8:	f407a5c2 	.word	0xf407a5c2
 80069dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80069e0:	58024c08 	.word	0x58024c08
 80069e4:	58024c00 	.word	0x58024c00

080069e8 <ai_platform_api_get_version>:
 80069e8:	4a26      	ldr	r2, [pc, #152]	; (8006a84 <ai_platform_api_get_version+0x9c>)
 80069ea:	4927      	ldr	r1, [pc, #156]	; (8006a88 <ai_platform_api_get_version+0xa0>)
 80069ec:	6813      	ldr	r3, [r2, #0]
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80069f8:	680b      	ldr	r3, [r1, #0]
 80069fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069fe:	189a      	adds	r2, r3, r2
 8006a00:	2a01      	cmp	r2, #1
 8006a02:	d921      	bls.n	8006a48 <ai_platform_api_get_version+0x60>
 8006a04:	f240 4249 	movw	r2, #1097	; 0x449
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d01d      	beq.n	8006a48 <ai_platform_api_get_version+0x60>
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <ai_platform_api_get_version+0xa4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a14:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a18:	d025      	beq.n	8006a66 <ai_platform_api_get_version+0x7e>
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <ai_platform_api_get_version+0xa8>)
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	b410      	push	{r4}
 8006a22:	b2dc      	uxtb	r4, r3
 8006a24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006a28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006a2c:	0e1b      	lsrs	r3, r3, #24
 8006a2e:	f364 0007 	bfi	r0, r4, #0, #8
 8006a32:	b083      	sub	sp, #12
 8006a34:	f361 200f 	bfi	r0, r1, #8, #8
 8006a38:	f362 4017 	bfi	r0, r2, #16, #8
 8006a3c:	f363 601f 	bfi	r0, r3, #24, #8
 8006a40:	b003      	add	sp, #12
 8006a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <ai_platform_api_get_version+0xac>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	680b      	ldr	r3, [r1, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1fc      	bne.n	8006a50 <ai_platform_api_get_version+0x68>
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <ai_platform_api_get_version+0xb0>)
 8006a58:	4910      	ldr	r1, [pc, #64]	; (8006a9c <ai_platform_api_get_version+0xb4>)
 8006a5a:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <ai_platform_api_get_version+0xb8>)
 8006a5c:	6019      	str	r1, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d0da      	beq.n	8006a1a <ai_platform_api_get_version+0x32>
 8006a64:	e7fe      	b.n	8006a64 <ai_platform_api_get_version+0x7c>
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <ai_platform_api_get_version+0xbc>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	680b      	ldr	r3, [r1, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1fc      	bne.n	8006a6e <ai_platform_api_get_version+0x86>
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <ai_platform_api_get_version+0xc0>)
 8006a76:	4909      	ldr	r1, [pc, #36]	; (8006a9c <ai_platform_api_get_version+0xb4>)
 8006a78:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <ai_platform_api_get_version+0xb8>)
 8006a7a:	6019      	str	r1, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d0cb      	beq.n	8006a1a <ai_platform_api_get_version+0x32>
 8006a82:	e7fe      	b.n	8006a82 <ai_platform_api_get_version+0x9a>
 8006a84:	e0002000 	.word	0xe0002000
 8006a88:	e0042000 	.word	0xe0042000
 8006a8c:	5c001000 	.word	0x5c001000
 8006a90:	0803114c 	.word	0x0803114c
 8006a94:	40023008 	.word	0x40023008
 8006a98:	40023000 	.word	0x40023000
 8006a9c:	f407a5c2 	.word	0xf407a5c2
 8006aa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006aa4:	58024c08 	.word	0x58024c08
 8006aa8:	58024c00 	.word	0x58024c00

08006aac <ai_platform_interface_api_get_version>:
 8006aac:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <ai_platform_interface_api_get_version+0x9c>)
 8006aae:	4927      	ldr	r1, [pc, #156]	; (8006b4c <ai_platform_interface_api_get_version+0xa0>)
 8006ab0:	6813      	ldr	r3, [r2, #0]
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ac2:	189a      	adds	r2, r3, r2
 8006ac4:	2a01      	cmp	r2, #1
 8006ac6:	d921      	bls.n	8006b0c <ai_platform_interface_api_get_version+0x60>
 8006ac8:	f240 4249 	movw	r2, #1097	; 0x449
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <ai_platform_interface_api_get_version+0x60>
 8006ad0:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <ai_platform_interface_api_get_version+0xa4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006adc:	d025      	beq.n	8006b2a <ai_platform_interface_api_get_version+0x7e>
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <ai_platform_interface_api_get_version+0xa8>)
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b410      	push	{r4}
 8006ae6:	b2dc      	uxtb	r4, r3
 8006ae8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006aec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006af0:	0e1b      	lsrs	r3, r3, #24
 8006af2:	f364 0007 	bfi	r0, r4, #0, #8
 8006af6:	b083      	sub	sp, #12
 8006af8:	f361 200f 	bfi	r0, r1, #8, #8
 8006afc:	f362 4017 	bfi	r0, r2, #16, #8
 8006b00:	f363 601f 	bfi	r0, r3, #24, #8
 8006b04:	b003      	add	sp, #12
 8006b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <ai_platform_interface_api_get_version+0xac>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4619      	mov	r1, r3
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	680b      	ldr	r3, [r1, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1fc      	bne.n	8006b14 <ai_platform_interface_api_get_version+0x68>
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <ai_platform_interface_api_get_version+0xb0>)
 8006b1c:	4910      	ldr	r1, [pc, #64]	; (8006b60 <ai_platform_interface_api_get_version+0xb4>)
 8006b1e:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <ai_platform_interface_api_get_version+0xb8>)
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d0da      	beq.n	8006ade <ai_platform_interface_api_get_version+0x32>
 8006b28:	e7fe      	b.n	8006b28 <ai_platform_interface_api_get_version+0x7c>
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <ai_platform_interface_api_get_version+0xbc>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4619      	mov	r1, r3
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	680b      	ldr	r3, [r1, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1fc      	bne.n	8006b32 <ai_platform_interface_api_get_version+0x86>
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <ai_platform_interface_api_get_version+0xc0>)
 8006b3a:	4909      	ldr	r1, [pc, #36]	; (8006b60 <ai_platform_interface_api_get_version+0xb4>)
 8006b3c:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <ai_platform_interface_api_get_version+0xb8>)
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d0cb      	beq.n	8006ade <ai_platform_interface_api_get_version+0x32>
 8006b46:	e7fe      	b.n	8006b46 <ai_platform_interface_api_get_version+0x9a>
 8006b48:	e0002000 	.word	0xe0002000
 8006b4c:	e0042000 	.word	0xe0042000
 8006b50:	5c001000 	.word	0x5c001000
 8006b54:	08031150 	.word	0x08031150
 8006b58:	40023008 	.word	0x40023008
 8006b5c:	40023000 	.word	0x40023000
 8006b60:	f407a5c2 	.word	0xf407a5c2
 8006b64:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b68:	58024c08 	.word	0x58024c08
 8006b6c:	58024c00 	.word	0x58024c00

08006b70 <ai_platform_context_acquire>:
 8006b70:	b120      	cbz	r0, 8006b7c <ai_platform_context_acquire+0xc>
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <ai_platform_context_acquire+0x7c>)
 8006b74:	6802      	ldr	r2, [r0, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	bf18      	it	ne
 8006b7a:	2000      	movne	r0, #0
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <ai_platform_context_acquire+0x80>)
 8006b7e:	491d      	ldr	r1, [pc, #116]	; (8006bf4 <ai_platform_context_acquire+0x84>)
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006b8c:	680b      	ldr	r3, [r1, #0]
 8006b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b92:	189a      	adds	r2, r3, r2
 8006b94:	2a01      	cmp	r2, #1
 8006b96:	d90b      	bls.n	8006bb0 <ai_platform_context_acquire+0x40>
 8006b98:	f240 4249 	movw	r2, #1097	; 0x449
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <ai_platform_context_acquire+0x40>
 8006ba0:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <ai_platform_context_acquire+0x88>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ba8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006bac:	d00f      	beq.n	8006bce <ai_platform_context_acquire+0x5e>
 8006bae:	4770      	bx	lr
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <ai_platform_context_acquire+0x8c>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	680b      	ldr	r3, [r1, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1fc      	bne.n	8006bb8 <ai_platform_context_acquire+0x48>
 8006bbe:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <ai_platform_context_acquire+0x90>)
 8006bc0:	4910      	ldr	r1, [pc, #64]	; (8006c04 <ai_platform_context_acquire+0x94>)
 8006bc2:	4a11      	ldr	r2, [pc, #68]	; (8006c08 <ai_platform_context_acquire+0x98>)
 8006bc4:	6019      	str	r1, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d0f0      	beq.n	8006bae <ai_platform_context_acquire+0x3e>
 8006bcc:	e7fe      	b.n	8006bcc <ai_platform_context_acquire+0x5c>
 8006bce:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <ai_platform_context_acquire+0x9c>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	680b      	ldr	r3, [r1, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1fc      	bne.n	8006bd6 <ai_platform_context_acquire+0x66>
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <ai_platform_context_acquire+0xa0>)
 8006bde:	4909      	ldr	r1, [pc, #36]	; (8006c04 <ai_platform_context_acquire+0x94>)
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <ai_platform_context_acquire+0x98>)
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d0e1      	beq.n	8006bae <ai_platform_context_acquire+0x3e>
 8006bea:	e7fe      	b.n	8006bea <ai_platform_context_acquire+0x7a>
 8006bec:	a1c00100 	.word	0xa1c00100
 8006bf0:	e0002000 	.word	0xe0002000
 8006bf4:	e0042000 	.word	0xe0042000
 8006bf8:	5c001000 	.word	0x5c001000
 8006bfc:	40023008 	.word	0x40023008
 8006c00:	40023000 	.word	0x40023000
 8006c04:	f407a5c2 	.word	0xf407a5c2
 8006c08:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c0c:	58024c08 	.word	0x58024c08
 8006c10:	58024c00 	.word	0x58024c00

08006c14 <ai_platform_network_get_error>:
 8006c14:	b118      	cbz	r0, 8006c1e <ai_platform_network_get_error+0xa>
 8006c16:	4b3c      	ldr	r3, [pc, #240]	; (8006d08 <ai_platform_network_get_error+0xf4>)
 8006c18:	6802      	ldr	r2, [r0, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d02a      	beq.n	8006c74 <ai_platform_network_get_error+0x60>
 8006c1e:	4a3b      	ldr	r2, [pc, #236]	; (8006d0c <ai_platform_network_get_error+0xf8>)
 8006c20:	493b      	ldr	r1, [pc, #236]	; (8006d10 <ai_platform_network_get_error+0xfc>)
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	f023 0301 	bic.w	r3, r3, #1
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	680b      	ldr	r3, [r1, #0]
 8006c2c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c34:	185a      	adds	r2, r3, r1
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	d90d      	bls.n	8006c56 <ai_platform_network_get_error+0x42>
 8006c3a:	f240 4249 	movw	r2, #1097	; 0x449
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <ai_platform_network_get_error+0x42>
 8006c42:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <ai_platform_network_get_error+0x100>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c4a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c4e:	d02d      	beq.n	8006cac <ai_platform_network_get_error+0x98>
 8006c50:	f241 0010 	movw	r0, #4112	; 0x1010
 8006c54:	4770      	bx	lr
 8006c56:	4b30      	ldr	r3, [pc, #192]	; (8006d18 <ai_platform_network_get_error+0x104>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	680b      	ldr	r3, [r1, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1fc      	bne.n	8006c5e <ai_platform_network_get_error+0x4a>
 8006c64:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <ai_platform_network_get_error+0x108>)
 8006c66:	492e      	ldr	r1, [pc, #184]	; (8006d20 <ai_platform_network_get_error+0x10c>)
 8006c68:	4a2e      	ldr	r2, [pc, #184]	; (8006d24 <ai_platform_network_get_error+0x110>)
 8006c6a:	6019      	str	r1, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d0ee      	beq.n	8006c50 <ai_platform_network_get_error+0x3c>
 8006c72:	e7fe      	b.n	8006c72 <ai_platform_network_get_error+0x5e>
 8006c74:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <ai_platform_network_get_error+0xf8>)
 8006c76:	4926      	ldr	r1, [pc, #152]	; (8006d10 <ai_platform_network_get_error+0xfc>)
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006c84:	680b      	ldr	r3, [r1, #0]
 8006c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c8a:	189a      	adds	r2, r3, r2
 8006c8c:	2a01      	cmp	r2, #1
 8006c8e:	d92b      	bls.n	8006ce8 <ai_platform_network_get_error+0xd4>
 8006c90:	f240 4249 	movw	r2, #1097	; 0x449
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d027      	beq.n	8006ce8 <ai_platform_network_get_error+0xd4>
 8006c98:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <ai_platform_network_get_error+0x100>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ca0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ca4:	d011      	beq.n	8006cca <ai_platform_network_get_error+0xb6>
 8006ca6:	3010      	adds	r0, #16
 8006ca8:	f001 b824 	b.w	8007cf4 <core_get_error>
 8006cac:	4b1e      	ldr	r3, [pc, #120]	; (8006d28 <ai_platform_network_get_error+0x114>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	680b      	ldr	r3, [r1, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1fc      	bne.n	8006cb4 <ai_platform_network_get_error+0xa0>
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <ai_platform_network_get_error+0x118>)
 8006cbc:	4918      	ldr	r1, [pc, #96]	; (8006d20 <ai_platform_network_get_error+0x10c>)
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <ai_platform_network_get_error+0x110>)
 8006cc0:	6019      	str	r1, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d0c3      	beq.n	8006c50 <ai_platform_network_get_error+0x3c>
 8006cc8:	e7fe      	b.n	8006cc8 <ai_platform_network_get_error+0xb4>
 8006cca:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <ai_platform_network_get_error+0x114>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4619      	mov	r1, r3
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	680b      	ldr	r3, [r1, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1fc      	bne.n	8006cd2 <ai_platform_network_get_error+0xbe>
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <ai_platform_network_get_error+0x118>)
 8006cda:	4911      	ldr	r1, [pc, #68]	; (8006d20 <ai_platform_network_get_error+0x10c>)
 8006cdc:	4a11      	ldr	r2, [pc, #68]	; (8006d24 <ai_platform_network_get_error+0x110>)
 8006cde:	6019      	str	r1, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d0df      	beq.n	8006ca6 <ai_platform_network_get_error+0x92>
 8006ce6:	e7fe      	b.n	8006ce6 <ai_platform_network_get_error+0xd2>
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <ai_platform_network_get_error+0x104>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	4619      	mov	r1, r3
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	680b      	ldr	r3, [r1, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1fc      	bne.n	8006cf0 <ai_platform_network_get_error+0xdc>
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <ai_platform_network_get_error+0x108>)
 8006cf8:	4909      	ldr	r1, [pc, #36]	; (8006d20 <ai_platform_network_get_error+0x10c>)
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <ai_platform_network_get_error+0x110>)
 8006cfc:	6019      	str	r1, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d0d0      	beq.n	8006ca6 <ai_platform_network_get_error+0x92>
 8006d04:	e7fe      	b.n	8006d04 <ai_platform_network_get_error+0xf0>
 8006d06:	bf00      	nop
 8006d08:	a1c00100 	.word	0xa1c00100
 8006d0c:	e0002000 	.word	0xe0002000
 8006d10:	e0042000 	.word	0xe0042000
 8006d14:	5c001000 	.word	0x5c001000
 8006d18:	40023008 	.word	0x40023008
 8006d1c:	40023000 	.word	0x40023000
 8006d20:	f407a5c2 	.word	0xf407a5c2
 8006d24:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d28:	58024c08 	.word	0x58024c08
 8006d2c:	58024c00 	.word	0x58024c00

08006d30 <ai_platform_api_get_network_report>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	b085      	sub	sp, #20
 8006d38:	4605      	mov	r5, r0
 8006d3a:	b120      	cbz	r0, 8006d46 <ai_platform_api_get_network_report+0x16>
 8006d3c:	4ba7      	ldr	r3, [pc, #668]	; (8006fdc <ai_platform_api_get_network_report+0x2ac>)
 8006d3e:	6802      	ldr	r2, [r0, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	bf18      	it	ne
 8006d44:	2500      	movne	r5, #0
 8006d46:	4aa6      	ldr	r2, [pc, #664]	; (8006fe0 <ai_platform_api_get_network_report+0x2b0>)
 8006d48:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 8006d4c:	49a5      	ldr	r1, [pc, #660]	; (8006fe4 <ai_platform_api_get_network_report+0x2b4>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	680b      	ldr	r3, [r1, #0]
 8006d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d5c:	199a      	adds	r2, r3, r6
 8006d5e:	2a01      	cmp	r2, #1
 8006d60:	f240 8090 	bls.w	8006e84 <ai_platform_api_get_network_report+0x154>
 8006d64:	f240 4249 	movw	r2, #1097	; 0x449
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	f000 808b 	beq.w	8006e84 <ai_platform_api_get_network_report+0x154>
 8006d6e:	4b9e      	ldr	r3, [pc, #632]	; (8006fe8 <ai_platform_api_get_network_report+0x2b8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d76:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006d7a:	d073      	beq.n	8006e64 <ai_platform_api_get_network_report+0x134>
 8006d7c:	2d00      	cmp	r5, #0
 8006d7e:	f000 8091 	beq.w	8006ea4 <ai_platform_api_get_network_report+0x174>
 8006d82:	fab4 f384 	clz	r3, r4
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 808b 	bne.w	8006ea4 <ai_platform_api_get_network_report+0x174>
 8006d8e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006d90:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	f000 810f 	beq.w	8006fb6 <ai_platform_api_get_network_report+0x286>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006d9c:	68d3      	ldr	r3, [r2, #12]
 8006d9e:	b193      	cbz	r3, 8006dc6 <ai_platform_api_get_network_report+0x96>
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d010      	beq.n	8006dc6 <ai_platform_api_get_network_report+0x96>
 8006da4:	2202      	movs	r2, #2
 8006da6:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006da8:	3201      	adds	r2, #1
 8006daa:	68d9      	ldr	r1, [r3, #12]
 8006dac:	4299      	cmp	r1, r3
 8006dae:	bf18      	it	ne
 8006db0:	2900      	cmpne	r1, #0
 8006db2:	460b      	mov	r3, r1
 8006db4:	bf14      	ite	ne
 8006db6:	2001      	movne	r0, #1
 8006db8:	2000      	moveq	r0, #0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1f3      	bne.n	8006da6 <ai_platform_api_get_network_report+0x76>
 8006dbe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80f8 	beq.w	8006fb6 <ai_platform_api_get_network_report+0x286>
 8006dc6:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 80e7 	beq.w	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006dd0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	f000 80e3 	beq.w	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006dd8:	883b      	ldrh	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80df 	beq.w	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80db 	beq.w	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006de8:	681e      	ldr	r6, [r3, #0]
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	f000 80d7 	beq.w	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006df0:	f04f 0901 	mov.w	r9, #1
 8006df4:	f04f 0800 	mov.w	r8, #0
 8006df8:	464b      	mov	r3, r9
 8006dfa:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8006dfe:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8006e02:	69b0      	ldr	r0, [r6, #24]
 8006e04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006e08:	6800      	ldr	r0, [r0, #0]
 8006e0a:	eb01 0a02 	add.w	sl, r1, r2
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	f8dc b008 	ldr.w	fp, [ip, #8]
 8006e14:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8006e18:	f002 ff7a 	bl	8009d10 <ai_array_to_buffer_fmt>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006e22:	5088      	str	r0, [r1, r2]
 8006e24:	eb0b 0108 	add.w	r1, fp, r8
 8006e28:	f8aa 3004 	strh.w	r3, [sl, #4]
 8006e2c:	68f2      	ldr	r2, [r6, #12]
 8006e2e:	68d2      	ldr	r2, [r2, #12]
 8006e30:	f8aa 2006 	strh.w	r2, [sl, #6]
 8006e34:	68f2      	ldr	r2, [r6, #12]
 8006e36:	6892      	ldr	r2, [r2, #8]
 8006e38:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006e3c:	68f2      	ldr	r2, [r6, #12]
 8006e3e:	6852      	ldr	r2, [r2, #4]
 8006e40:	f8ca 200c 	str.w	r2, [sl, #12]
 8006e44:	69b2      	ldr	r2, [r6, #24]
 8006e46:	6892      	ldr	r2, [r2, #8]
 8006e48:	f8ca 2010 	str.w	r2, [sl, #16]
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d02d      	beq.n	8006eac <ai_platform_api_get_network_report+0x17c>
 8006e50:	2200      	movs	r2, #0
 8006e52:	f84b 2008 	str.w	r2, [fp, r8]
 8006e56:	6832      	ldr	r2, [r6, #0]
 8006e58:	604a      	str	r2, [r1, #4]
 8006e5a:	b33a      	cbz	r2, 8006eac <ai_platform_api_get_network_report+0x17c>
 8006e5c:	8852      	ldrh	r2, [r2, #2]
 8006e5e:	b32a      	cbz	r2, 8006eac <ai_platform_api_get_network_report+0x17c>
 8006e60:	600b      	str	r3, [r1, #0]
 8006e62:	e024      	b.n	8006eae <ai_platform_api_get_network_report+0x17e>
 8006e64:	4b61      	ldr	r3, [pc, #388]	; (8006fec <ai_platform_api_get_network_report+0x2bc>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	680b      	ldr	r3, [r1, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1fc      	bne.n	8006e6c <ai_platform_api_get_network_report+0x13c>
 8006e72:	4b5f      	ldr	r3, [pc, #380]	; (8006ff0 <ai_platform_api_get_network_report+0x2c0>)
 8006e74:	495f      	ldr	r1, [pc, #380]	; (8006ff4 <ai_platform_api_get_network_report+0x2c4>)
 8006e76:	4a60      	ldr	r2, [pc, #384]	; (8006ff8 <ai_platform_api_get_network_report+0x2c8>)
 8006e78:	6019      	str	r1, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	f43f af7d 	beq.w	8006d7c <ai_platform_api_get_network_report+0x4c>
 8006e82:	e7fe      	b.n	8006e82 <ai_platform_api_get_network_report+0x152>
 8006e84:	4b5d      	ldr	r3, [pc, #372]	; (8006ffc <ai_platform_api_get_network_report+0x2cc>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	680b      	ldr	r3, [r1, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1fc      	bne.n	8006e8c <ai_platform_api_get_network_report+0x15c>
 8006e92:	4b5b      	ldr	r3, [pc, #364]	; (8007000 <ai_platform_api_get_network_report+0x2d0>)
 8006e94:	4957      	ldr	r1, [pc, #348]	; (8006ff4 <ai_platform_api_get_network_report+0x2c4>)
 8006e96:	4a58      	ldr	r2, [pc, #352]	; (8006ff8 <ai_platform_api_get_network_report+0x2c8>)
 8006e98:	6019      	str	r1, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	f43f af6d 	beq.w	8006d7c <ai_platform_api_get_network_report+0x4c>
 8006ea2:	e7fe      	b.n	8006ea2 <ai_platform_api_get_network_report+0x172>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	b005      	add	sp, #20
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	2100      	movs	r1, #0
 8006eae:	f8ca 1014 	str.w	r1, [sl, #20]
 8006eb2:	fa1f f289 	uxth.w	r2, r9
 8006eb6:	8839      	ldrh	r1, [r7, #0]
 8006eb8:	f108 0808 	add.w	r8, r8, #8
 8006ebc:	4589      	cmp	r9, r1
 8006ebe:	d207      	bcs.n	8006ed0 <ai_platform_api_get_network_report+0x1a0>
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	b129      	cbz	r1, 8006ed0 <ai_platform_api_get_network_report+0x1a0>
 8006ec4:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8006ec8:	f109 0901 	add.w	r9, r9, #1
 8006ecc:	2e00      	cmp	r6, #0
 8006ece:	d194      	bne.n	8006dfa <ai_platform_api_get_network_report+0xca>
 8006ed0:	2a00      	cmp	r2, #0
 8006ed2:	d064      	beq.n	8006f9e <ai_platform_api_get_network_report+0x26e>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	8622      	strh	r2, [r4, #48]	; 0x30
 8006eda:	6363      	str	r3, [r4, #52]	; 0x34
 8006edc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d970      	bls.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8006ee4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8006ee6:	f117 0f0c 	cmn.w	r7, #12
 8006eea:	d06c      	beq.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8006eec:	89bb      	ldrh	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d069      	beq.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d066      	beq.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8006ef8:	681e      	ldr	r6, [r3, #0]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	d063      	beq.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8006efe:	f04f 0901 	mov.w	r9, #1
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	464b      	mov	r3, r9
 8006f08:	e01c      	b.n	8006f44 <ai_platform_api_get_network_report+0x214>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f84b 2008 	str.w	r2, [fp, r8]
 8006f10:	6832      	ldr	r2, [r6, #0]
 8006f12:	604a      	str	r2, [r1, #4]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d040      	beq.n	8006f9a <ai_platform_api_get_network_report+0x26a>
 8006f18:	8852      	ldrh	r2, [r2, #2]
 8006f1a:	2a00      	cmp	r2, #0
 8006f1c:	d03d      	beq.n	8006f9a <ai_platform_api_get_network_report+0x26a>
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	f8ca 1014 	str.w	r1, [sl, #20]
 8006f24:	fa1f f289 	uxth.w	r2, r9
 8006f28:	89b9      	ldrh	r1, [r7, #12]
 8006f2a:	f108 0808 	add.w	r8, r8, #8
 8006f2e:	4589      	cmp	r9, r1
 8006f30:	d268      	bcs.n	8007004 <ai_platform_api_get_network_report+0x2d4>
 8006f32:	6939      	ldr	r1, [r7, #16]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d065      	beq.n	8007004 <ai_platform_api_get_network_report+0x2d4>
 8006f38:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8006f3c:	f109 0901 	add.w	r9, r9, #1
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	d05f      	beq.n	8007004 <ai_platform_api_get_network_report+0x2d4>
 8006f44:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8006f48:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8006f4c:	69b0      	ldr	r0, [r6, #24]
 8006f4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	eb01 0a02 	add.w	sl, r1, r2
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	f8dc b008 	ldr.w	fp, [ip, #8]
 8006f5e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8006f62:	f002 fed5 	bl	8009d10 <ai_array_to_buffer_fmt>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006f6c:	5088      	str	r0, [r1, r2]
 8006f6e:	eb0b 0108 	add.w	r1, fp, r8
 8006f72:	f8aa 3004 	strh.w	r3, [sl, #4]
 8006f76:	68f2      	ldr	r2, [r6, #12]
 8006f78:	68d2      	ldr	r2, [r2, #12]
 8006f7a:	f8aa 2006 	strh.w	r2, [sl, #6]
 8006f7e:	68f2      	ldr	r2, [r6, #12]
 8006f80:	6892      	ldr	r2, [r2, #8]
 8006f82:	f8aa 2008 	strh.w	r2, [sl, #8]
 8006f86:	68f2      	ldr	r2, [r6, #12]
 8006f88:	6852      	ldr	r2, [r2, #4]
 8006f8a:	f8ca 200c 	str.w	r2, [sl, #12]
 8006f8e:	69b2      	ldr	r2, [r6, #24]
 8006f90:	6892      	ldr	r2, [r2, #8]
 8006f92:	f8ca 2010 	str.w	r2, [sl, #16]
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d1b7      	bne.n	8006f0a <ai_platform_api_get_network_report+0x1da>
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	e7c0      	b.n	8006f20 <ai_platform_api_get_network_report+0x1f0>
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	f105 0010 	add.w	r0, r5, #16
 8006fa4:	2218      	movs	r2, #24
 8006fa6:	2112      	movs	r1, #18
 8006fa8:	8626      	strh	r6, [r4, #48]	; 0x30
 8006faa:	f000 fea9 	bl	8007d00 <core_set_error>
 8006fae:	4630      	mov	r0, r6
 8006fb0:	b005      	add	sp, #20
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	f105 0010 	add.w	r0, r5, #16
 8006fba:	2218      	movs	r2, #24
 8006fbc:	2111      	movs	r1, #17
 8006fbe:	f000 fe9f 	bl	8007d00 <core_set_error>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e76f      	b.n	8006ea6 <ai_platform_api_get_network_report+0x176>
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	f105 0010 	add.w	r0, r5, #16
 8006fcc:	2218      	movs	r2, #24
 8006fce:	2113      	movs	r1, #19
 8006fd0:	8666      	strh	r6, [r4, #50]	; 0x32
 8006fd2:	f000 fe95 	bl	8007d00 <core_set_error>
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	e765      	b.n	8006ea6 <ai_platform_api_get_network_report+0x176>
 8006fda:	bf00      	nop
 8006fdc:	a1c00100 	.word	0xa1c00100
 8006fe0:	e0002000 	.word	0xe0002000
 8006fe4:	e0042000 	.word	0xe0042000
 8006fe8:	5c001000 	.word	0x5c001000
 8006fec:	58024c08 	.word	0x58024c08
 8006ff0:	58024c00 	.word	0x58024c00
 8006ff4:	f407a5c2 	.word	0xf407a5c2
 8006ff8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ffc:	40023008 	.word	0x40023008
 8007000:	40023000 	.word	0x40023000
 8007004:	2a00      	cmp	r2, #0
 8007006:	d0de      	beq.n	8006fc6 <ai_platform_api_get_network_report+0x296>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800700e:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8007012:	f105 0718 	add.w	r7, r5, #24
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f104 0654 	add.w	r6, r4, #84	; 0x54
 800701c:	8662      	strh	r2, [r4, #50]	; 0x32
 800701e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007020:	686b      	ldr	r3, [r5, #4]
 8007022:	4d80      	ldr	r5, [pc, #512]	; (8007224 <ai_platform_api_get_network_report+0x4f4>)
 8007024:	6723      	str	r3, [r4, #112]	; 0x70
 8007026:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800702a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800702e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8007032:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8007230 <ai_platform_api_get_network_report+0x500>
 8007036:	e88c 0003 	stmia.w	ip, {r0, r1}
 800703a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800703c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800703e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007042:	e886 0003 	stmia.w	r6, {r0, r1}
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8007052:	f8de 3000 	ldr.w	r3, [lr]
 8007056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800705a:	195a      	adds	r2, r3, r5
 800705c:	2a01      	cmp	r2, #1
 800705e:	d966      	bls.n	800712e <ai_platform_api_get_network_report+0x3fe>
 8007060:	f240 4249 	movw	r2, #1097	; 0x449
 8007064:	4293      	cmp	r3, r2
 8007066:	d062      	beq.n	800712e <ai_platform_api_get_network_report+0x3fe>
 8007068:	4b6f      	ldr	r3, [pc, #444]	; (8007228 <ai_platform_api_get_network_report+0x4f8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007070:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007074:	f000 80c6 	beq.w	8007204 <ai_platform_api_get_network_report+0x4d4>
 8007078:	4a6a      	ldr	r2, [pc, #424]	; (8007224 <ai_platform_api_get_network_report+0x4f4>)
 800707a:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800707e:	4b6b      	ldr	r3, [pc, #428]	; (800722c <ai_platform_api_get_network_report+0x4fc>)
 8007080:	496b      	ldr	r1, [pc, #428]	; (8007230 <ai_platform_api_get_network_report+0x500>)
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	6813      	ldr	r3, [r2, #0]
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	680b      	ldr	r3, [r1, #0]
 800708e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007092:	181a      	adds	r2, r3, r0
 8007094:	2a01      	cmp	r2, #1
 8007096:	f240 80a5 	bls.w	80071e4 <ai_platform_api_get_network_report+0x4b4>
 800709a:	f240 4249 	movw	r2, #1097	; 0x449
 800709e:	4293      	cmp	r3, r2
 80070a0:	f000 80a0 	beq.w	80071e4 <ai_platform_api_get_network_report+0x4b4>
 80070a4:	4b60      	ldr	r3, [pc, #384]	; (8007228 <ai_platform_api_get_network_report+0x4f8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80070b0:	f000 8088 	beq.w	80071c4 <ai_platform_api_get_network_report+0x494>
 80070b4:	4a5b      	ldr	r2, [pc, #364]	; (8007224 <ai_platform_api_get_network_report+0x4f4>)
 80070b6:	f240 2305 	movw	r3, #517	; 0x205
 80070ba:	495d      	ldr	r1, [pc, #372]	; (8007230 <ai_platform_api_get_network_report+0x500>)
 80070bc:	6163      	str	r3, [r4, #20]
 80070be:	6813      	ldr	r3, [r2, #0]
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	680b      	ldr	r3, [r1, #0]
 80070c8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80070cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070d0:	185a      	adds	r2, r3, r1
 80070d2:	2a01      	cmp	r2, #1
 80070d4:	d967      	bls.n	80071a6 <ai_platform_api_get_network_report+0x476>
 80070d6:	f240 4249 	movw	r2, #1097	; 0x449
 80070da:	4293      	cmp	r3, r2
 80070dc:	d063      	beq.n	80071a6 <ai_platform_api_get_network_report+0x476>
 80070de:	4b52      	ldr	r3, [pc, #328]	; (8007228 <ai_platform_api_get_network_report+0x4f8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80070ea:	d04d      	beq.n	8007188 <ai_platform_api_get_network_report+0x458>
 80070ec:	4a4d      	ldr	r2, [pc, #308]	; (8007224 <ai_platform_api_get_network_report+0x4f4>)
 80070ee:	f240 1301 	movw	r3, #257	; 0x101
 80070f2:	494f      	ldr	r1, [pc, #316]	; (8007230 <ai_platform_api_get_network_report+0x500>)
 80070f4:	6263      	str	r3, [r4, #36]	; 0x24
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007102:	680b      	ldr	r3, [r1, #0]
 8007104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007108:	189a      	adds	r2, r3, r2
 800710a:	2a01      	cmp	r2, #1
 800710c:	d92d      	bls.n	800716a <ai_platform_api_get_network_report+0x43a>
 800710e:	f240 4249 	movw	r2, #1097	; 0x449
 8007112:	4293      	cmp	r3, r2
 8007114:	d029      	beq.n	800716a <ai_platform_api_get_network_report+0x43a>
 8007116:	4b44      	ldr	r3, [pc, #272]	; (8007228 <ai_platform_api_get_network_report+0x4f8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800711e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007122:	d013      	beq.n	800714c <ai_platform_api_get_network_report+0x41c>
 8007124:	f240 4301 	movw	r3, #1025	; 0x401
 8007128:	2001      	movs	r0, #1
 800712a:	62a3      	str	r3, [r4, #40]	; 0x28
 800712c:	e6bb      	b.n	8006ea6 <ai_platform_api_get_network_report+0x176>
 800712e:	4b41      	ldr	r3, [pc, #260]	; (8007234 <ai_platform_api_get_network_report+0x504>)
 8007130:	2201      	movs	r2, #1
 8007132:	4619      	mov	r1, r3
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	680b      	ldr	r3, [r1, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1fc      	bne.n	8007136 <ai_platform_api_get_network_report+0x406>
 800713c:	4b3e      	ldr	r3, [pc, #248]	; (8007238 <ai_platform_api_get_network_report+0x508>)
 800713e:	493f      	ldr	r1, [pc, #252]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 8007140:	4a3f      	ldr	r2, [pc, #252]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 8007142:	6019      	str	r1, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4293      	cmp	r3, r2
 8007148:	d096      	beq.n	8007078 <ai_platform_api_get_network_report+0x348>
 800714a:	e7fe      	b.n	800714a <ai_platform_api_get_network_report+0x41a>
 800714c:	4b3d      	ldr	r3, [pc, #244]	; (8007244 <ai_platform_api_get_network_report+0x514>)
 800714e:	2201      	movs	r2, #1
 8007150:	4619      	mov	r1, r3
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	680b      	ldr	r3, [r1, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1fc      	bne.n	8007154 <ai_platform_api_get_network_report+0x424>
 800715a:	4b3b      	ldr	r3, [pc, #236]	; (8007248 <ai_platform_api_get_network_report+0x518>)
 800715c:	4937      	ldr	r1, [pc, #220]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 800715e:	4a38      	ldr	r2, [pc, #224]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4293      	cmp	r3, r2
 8007166:	d0dd      	beq.n	8007124 <ai_platform_api_get_network_report+0x3f4>
 8007168:	e7fe      	b.n	8007168 <ai_platform_api_get_network_report+0x438>
 800716a:	4b32      	ldr	r3, [pc, #200]	; (8007234 <ai_platform_api_get_network_report+0x504>)
 800716c:	2201      	movs	r2, #1
 800716e:	4619      	mov	r1, r3
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	680b      	ldr	r3, [r1, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1fc      	bne.n	8007172 <ai_platform_api_get_network_report+0x442>
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <ai_platform_api_get_network_report+0x508>)
 800717a:	4930      	ldr	r1, [pc, #192]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 800717c:	4a30      	ldr	r2, [pc, #192]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 800717e:	6019      	str	r1, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4293      	cmp	r3, r2
 8007184:	d0ce      	beq.n	8007124 <ai_platform_api_get_network_report+0x3f4>
 8007186:	e7fe      	b.n	8007186 <ai_platform_api_get_network_report+0x456>
 8007188:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <ai_platform_api_get_network_report+0x514>)
 800718a:	2201      	movs	r2, #1
 800718c:	4619      	mov	r1, r3
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	680b      	ldr	r3, [r1, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1fc      	bne.n	8007190 <ai_platform_api_get_network_report+0x460>
 8007196:	4b2c      	ldr	r3, [pc, #176]	; (8007248 <ai_platform_api_get_network_report+0x518>)
 8007198:	4928      	ldr	r1, [pc, #160]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 800719a:	4a29      	ldr	r2, [pc, #164]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 800719c:	6019      	str	r1, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d0a3      	beq.n	80070ec <ai_platform_api_get_network_report+0x3bc>
 80071a4:	e7fe      	b.n	80071a4 <ai_platform_api_get_network_report+0x474>
 80071a6:	4b23      	ldr	r3, [pc, #140]	; (8007234 <ai_platform_api_get_network_report+0x504>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	4619      	mov	r1, r3
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	680b      	ldr	r3, [r1, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1fc      	bne.n	80071ae <ai_platform_api_get_network_report+0x47e>
 80071b4:	4b20      	ldr	r3, [pc, #128]	; (8007238 <ai_platform_api_get_network_report+0x508>)
 80071b6:	4921      	ldr	r1, [pc, #132]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 80071ba:	6019      	str	r1, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d094      	beq.n	80070ec <ai_platform_api_get_network_report+0x3bc>
 80071c2:	e7fe      	b.n	80071c2 <ai_platform_api_get_network_report+0x492>
 80071c4:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <ai_platform_api_get_network_report+0x514>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	4619      	mov	r1, r3
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	680b      	ldr	r3, [r1, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1fc      	bne.n	80071cc <ai_platform_api_get_network_report+0x49c>
 80071d2:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <ai_platform_api_get_network_report+0x518>)
 80071d4:	4919      	ldr	r1, [pc, #100]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 80071d8:	6019      	str	r1, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4293      	cmp	r3, r2
 80071de:	f43f af69 	beq.w	80070b4 <ai_platform_api_get_network_report+0x384>
 80071e2:	e7fe      	b.n	80071e2 <ai_platform_api_get_network_report+0x4b2>
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <ai_platform_api_get_network_report+0x504>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	4619      	mov	r1, r3
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	680b      	ldr	r3, [r1, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1fc      	bne.n	80071ec <ai_platform_api_get_network_report+0x4bc>
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <ai_platform_api_get_network_report+0x508>)
 80071f4:	4911      	ldr	r1, [pc, #68]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 80071f6:	4a12      	ldr	r2, [pc, #72]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	f43f af59 	beq.w	80070b4 <ai_platform_api_get_network_report+0x384>
 8007202:	e7fe      	b.n	8007202 <ai_platform_api_get_network_report+0x4d2>
 8007204:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <ai_platform_api_get_network_report+0x514>)
 8007206:	2201      	movs	r2, #1
 8007208:	4619      	mov	r1, r3
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	680b      	ldr	r3, [r1, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1fc      	bne.n	800720c <ai_platform_api_get_network_report+0x4dc>
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <ai_platform_api_get_network_report+0x518>)
 8007214:	4909      	ldr	r1, [pc, #36]	; (800723c <ai_platform_api_get_network_report+0x50c>)
 8007216:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <ai_platform_api_get_network_report+0x510>)
 8007218:	6019      	str	r1, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4293      	cmp	r3, r2
 800721e:	f43f af2b 	beq.w	8007078 <ai_platform_api_get_network_report+0x348>
 8007222:	e7fe      	b.n	8007222 <ai_platform_api_get_network_report+0x4f2>
 8007224:	e0002000 	.word	0xe0002000
 8007228:	5c001000 	.word	0x5c001000
 800722c:	08031144 	.word	0x08031144
 8007230:	e0042000 	.word	0xe0042000
 8007234:	40023008 	.word	0x40023008
 8007238:	40023000 	.word	0x40023000
 800723c:	f407a5c2 	.word	0xf407a5c2
 8007240:	b5e8b5cd 	.word	0xb5e8b5cd
 8007244:	58024c08 	.word	0x58024c08
 8007248:	58024c00 	.word	0x58024c00

0800724c <ai_platform_network_create>:
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	4d36      	ldr	r5, [pc, #216]	; (8007328 <ai_platform_network_create+0xdc>)
 8007250:	b083      	sub	sp, #12
 8007252:	4e36      	ldr	r6, [pc, #216]	; (800732c <ai_platform_network_create+0xe0>)
 8007254:	6829      	ldr	r1, [r5, #0]
 8007256:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800725a:	f021 0101 	bic.w	r1, r1, #1
 800725e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007262:	6029      	str	r1, [r5, #0]
 8007264:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8007268:	6831      	ldr	r1, [r6, #0]
 800726a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800726e:	194d      	adds	r5, r1, r5
 8007270:	2d01      	cmp	r5, #1
 8007272:	d92f      	bls.n	80072d4 <ai_platform_network_create+0x88>
 8007274:	f240 4549 	movw	r5, #1097	; 0x449
 8007278:	42a9      	cmp	r1, r5
 800727a:	d02b      	beq.n	80072d4 <ai_platform_network_create+0x88>
 800727c:	492c      	ldr	r1, [pc, #176]	; (8007330 <ai_platform_network_create+0xe4>)
 800727e:	6809      	ldr	r1, [r1, #0]
 8007280:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007284:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8007288:	d015      	beq.n	80072b6 <ai_platform_network_create+0x6a>
 800728a:	2800      	cmp	r0, #0
 800728c:	d031      	beq.n	80072f2 <ai_platform_network_create+0xa6>
 800728e:	461e      	mov	r6, r3
 8007290:	4613      	mov	r3, r2
 8007292:	4a28      	ldr	r2, [pc, #160]	; (8007334 <ai_platform_network_create+0xe8>)
 8007294:	4605      	mov	r5, r0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	f000 fd29 	bl	8007cf0 <core_init>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d02b      	beq.n	80072fa <ai_platform_network_create+0xae>
 80072a2:	0223      	lsls	r3, r4, #8
 80072a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80072ac:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80072b0:	d92e      	bls.n	8007310 <ai_platform_network_create+0xc4>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e022      	b.n	80072fc <ai_platform_network_create+0xb0>
 80072b6:	4920      	ldr	r1, [pc, #128]	; (8007338 <ai_platform_network_create+0xec>)
 80072b8:	2501      	movs	r5, #1
 80072ba:	460e      	mov	r6, r1
 80072bc:	600d      	str	r5, [r1, #0]
 80072be:	6831      	ldr	r1, [r6, #0]
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d1fc      	bne.n	80072be <ai_platform_network_create+0x72>
 80072c4:	491d      	ldr	r1, [pc, #116]	; (800733c <ai_platform_network_create+0xf0>)
 80072c6:	4e1e      	ldr	r6, [pc, #120]	; (8007340 <ai_platform_network_create+0xf4>)
 80072c8:	4d1e      	ldr	r5, [pc, #120]	; (8007344 <ai_platform_network_create+0xf8>)
 80072ca:	600e      	str	r6, [r1, #0]
 80072cc:	6809      	ldr	r1, [r1, #0]
 80072ce:	42a9      	cmp	r1, r5
 80072d0:	d0db      	beq.n	800728a <ai_platform_network_create+0x3e>
 80072d2:	e7fe      	b.n	80072d2 <ai_platform_network_create+0x86>
 80072d4:	491c      	ldr	r1, [pc, #112]	; (8007348 <ai_platform_network_create+0xfc>)
 80072d6:	2501      	movs	r5, #1
 80072d8:	460e      	mov	r6, r1
 80072da:	600d      	str	r5, [r1, #0]
 80072dc:	6831      	ldr	r1, [r6, #0]
 80072de:	2900      	cmp	r1, #0
 80072e0:	d1fc      	bne.n	80072dc <ai_platform_network_create+0x90>
 80072e2:	491a      	ldr	r1, [pc, #104]	; (800734c <ai_platform_network_create+0x100>)
 80072e4:	4e16      	ldr	r6, [pc, #88]	; (8007340 <ai_platform_network_create+0xf4>)
 80072e6:	4d17      	ldr	r5, [pc, #92]	; (8007344 <ai_platform_network_create+0xf8>)
 80072e8:	600e      	str	r6, [r1, #0]
 80072ea:	6809      	ldr	r1, [r1, #0]
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d0cc      	beq.n	800728a <ai_platform_network_create+0x3e>
 80072f0:	e7fe      	b.n	80072f0 <ai_platform_network_create+0xa4>
 80072f2:	f241 0010 	movw	r0, #4112	; 0x1010
 80072f6:	b003      	add	sp, #12
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	2330      	movs	r3, #48	; 0x30
 80072fc:	2100      	movs	r1, #0
 80072fe:	2210      	movs	r2, #16
 8007300:	6029      	str	r1, [r5, #0]
 8007302:	2000      	movs	r0, #0
 8007304:	f363 0007 	bfi	r0, r3, #0, #8
 8007308:	f362 201f 	bfi	r0, r2, #8, #24
 800730c:	b003      	add	sp, #12
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <ai_platform_network_create+0x104>)
 8007312:	a802      	add	r0, sp, #8
 8007314:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007318:	f002 fc96 	bl	8009c48 <ai_check_custom_types>
 800731c:	b110      	cbz	r0, 8007324 <ai_platform_network_create+0xd8>
 800731e:	2200      	movs	r2, #0
 8007320:	4613      	mov	r3, r2
 8007322:	e7ee      	b.n	8007302 <ai_platform_network_create+0xb6>
 8007324:	2302      	movs	r3, #2
 8007326:	e7e9      	b.n	80072fc <ai_platform_network_create+0xb0>
 8007328:	e0002000 	.word	0xe0002000
 800732c:	e0042000 	.word	0xe0042000
 8007330:	5c001000 	.word	0x5c001000
 8007334:	a1c00100 	.word	0xa1c00100
 8007338:	58024c08 	.word	0x58024c08
 800733c:	58024c00 	.word	0x58024c00
 8007340:	f407a5c2 	.word	0xf407a5c2
 8007344:	b5e8b5cd 	.word	0xb5e8b5cd
 8007348:	40023008 	.word	0x40023008
 800734c:	40023000 	.word	0x40023000
 8007350:	84048403 	.word	0x84048403

08007354 <ai_platform_network_destroy>:
 8007354:	b118      	cbz	r0, 800735e <ai_platform_network_destroy+0xa>
 8007356:	4b3a      	ldr	r3, [pc, #232]	; (8007440 <ai_platform_network_destroy+0xec>)
 8007358:	6802      	ldr	r2, [r0, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d037      	beq.n	80073ce <ai_platform_network_destroy+0x7a>
 800735e:	4a39      	ldr	r2, [pc, #228]	; (8007444 <ai_platform_network_destroy+0xf0>)
 8007360:	4939      	ldr	r1, [pc, #228]	; (8007448 <ai_platform_network_destroy+0xf4>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	680b      	ldr	r3, [r1, #0]
 800736c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007374:	185a      	adds	r2, r3, r1
 8007376:	2a01      	cmp	r2, #1
 8007378:	d90b      	bls.n	8007392 <ai_platform_network_destroy+0x3e>
 800737a:	f240 4249 	movw	r2, #1097	; 0x449
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <ai_platform_network_destroy+0x3e>
 8007382:	4b32      	ldr	r3, [pc, #200]	; (800744c <ai_platform_network_destroy+0xf8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800738e:	d00f      	beq.n	80073b0 <ai_platform_network_destroy+0x5c>
 8007390:	4770      	bx	lr
 8007392:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <ai_platform_network_destroy+0xfc>)
 8007394:	2201      	movs	r2, #1
 8007396:	4619      	mov	r1, r3
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	680b      	ldr	r3, [r1, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1fc      	bne.n	800739a <ai_platform_network_destroy+0x46>
 80073a0:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <ai_platform_network_destroy+0x100>)
 80073a2:	492d      	ldr	r1, [pc, #180]	; (8007458 <ai_platform_network_destroy+0x104>)
 80073a4:	4a2d      	ldr	r2, [pc, #180]	; (800745c <ai_platform_network_destroy+0x108>)
 80073a6:	6019      	str	r1, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d0f0      	beq.n	8007390 <ai_platform_network_destroy+0x3c>
 80073ae:	e7fe      	b.n	80073ae <ai_platform_network_destroy+0x5a>
 80073b0:	4b2b      	ldr	r3, [pc, #172]	; (8007460 <ai_platform_network_destroy+0x10c>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	4619      	mov	r1, r3
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1fc      	bne.n	80073b8 <ai_platform_network_destroy+0x64>
 80073be:	4b29      	ldr	r3, [pc, #164]	; (8007464 <ai_platform_network_destroy+0x110>)
 80073c0:	4925      	ldr	r1, [pc, #148]	; (8007458 <ai_platform_network_destroy+0x104>)
 80073c2:	4a26      	ldr	r2, [pc, #152]	; (800745c <ai_platform_network_destroy+0x108>)
 80073c4:	6019      	str	r1, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d0e1      	beq.n	8007390 <ai_platform_network_destroy+0x3c>
 80073cc:	e7fe      	b.n	80073cc <ai_platform_network_destroy+0x78>
 80073ce:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <ai_platform_network_destroy+0xf0>)
 80073d0:	491d      	ldr	r1, [pc, #116]	; (8007448 <ai_platform_network_destroy+0xf4>)
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80073de:	680b      	ldr	r3, [r1, #0]
 80073e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e4:	189a      	adds	r2, r3, r2
 80073e6:	2a01      	cmp	r2, #1
 80073e8:	d90c      	bls.n	8007404 <ai_platform_network_destroy+0xb0>
 80073ea:	f240 4249 	movw	r2, #1097	; 0x449
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d008      	beq.n	8007404 <ai_platform_network_destroy+0xb0>
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <ai_platform_network_destroy+0xf8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80073fe:	d010      	beq.n	8007422 <ai_platform_network_destroy+0xce>
 8007400:	2000      	movs	r0, #0
 8007402:	4770      	bx	lr
 8007404:	4b12      	ldr	r3, [pc, #72]	; (8007450 <ai_platform_network_destroy+0xfc>)
 8007406:	2201      	movs	r2, #1
 8007408:	4619      	mov	r1, r3
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	680b      	ldr	r3, [r1, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1fc      	bne.n	800740c <ai_platform_network_destroy+0xb8>
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <ai_platform_network_destroy+0x100>)
 8007414:	4910      	ldr	r1, [pc, #64]	; (8007458 <ai_platform_network_destroy+0x104>)
 8007416:	4a11      	ldr	r2, [pc, #68]	; (800745c <ai_platform_network_destroy+0x108>)
 8007418:	6019      	str	r1, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4293      	cmp	r3, r2
 800741e:	d0ef      	beq.n	8007400 <ai_platform_network_destroy+0xac>
 8007420:	e7fe      	b.n	8007420 <ai_platform_network_destroy+0xcc>
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <ai_platform_network_destroy+0x10c>)
 8007424:	2201      	movs	r2, #1
 8007426:	4619      	mov	r1, r3
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	680b      	ldr	r3, [r1, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1fc      	bne.n	800742a <ai_platform_network_destroy+0xd6>
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <ai_platform_network_destroy+0x110>)
 8007432:	4909      	ldr	r1, [pc, #36]	; (8007458 <ai_platform_network_destroy+0x104>)
 8007434:	4a09      	ldr	r2, [pc, #36]	; (800745c <ai_platform_network_destroy+0x108>)
 8007436:	6019      	str	r1, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4293      	cmp	r3, r2
 800743c:	d0e0      	beq.n	8007400 <ai_platform_network_destroy+0xac>
 800743e:	e7fe      	b.n	800743e <ai_platform_network_destroy+0xea>
 8007440:	a1c00100 	.word	0xa1c00100
 8007444:	e0002000 	.word	0xe0002000
 8007448:	e0042000 	.word	0xe0042000
 800744c:	5c001000 	.word	0x5c001000
 8007450:	40023008 	.word	0x40023008
 8007454:	40023000 	.word	0x40023000
 8007458:	f407a5c2 	.word	0xf407a5c2
 800745c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007460:	58024c08 	.word	0x58024c08
 8007464:	58024c00 	.word	0x58024c00

08007468 <ai_platform_network_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	2800      	cmp	r0, #0
 800746c:	d05e      	beq.n	800752c <ai_platform_network_init+0xc4>
 800746e:	4b68      	ldr	r3, [pc, #416]	; (8007610 <ai_platform_network_init+0x1a8>)
 8007470:	6802      	ldr	r2, [r0, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d15a      	bne.n	800752c <ai_platform_network_init+0xc4>
 8007476:	4a67      	ldr	r2, [pc, #412]	; (8007614 <ai_platform_network_init+0x1ac>)
 8007478:	4c67      	ldr	r4, [pc, #412]	; (8007618 <ai_platform_network_init+0x1b0>)
 800747a:	6813      	ldr	r3, [r2, #0]
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800748c:	189a      	adds	r2, r3, r2
 800748e:	2a01      	cmp	r2, #1
 8007490:	d93d      	bls.n	800750e <ai_platform_network_init+0xa6>
 8007492:	f240 4249 	movw	r2, #1097	; 0x449
 8007496:	4293      	cmp	r3, r2
 8007498:	d039      	beq.n	800750e <ai_platform_network_init+0xa6>
 800749a:	4b60      	ldr	r3, [pc, #384]	; (800761c <ai_platform_network_init+0x1b4>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80074a6:	d06b      	beq.n	8007580 <ai_platform_network_init+0x118>
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	2900      	cmp	r1, #0
 80074ae:	f000 80a8 	beq.w	8007602 <ai_platform_network_init+0x19a>
 80074b2:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80074b4:	690e      	ldr	r6, [r1, #16]
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	f000 8092 	beq.w	80075e0 <ai_platform_network_init+0x178>
 80074bc:	2e00      	cmp	r6, #0
 80074be:	d07d      	beq.n	80075bc <ai_platform_network_init+0x154>
 80074c0:	f104 0718 	add.w	r7, r4, #24
 80074c4:	f105 0c18 	add.w	ip, r5, #24
 80074c8:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80074cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80074d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074d6:	2403      	movs	r4, #3
 80074d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80074dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80074de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80074e0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80074e4:	e886 0003 	stmia.w	r6, {r0, r1}
 80074e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80074ea:	60ec      	str	r4, [r5, #12]
 80074ec:	b16a      	cbz	r2, 800750a <ai_platform_network_init+0xa2>
 80074ee:	68d3      	ldr	r3, [r2, #12]
 80074f0:	6095      	str	r5, [r2, #8]
 80074f2:	b153      	cbz	r3, 800750a <ai_platform_network_init+0xa2>
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d104      	bne.n	8007502 <ai_platform_network_init+0x9a>
 80074f8:	e007      	b.n	800750a <ai_platform_network_init+0xa2>
 80074fa:	429a      	cmp	r2, r3
 80074fc:	4613      	mov	r3, r2
 80074fe:	d004      	beq.n	800750a <ai_platform_network_init+0xa2>
 8007500:	b11a      	cbz	r2, 800750a <ai_platform_network_init+0xa2>
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	609d      	str	r5, [r3, #8]
 8007506:	2a00      	cmp	r2, #0
 8007508:	d1f7      	bne.n	80074fa <ai_platform_network_init+0x92>
 800750a:	4628      	mov	r0, r5
 800750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800750e:	4b44      	ldr	r3, [pc, #272]	; (8007620 <ai_platform_network_init+0x1b8>)
 8007510:	2201      	movs	r2, #1
 8007512:	461c      	mov	r4, r3
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1fc      	bne.n	8007516 <ai_platform_network_init+0xae>
 800751c:	4b41      	ldr	r3, [pc, #260]	; (8007624 <ai_platform_network_init+0x1bc>)
 800751e:	4c42      	ldr	r4, [pc, #264]	; (8007628 <ai_platform_network_init+0x1c0>)
 8007520:	4a42      	ldr	r2, [pc, #264]	; (800762c <ai_platform_network_init+0x1c4>)
 8007522:	601c      	str	r4, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4293      	cmp	r3, r2
 8007528:	d0be      	beq.n	80074a8 <ai_platform_network_init+0x40>
 800752a:	e7fe      	b.n	800752a <ai_platform_network_init+0xc2>
 800752c:	4a39      	ldr	r2, [pc, #228]	; (8007614 <ai_platform_network_init+0x1ac>)
 800752e:	493a      	ldr	r1, [pc, #232]	; (8007618 <ai_platform_network_init+0x1b0>)
 8007530:	6813      	ldr	r3, [r2, #0]
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	680b      	ldr	r3, [r1, #0]
 800753a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800753e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007542:	185a      	adds	r2, r3, r1
 8007544:	2a01      	cmp	r2, #1
 8007546:	d90c      	bls.n	8007562 <ai_platform_network_init+0xfa>
 8007548:	f240 4249 	movw	r2, #1097	; 0x449
 800754c:	4293      	cmp	r3, r2
 800754e:	d008      	beq.n	8007562 <ai_platform_network_init+0xfa>
 8007550:	4b32      	ldr	r3, [pc, #200]	; (800761c <ai_platform_network_init+0x1b4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007558:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800755c:	d01f      	beq.n	800759e <ai_platform_network_init+0x136>
 800755e:	2000      	movs	r0, #0
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007562:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <ai_platform_network_init+0x1b8>)
 8007564:	2201      	movs	r2, #1
 8007566:	4619      	mov	r1, r3
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	680b      	ldr	r3, [r1, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1fc      	bne.n	800756a <ai_platform_network_init+0x102>
 8007570:	4b2c      	ldr	r3, [pc, #176]	; (8007624 <ai_platform_network_init+0x1bc>)
 8007572:	492d      	ldr	r1, [pc, #180]	; (8007628 <ai_platform_network_init+0x1c0>)
 8007574:	4a2d      	ldr	r2, [pc, #180]	; (800762c <ai_platform_network_init+0x1c4>)
 8007576:	6019      	str	r1, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4293      	cmp	r3, r2
 800757c:	d0ef      	beq.n	800755e <ai_platform_network_init+0xf6>
 800757e:	e7fe      	b.n	800757e <ai_platform_network_init+0x116>
 8007580:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <ai_platform_network_init+0x1c8>)
 8007582:	2201      	movs	r2, #1
 8007584:	461c      	mov	r4, r3
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1fc      	bne.n	8007588 <ai_platform_network_init+0x120>
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <ai_platform_network_init+0x1cc>)
 8007590:	4c25      	ldr	r4, [pc, #148]	; (8007628 <ai_platform_network_init+0x1c0>)
 8007592:	4a26      	ldr	r2, [pc, #152]	; (800762c <ai_platform_network_init+0x1c4>)
 8007594:	601c      	str	r4, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4293      	cmp	r3, r2
 800759a:	d085      	beq.n	80074a8 <ai_platform_network_init+0x40>
 800759c:	e7fe      	b.n	800759c <ai_platform_network_init+0x134>
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <ai_platform_network_init+0x1c8>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	680b      	ldr	r3, [r1, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1fc      	bne.n	80075a6 <ai_platform_network_init+0x13e>
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <ai_platform_network_init+0x1cc>)
 80075ae:	491e      	ldr	r1, [pc, #120]	; (8007628 <ai_platform_network_init+0x1c0>)
 80075b0:	4a1e      	ldr	r2, [pc, #120]	; (800762c <ai_platform_network_init+0x1c4>)
 80075b2:	6019      	str	r1, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d0d1      	beq.n	800755e <ai_platform_network_init+0xf6>
 80075ba:	e7fe      	b.n	80075ba <ai_platform_network_init+0x152>
 80075bc:	8921      	ldrh	r1, [r4, #8]
 80075be:	88e2      	ldrh	r2, [r4, #6]
 80075c0:	68e3      	ldr	r3, [r4, #12]
 80075c2:	fb02 f201 	mul.w	r2, r2, r1
 80075c6:	fb03 f302 	mul.w	r3, r3, r2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f43f af78 	beq.w	80074c0 <ai_platform_network_init+0x58>
 80075d0:	f105 0010 	add.w	r0, r5, #16
 80075d4:	2212      	movs	r2, #18
 80075d6:	2110      	movs	r1, #16
 80075d8:	f000 fb92 	bl	8007d00 <core_set_error>
 80075dc:	4630      	mov	r0, r6
 80075de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e0:	8c09      	ldrh	r1, [r1, #32]
 80075e2:	8be2      	ldrh	r2, [r4, #30]
 80075e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e6:	fb02 f201 	mul.w	r2, r2, r1
 80075ea:	fb03 f302 	mul.w	r3, r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f43f af64 	beq.w	80074bc <ai_platform_network_init+0x54>
 80075f4:	2213      	movs	r2, #19
 80075f6:	2110      	movs	r1, #16
 80075f8:	3010      	adds	r0, #16
 80075fa:	f000 fb81 	bl	8007d00 <core_set_error>
 80075fe:	4638      	mov	r0, r7
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007602:	2211      	movs	r2, #17
 8007604:	2110      	movs	r1, #16
 8007606:	3010      	adds	r0, #16
 8007608:	f000 fb7a 	bl	8007d00 <core_set_error>
 800760c:	4620      	mov	r0, r4
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007610:	a1c00100 	.word	0xa1c00100
 8007614:	e0002000 	.word	0xe0002000
 8007618:	e0042000 	.word	0xe0042000
 800761c:	5c001000 	.word	0x5c001000
 8007620:	40023008 	.word	0x40023008
 8007624:	40023000 	.word	0x40023000
 8007628:	f407a5c2 	.word	0xf407a5c2
 800762c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007630:	58024c08 	.word	0x58024c08
 8007634:	58024c00 	.word	0x58024c00

08007638 <ai_platform_network_post_init>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	b118      	cbz	r0, 8007644 <ai_platform_network_post_init+0xc>
 800763c:	4b4a      	ldr	r3, [pc, #296]	; (8007768 <ai_platform_network_post_init+0x130>)
 800763e:	6802      	ldr	r2, [r0, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d029      	beq.n	8007698 <ai_platform_network_post_init+0x60>
 8007644:	4a49      	ldr	r2, [pc, #292]	; (800776c <ai_platform_network_post_init+0x134>)
 8007646:	494a      	ldr	r1, [pc, #296]	; (8007770 <ai_platform_network_post_init+0x138>)
 8007648:	6813      	ldr	r3, [r2, #0]
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	680b      	ldr	r3, [r1, #0]
 8007652:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800765a:	185a      	adds	r2, r3, r1
 800765c:	2a01      	cmp	r2, #1
 800765e:	d90c      	bls.n	800767a <ai_platform_network_post_init+0x42>
 8007660:	f240 4249 	movw	r2, #1097	; 0x449
 8007664:	4293      	cmp	r3, r2
 8007666:	d008      	beq.n	800767a <ai_platform_network_post_init+0x42>
 8007668:	4b42      	ldr	r3, [pc, #264]	; (8007774 <ai_platform_network_post_init+0x13c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007670:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007674:	d044      	beq.n	8007700 <ai_platform_network_post_init+0xc8>
 8007676:	2000      	movs	r0, #0
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	4b3f      	ldr	r3, [pc, #252]	; (8007778 <ai_platform_network_post_init+0x140>)
 800767c:	2201      	movs	r2, #1
 800767e:	4619      	mov	r1, r3
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	680b      	ldr	r3, [r1, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1fc      	bne.n	8007682 <ai_platform_network_post_init+0x4a>
 8007688:	4b3c      	ldr	r3, [pc, #240]	; (800777c <ai_platform_network_post_init+0x144>)
 800768a:	493d      	ldr	r1, [pc, #244]	; (8007780 <ai_platform_network_post_init+0x148>)
 800768c:	4a3d      	ldr	r2, [pc, #244]	; (8007784 <ai_platform_network_post_init+0x14c>)
 800768e:	6019      	str	r1, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4293      	cmp	r3, r2
 8007694:	d0ef      	beq.n	8007676 <ai_platform_network_post_init+0x3e>
 8007696:	e7fe      	b.n	8007696 <ai_platform_network_post_init+0x5e>
 8007698:	4a34      	ldr	r2, [pc, #208]	; (800776c <ai_platform_network_post_init+0x134>)
 800769a:	4935      	ldr	r1, [pc, #212]	; (8007770 <ai_platform_network_post_init+0x138>)
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80076a8:	680b      	ldr	r3, [r1, #0]
 80076aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ae:	189a      	adds	r2, r3, r2
 80076b0:	2a01      	cmp	r2, #1
 80076b2:	d94a      	bls.n	800774a <ai_platform_network_post_init+0x112>
 80076b4:	f240 4249 	movw	r2, #1097	; 0x449
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d046      	beq.n	800774a <ai_platform_network_post_init+0x112>
 80076bc:	4b2d      	ldr	r3, [pc, #180]	; (8007774 <ai_platform_network_post_init+0x13c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076c4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80076c8:	d030      	beq.n	800772c <ai_platform_network_post_init+0xf4>
 80076ca:	68c3      	ldr	r3, [r0, #12]
 80076cc:	4604      	mov	r4, r0
 80076ce:	f013 0502 	ands.w	r5, r3, #2
 80076d2:	d024      	beq.n	800771e <ai_platform_network_post_init+0xe6>
 80076d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80076d6:	b18b      	cbz	r3, 80076fc <ai_platform_network_post_init+0xc4>
 80076d8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80076da:	b90d      	cbnz	r5, 80076e0 <ai_platform_network_post_init+0xa8>
 80076dc:	e00e      	b.n	80076fc <ai_platform_network_post_init+0xc4>
 80076de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80076e2:	4629      	mov	r1, r5
 80076e4:	2000      	movs	r0, #0
 80076e6:	4798      	blx	r3
 80076e8:	68ea      	ldr	r2, [r5, #12]
 80076ea:	1b53      	subs	r3, r2, r5
 80076ec:	4615      	mov	r5, r2
 80076ee:	bf18      	it	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	bf08      	it	eq
 80076f6:	2300      	moveq	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f0      	bne.n	80076de <ai_platform_network_post_init+0xa6>
 80076fc:	2001      	movs	r0, #1
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	4b21      	ldr	r3, [pc, #132]	; (8007788 <ai_platform_network_post_init+0x150>)
 8007702:	2201      	movs	r2, #1
 8007704:	4619      	mov	r1, r3
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1fc      	bne.n	8007708 <ai_platform_network_post_init+0xd0>
 800770e:	4b1f      	ldr	r3, [pc, #124]	; (800778c <ai_platform_network_post_init+0x154>)
 8007710:	491b      	ldr	r1, [pc, #108]	; (8007780 <ai_platform_network_post_init+0x148>)
 8007712:	4a1c      	ldr	r2, [pc, #112]	; (8007784 <ai_platform_network_post_init+0x14c>)
 8007714:	6019      	str	r1, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4293      	cmp	r3, r2
 800771a:	d0ac      	beq.n	8007676 <ai_platform_network_post_init+0x3e>
 800771c:	e7fe      	b.n	800771c <ai_platform_network_post_init+0xe4>
 800771e:	2210      	movs	r2, #16
 8007720:	2111      	movs	r1, #17
 8007722:	3010      	adds	r0, #16
 8007724:	f000 faec 	bl	8007d00 <core_set_error>
 8007728:	4628      	mov	r0, r5
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	4b16      	ldr	r3, [pc, #88]	; (8007788 <ai_platform_network_post_init+0x150>)
 800772e:	2201      	movs	r2, #1
 8007730:	4619      	mov	r1, r3
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	680b      	ldr	r3, [r1, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1fc      	bne.n	8007734 <ai_platform_network_post_init+0xfc>
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <ai_platform_network_post_init+0x154>)
 800773c:	4910      	ldr	r1, [pc, #64]	; (8007780 <ai_platform_network_post_init+0x148>)
 800773e:	4a11      	ldr	r2, [pc, #68]	; (8007784 <ai_platform_network_post_init+0x14c>)
 8007740:	6019      	str	r1, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4293      	cmp	r3, r2
 8007746:	d0c0      	beq.n	80076ca <ai_platform_network_post_init+0x92>
 8007748:	e7fe      	b.n	8007748 <ai_platform_network_post_init+0x110>
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <ai_platform_network_post_init+0x140>)
 800774c:	2201      	movs	r2, #1
 800774e:	4619      	mov	r1, r3
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	680b      	ldr	r3, [r1, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1fc      	bne.n	8007752 <ai_platform_network_post_init+0x11a>
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <ai_platform_network_post_init+0x144>)
 800775a:	4909      	ldr	r1, [pc, #36]	; (8007780 <ai_platform_network_post_init+0x148>)
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <ai_platform_network_post_init+0x14c>)
 800775e:	6019      	str	r1, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4293      	cmp	r3, r2
 8007764:	d0b1      	beq.n	80076ca <ai_platform_network_post_init+0x92>
 8007766:	e7fe      	b.n	8007766 <ai_platform_network_post_init+0x12e>
 8007768:	a1c00100 	.word	0xa1c00100
 800776c:	e0002000 	.word	0xe0002000
 8007770:	e0042000 	.word	0xe0042000
 8007774:	5c001000 	.word	0x5c001000
 8007778:	40023008 	.word	0x40023008
 800777c:	40023000 	.word	0x40023000
 8007780:	f407a5c2 	.word	0xf407a5c2
 8007784:	b5e8b5cd 	.word	0xb5e8b5cd
 8007788:	58024c08 	.word	0x58024c08
 800778c:	58024c00 	.word	0x58024c00

08007790 <ai_platform_network_process>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	4692      	mov	sl, r2
 8007796:	b083      	sub	sp, #12
 8007798:	4604      	mov	r4, r0
 800779a:	b120      	cbz	r0, 80077a6 <ai_platform_network_process+0x16>
 800779c:	4b86      	ldr	r3, [pc, #536]	; (80079b8 <ai_platform_network_process+0x228>)
 800779e:	6802      	ldr	r2, [r0, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	bf18      	it	ne
 80077a4:	2400      	movne	r4, #0
 80077a6:	4a85      	ldr	r2, [pc, #532]	; (80079bc <ai_platform_network_process+0x22c>)
 80077a8:	4885      	ldr	r0, [pc, #532]	; (80079c0 <ai_platform_network_process+0x230>)
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	6803      	ldr	r3, [r0, #0]
 80077b4:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 80077b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077bc:	181a      	adds	r2, r3, r0
 80077be:	2a01      	cmp	r2, #1
 80077c0:	f240 80c6 	bls.w	8007950 <ai_platform_network_process+0x1c0>
 80077c4:	f240 4249 	movw	r2, #1097	; 0x449
 80077c8:	4293      	cmp	r3, r2
 80077ca:	f000 80c1 	beq.w	8007950 <ai_platform_network_process+0x1c0>
 80077ce:	4b7d      	ldr	r3, [pc, #500]	; (80079c4 <ai_platform_network_process+0x234>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80077da:	f000 80a9 	beq.w	8007930 <ai_platform_network_process+0x1a0>
 80077de:	2c00      	cmp	r4, #0
 80077e0:	f000 80db 	beq.w	800799a <ai_platform_network_process+0x20a>
 80077e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80077e8:	68e0      	ldr	r0, [r4, #12]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f000 0003 	and.w	r0, r0, #3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80bd 	beq.w	8007970 <ai_platform_network_process+0x1e0>
 80077f6:	2600      	movs	r6, #0
 80077f8:	2803      	cmp	r0, #3
 80077fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80077fc:	6166      	str	r6, [r4, #20]
 80077fe:	f040 80c6 	bne.w	800798e <ai_platform_network_process+0x1fe>
 8007802:	2900      	cmp	r1, #0
 8007804:	f000 80b7 	beq.w	8007976 <ai_platform_network_process+0x1e6>
 8007808:	fab5 f085 	clz	r0, r5
 800780c:	0940      	lsrs	r0, r0, #5
 800780e:	2800      	cmp	r0, #0
 8007810:	f040 80b1 	bne.w	8007976 <ai_platform_network_process+0x1e6>
 8007814:	882e      	ldrh	r6, [r5, #0]
 8007816:	2e00      	cmp	r6, #0
 8007818:	f000 80ad 	beq.w	8007976 <ai_platform_network_process+0x1e6>
 800781c:	888f      	ldrh	r7, [r1, #4]
 800781e:	686e      	ldr	r6, [r5, #4]
 8007820:	9701      	str	r7, [sp, #4]
 8007822:	2e00      	cmp	r6, #0
 8007824:	f000 825f 	beq.w	8007ce6 <ai_platform_network_process+0x556>
 8007828:	6836      	ldr	r6, [r6, #0]
 800782a:	2e00      	cmp	r6, #0
 800782c:	f000 825b 	beq.w	8007ce6 <ai_platform_network_process+0x556>
 8007830:	68ab      	ldr	r3, [r5, #8]
 8007832:	f8d3 9000 	ldr.w	r9, [r3]
 8007836:	f1b9 0f00 	cmp.w	r9, #0
 800783a:	f000 809c 	beq.w	8007976 <ai_platform_network_process+0x1e6>
 800783e:	460f      	mov	r7, r1
 8007840:	4680      	mov	r8, r0
 8007842:	e05e      	b.n	8007902 <ai_platform_network_process+0x172>
 8007844:	68f3      	ldr	r3, [r6, #12]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	455a      	cmp	r2, fp
 800784a:	d168      	bne.n	800791e <ai_platform_network_process+0x18e>
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	4572      	cmp	r2, lr
 8007850:	d165      	bne.n	800791e <ai_platform_network_process+0x18e>
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	459c      	cmp	ip, r3
 8007856:	d162      	bne.n	800791e <ai_platform_network_process+0x18e>
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f002 faa5 	bl	8009da8 <ai_array_get_byte_size>
 800785e:	68f2      	ldr	r2, [r6, #12]
 8007860:	6973      	ldr	r3, [r6, #20]
 8007862:	68d2      	ldr	r2, [r2, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	fb03 f302 	mul.w	r3, r3, r2
 800786a:	4298      	cmp	r0, r3
 800786c:	d357      	bcc.n	800791e <ai_platform_network_process+0x18e>
 800786e:	69b3      	ldr	r3, [r6, #24]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f002 fa4d 	bl	8009d10 <ai_array_to_buffer_fmt>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	4043      	eors	r3, r0
 800787a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800787e:	f040 8229 	bne.w	8007cd4 <ai_platform_network_process+0x544>
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 821d 	beq.w	8007cc4 <ai_platform_network_process+0x534>
 800788a:	88bb      	ldrh	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 808a 	beq.w	80079a6 <ai_platform_network_process+0x216>
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	68f1      	ldr	r1, [r6, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	68c9      	ldr	r1, [r1, #12]
 800789a:	bf38      	it	cc
 800789c:	461a      	movcc	r2, r3
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	6972      	ldr	r2, [r6, #20]
 80078a2:	68d3      	ldr	r3, [r2, #12]
 80078a4:	fb03 f301 	mul.w	r3, r3, r1
 80078a8:	f8c9 3008 	str.w	r3, [r9, #8]
 80078ac:	88ba      	ldrh	r2, [r7, #4]
 80078ae:	fb03 f302 	mul.w	r3, r3, r2
 80078b2:	f8c9 300c 	str.w	r3, [r9, #12]
 80078b6:	6939      	ldr	r1, [r7, #16]
 80078b8:	f8c9 1004 	str.w	r1, [r9, #4]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4413      	add	r3, r2
 80078c0:	f8c9 3000 	str.w	r3, [r9]
 80078c4:	69b0      	ldr	r0, [r6, #24]
 80078c6:	6803      	ldr	r3, [r0, #0]
 80078c8:	009a      	lsls	r2, r3, #2
 80078ca:	d408      	bmi.n	80078de <ai_platform_network_process+0x14e>
 80078cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	4419      	add	r1, r3
 80078d4:	6081      	str	r1, [r0, #8]
 80078d6:	69b3      	ldr	r3, [r6, #24]
 80078d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	882b      	ldrh	r3, [r5, #0]
 80078e4:	4598      	cmp	r8, r3
 80078e6:	d27b      	bcs.n	80079e0 <ai_platform_network_process+0x250>
 80078e8:	686b      	ldr	r3, [r5, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d078      	beq.n	80079e0 <ai_platform_network_process+0x250>
 80078ee:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d074      	beq.n	80079e0 <ai_platform_network_process+0x250>
 80078f6:	68ab      	ldr	r3, [r5, #8]
 80078f8:	3718      	adds	r7, #24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8007900:	d039      	beq.n	8007976 <ai_platform_network_process+0x1e6>
 8007902:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8007906:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800790a:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800790e:	fb0b f30e 	mul.w	r3, fp, lr
 8007912:	69b0      	ldr	r0, [r6, #24]
 8007914:	fb0c f303 	mul.w	r3, ip, r3
 8007918:	6841      	ldr	r1, [r0, #4]
 800791a:	4299      	cmp	r1, r3
 800791c:	d292      	bcs.n	8007844 <ai_platform_network_process+0xb4>
 800791e:	f104 0010 	add.w	r0, r4, #16
 8007922:	2218      	movs	r2, #24
 8007924:	2112      	movs	r1, #18
 8007926:	f04f 0b00 	mov.w	fp, #0
 800792a:	f000 f9e9 	bl	8007d00 <core_set_error>
 800792e:	e02a      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <ai_platform_network_process+0x238>)
 8007932:	2201      	movs	r2, #1
 8007934:	4618      	mov	r0, r3
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	6803      	ldr	r3, [r0, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1fc      	bne.n	8007938 <ai_platform_network_process+0x1a8>
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <ai_platform_network_process+0x23c>)
 8007940:	4823      	ldr	r0, [pc, #140]	; (80079d0 <ai_platform_network_process+0x240>)
 8007942:	4a24      	ldr	r2, [pc, #144]	; (80079d4 <ai_platform_network_process+0x244>)
 8007944:	6018      	str	r0, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4293      	cmp	r3, r2
 800794a:	f43f af48 	beq.w	80077de <ai_platform_network_process+0x4e>
 800794e:	e7fe      	b.n	800794e <ai_platform_network_process+0x1be>
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <ai_platform_network_process+0x248>)
 8007952:	2201      	movs	r2, #1
 8007954:	4618      	mov	r0, r3
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	6803      	ldr	r3, [r0, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1fc      	bne.n	8007958 <ai_platform_network_process+0x1c8>
 800795e:	4b1f      	ldr	r3, [pc, #124]	; (80079dc <ai_platform_network_process+0x24c>)
 8007960:	481b      	ldr	r0, [pc, #108]	; (80079d0 <ai_platform_network_process+0x240>)
 8007962:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <ai_platform_network_process+0x244>)
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4293      	cmp	r3, r2
 800796a:	f43f af38 	beq.w	80077de <ai_platform_network_process+0x4e>
 800796e:	e7fe      	b.n	800796e <ai_platform_network_process+0x1de>
 8007970:	2803      	cmp	r0, #3
 8007972:	6163      	str	r3, [r4, #20]
 8007974:	d10b      	bne.n	800798e <ai_platform_network_process+0x1fe>
 8007976:	f04f 0b00 	mov.w	fp, #0
 800797a:	f104 0010 	add.w	r0, r4, #16
 800797e:	2217      	movs	r2, #23
 8007980:	2112      	movs	r1, #18
 8007982:	f000 f9bd 	bl	8007d00 <core_set_error>
 8007986:	4658      	mov	r0, fp
 8007988:	b003      	add	sp, #12
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798e:	f104 0010 	add.w	r0, r4, #16
 8007992:	2230      	movs	r2, #48	; 0x30
 8007994:	2111      	movs	r1, #17
 8007996:	f000 f9b3 	bl	8007d00 <core_set_error>
 800799a:	f04f 0b00 	mov.w	fp, #0
 800799e:	4658      	mov	r0, fp
 80079a0:	b003      	add	sp, #12
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	f104 0010 	add.w	r0, r4, #16
 80079aa:	2221      	movs	r2, #33	; 0x21
 80079ac:	2112      	movs	r1, #18
 80079ae:	469b      	mov	fp, r3
 80079b0:	f000 f9a6 	bl	8007d00 <core_set_error>
 80079b4:	e7e7      	b.n	8007986 <ai_platform_network_process+0x1f6>
 80079b6:	bf00      	nop
 80079b8:	a1c00100 	.word	0xa1c00100
 80079bc:	e0002000 	.word	0xe0002000
 80079c0:	e0042000 	.word	0xe0042000
 80079c4:	5c001000 	.word	0x5c001000
 80079c8:	58024c08 	.word	0x58024c08
 80079cc:	58024c00 	.word	0x58024c00
 80079d0:	f407a5c2 	.word	0xf407a5c2
 80079d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80079d8:	40023008 	.word	0x40023008
 80079dc:	40023000 	.word	0x40023000
 80079e0:	f1ba 0f00 	cmp.w	sl, #0
 80079e4:	f000 808c 	beq.w	8007b00 <ai_platform_network_process+0x370>
 80079e8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f240 813b 	bls.w	8007c68 <ai_platform_network_process+0x4d8>
 80079f2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80079f4:	f115 0f0c 	cmn.w	r5, #12
 80079f8:	f000 8136 	beq.w	8007c68 <ai_platform_network_process+0x4d8>
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8132 	beq.w	8007c68 <ai_platform_network_process+0x4d8>
 8007a04:	4656      	mov	r6, sl
 8007a06:	f04f 0900 	mov.w	r9, #0
 8007a0a:	9400      	str	r4, [sp, #0]
 8007a0c:	4599      	cmp	r9, r3
 8007a0e:	d274      	bcs.n	8007afa <ai_platform_network_process+0x36a>
 8007a10:	692b      	ldr	r3, [r5, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d071      	beq.n	8007afa <ai_platform_network_process+0x36a>
 8007a16:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	d06d      	beq.n	8007afa <ai_platform_network_process+0x36a>
 8007a1e:	696b      	ldr	r3, [r5, #20]
 8007a20:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8007a24:	f8d3 8000 	ldr.w	r8, [r3]
 8007a28:	eb18 0a04 	adds.w	sl, r8, r4
 8007a2c:	f000 8125 	beq.w	8007c7a <ai_platform_network_process+0x4ea>
 8007a30:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 8007a34:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8007a38:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8007a3c:	fb0b f30e 	mul.w	r3, fp, lr
 8007a40:	69b8      	ldr	r0, [r7, #24]
 8007a42:	fb0c f303 	mul.w	r3, ip, r3
 8007a46:	6841      	ldr	r1, [r0, #4]
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	f0c0 810c 	bcc.w	8007c66 <ai_platform_network_process+0x4d6>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	455a      	cmp	r2, fp
 8007a54:	f040 8107 	bne.w	8007c66 <ai_platform_network_process+0x4d6>
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	4572      	cmp	r2, lr
 8007a5c:	f040 8103 	bne.w	8007c66 <ai_platform_network_process+0x4d6>
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	459c      	cmp	ip, r3
 8007a64:	f040 80ff 	bne.w	8007c66 <ai_platform_network_process+0x4d6>
 8007a68:	6800      	ldr	r0, [r0, #0]
 8007a6a:	f002 f99d 	bl	8009da8 <ai_array_get_byte_size>
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	68d2      	ldr	r2, [r2, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	fb03 f302 	mul.w	r3, r3, r2
 8007a7a:	4298      	cmp	r0, r3
 8007a7c:	f0c0 80f3 	bcc.w	8007c66 <ai_platform_network_process+0x4d6>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	6818      	ldr	r0, [r3, #0]
 8007a84:	f002 f944 	bl	8009d10 <ai_array_to_buffer_fmt>
 8007a88:	6833      	ldr	r3, [r6, #0]
 8007a8a:	4043      	eors	r3, r0
 8007a8c:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007a90:	f040 810e 	bne.w	8007cb0 <ai_platform_network_process+0x520>
 8007a94:	6933      	ldr	r3, [r6, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8101 	beq.w	8007c9e <ai_platform_network_process+0x50e>
 8007a9c:	88b3      	ldrh	r3, [r6, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80f4 	beq.w	8007c8c <ai_platform_network_process+0x4fc>
 8007aa4:	9a01      	ldr	r2, [sp, #4]
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	68c9      	ldr	r1, [r1, #12]
 8007aac:	bf38      	it	cc
 8007aae:	461a      	movcc	r2, r3
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	68d3      	ldr	r3, [r2, #12]
 8007ab6:	fb03 f301 	mul.w	r3, r3, r1
 8007aba:	f8ca 3008 	str.w	r3, [sl, #8]
 8007abe:	88b2      	ldrh	r2, [r6, #4]
 8007ac0:	fb03 f302 	mul.w	r3, r3, r2
 8007ac4:	f8ca 300c 	str.w	r3, [sl, #12]
 8007ac8:	6931      	ldr	r1, [r6, #16]
 8007aca:	f8ca 1004 	str.w	r1, [sl, #4]
 8007ace:	6932      	ldr	r2, [r6, #16]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f848 3004 	str.w	r3, [r8, r4]
 8007ad6:	69b8      	ldr	r0, [r7, #24]
 8007ad8:	6803      	ldr	r3, [r0, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	d408      	bmi.n	8007af0 <ai_platform_network_process+0x360>
 8007ade:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	4419      	add	r1, r3
 8007ae6:	6081      	str	r1, [r0, #8]
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	f109 0901 	add.w	r9, r9, #1
 8007af4:	3618      	adds	r6, #24
 8007af6:	89ab      	ldrh	r3, [r5, #12]
 8007af8:	e788      	b.n	8007a0c <ai_platform_network_process+0x27c>
 8007afa:	e9dd 4300 	ldrd	r4, r3, [sp]
 8007afe:	82a3      	strh	r3, [r4, #20]
 8007b00:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	f000 80a9 	beq.w	8007c5c <ai_platform_network_process+0x4cc>
 8007b0a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007b0c:	2a01      	cmp	r2, #1
 8007b0e:	f240 80a8 	bls.w	8007c62 <ai_platform_network_process+0x4d2>
 8007b12:	f105 060c 	add.w	r6, r5, #12
 8007b16:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8007b1a:	8aa3      	ldrh	r3, [r4, #20]
 8007b1c:	455b      	cmp	r3, fp
 8007b1e:	f67f af32 	bls.w	8007986 <ai_platform_network_process+0x1f6>
 8007b22:	9400      	str	r4, [sp, #0]
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	d037      	beq.n	8007b98 <ai_platform_network_process+0x408>
 8007b28:	882b      	ldrh	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d034      	beq.n	8007b98 <ai_platform_network_process+0x408>
 8007b2e:	686b      	ldr	r3, [r5, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d031      	beq.n	8007b98 <ai_platform_network_process+0x408>
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02e      	beq.n	8007b98 <ai_platform_network_process+0x408>
 8007b3a:	f04f 0800 	mov.w	r8, #0
 8007b3e:	e01a      	b.n	8007b76 <ai_platform_network_process+0x3e6>
 8007b40:	68d4      	ldr	r4, [r2, #12]
 8007b42:	1b00      	subs	r0, r0, r4
 8007b44:	4401      	add	r1, r0
 8007b46:	6091      	str	r1, [r2, #8]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	60da      	str	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f108 0801 	add.w	r8, r8, #1
 8007b54:	68b9      	ldr	r1, [r7, #8]
 8007b56:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007b5a:	440b      	add	r3, r1
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d301      	bcc.n	8007b64 <ai_platform_network_process+0x3d4>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	607b      	str	r3, [r7, #4]
 8007b66:	882b      	ldrh	r3, [r5, #0]
 8007b68:	4598      	cmp	r8, r3
 8007b6a:	d215      	bcs.n	8007b98 <ai_platform_network_process+0x408>
 8007b6c:	686b      	ldr	r3, [r5, #4]
 8007b6e:	b19b      	cbz	r3, 8007b98 <ai_platform_network_process+0x408>
 8007b70:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007b74:	b183      	cbz	r3, 8007b98 <ai_platform_network_process+0x408>
 8007b76:	68a9      	ldr	r1, [r5, #8]
 8007b78:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	f8d1 a000 	ldr.w	sl, [r1]
 8007b82:	6814      	ldr	r4, [r2, #0]
 8007b84:	eb0a 0709 	add.w	r7, sl, r9
 8007b88:	6890      	ldr	r0, [r2, #8]
 8007b8a:	00a4      	lsls	r4, r4, #2
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	d5d7      	bpl.n	8007b40 <ai_platform_network_process+0x3b0>
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	f002 f95b 	bl	8009e4c <memcpy>
 8007b96:	e7da      	b.n	8007b4e <ai_platform_network_process+0x3be>
 8007b98:	9800      	ldr	r0, [sp, #0]
 8007b9a:	f002 f87f 	bl	8009c9c <ai_layers_forward_all>
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d04a      	beq.n	8007c38 <ai_platform_network_process+0x4a8>
 8007ba2:	8833      	ldrh	r3, [r6, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d047      	beq.n	8007c38 <ai_platform_network_process+0x4a8>
 8007ba8:	6873      	ldr	r3, [r6, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d044      	beq.n	8007c38 <ai_platform_network_process+0x4a8>
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d041      	beq.n	8007c38 <ai_platform_network_process+0x4a8>
 8007bb4:	f04f 0800 	mov.w	r8, #0
 8007bb8:	e019      	b.n	8007bee <ai_platform_network_process+0x45e>
 8007bba:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007bbe:	4291      	cmp	r1, r2
 8007bc0:	d301      	bcc.n	8007bc6 <ai_platform_network_process+0x436>
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	1a51      	subs	r1, r2, r1
 8007bc6:	6079      	str	r1, [r7, #4]
 8007bc8:	f108 0801 	add.w	r8, r8, #1
 8007bcc:	6998      	ldr	r0, [r3, #24]
 8007bce:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8007bd2:	1b12      	subs	r2, r2, r4
 8007bd4:	440a      	add	r2, r1
 8007bd6:	6082      	str	r2, [r0, #8]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	60da      	str	r2, [r3, #12]
 8007bde:	8833      	ldrh	r3, [r6, #0]
 8007be0:	4598      	cmp	r8, r3
 8007be2:	d229      	bcs.n	8007c38 <ai_platform_network_process+0x4a8>
 8007be4:	6873      	ldr	r3, [r6, #4]
 8007be6:	b33b      	cbz	r3, 8007c38 <ai_platform_network_process+0x4a8>
 8007be8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007bec:	b323      	cbz	r3, 8007c38 <ai_platform_network_process+0x4a8>
 8007bee:	68b2      	ldr	r2, [r6, #8]
 8007bf0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007bf4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8007bf8:	f8d2 a000 	ldr.w	sl, [r2]
 8007bfc:	f8de 1000 	ldr.w	r1, [lr]
 8007c00:	eb0a 0709 	add.w	r7, sl, r9
 8007c04:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8007c08:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8007c0c:	eb00 0102 	add.w	r1, r0, r2
 8007c10:	d0d3      	beq.n	8007bba <ai_platform_network_process+0x42a>
 8007c12:	f8de 1008 	ldr.w	r1, [lr, #8]
 8007c16:	f002 f919 	bl	8009e4c <memcpy>
 8007c1a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007c1e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8007c22:	440b      	add	r3, r1
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d301      	bcc.n	8007c2c <ai_platform_network_process+0x49c>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	8833      	ldrh	r3, [r6, #0]
 8007c34:	4598      	cmp	r8, r3
 8007c36:	d3d5      	bcc.n	8007be4 <ai_platform_network_process+0x454>
 8007c38:	9b00      	ldr	r3, [sp, #0]
 8007c3a:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	8a9b      	ldrh	r3, [r3, #20]
 8007c42:	f10b 0b01 	add.w	fp, fp, #1
 8007c46:	fa1f fb8b 	uxth.w	fp, fp
 8007c4a:	455b      	cmp	r3, fp
 8007c4c:	f8a2 b016 	strh.w	fp, [r2, #22]
 8007c50:	f63f af68 	bhi.w	8007b24 <ai_platform_network_process+0x394>
 8007c54:	4658      	mov	r0, fp
 8007c56:	b003      	add	sp, #12
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4615      	mov	r5, r2
 8007c5e:	4616      	mov	r6, r2
 8007c60:	e759      	b.n	8007b16 <ai_platform_network_process+0x386>
 8007c62:	2600      	movs	r6, #0
 8007c64:	e757      	b.n	8007b16 <ai_platform_network_process+0x386>
 8007c66:	9c00      	ldr	r4, [sp, #0]
 8007c68:	f104 0010 	add.w	r0, r4, #16
 8007c6c:	2218      	movs	r2, #24
 8007c6e:	2113      	movs	r1, #19
 8007c70:	f04f 0b00 	mov.w	fp, #0
 8007c74:	f000 f844 	bl	8007d00 <core_set_error>
 8007c78:	e685      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007c7a:	9c00      	ldr	r4, [sp, #0]
 8007c7c:	2217      	movs	r2, #23
 8007c7e:	2113      	movs	r1, #19
 8007c80:	46d3      	mov	fp, sl
 8007c82:	f104 0010 	add.w	r0, r4, #16
 8007c86:	f000 f83b 	bl	8007d00 <core_set_error>
 8007c8a:	e67c      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007c8c:	9c00      	ldr	r4, [sp, #0]
 8007c8e:	2221      	movs	r2, #33	; 0x21
 8007c90:	2113      	movs	r1, #19
 8007c92:	469b      	mov	fp, r3
 8007c94:	f104 0010 	add.w	r0, r4, #16
 8007c98:	f000 f832 	bl	8007d00 <core_set_error>
 8007c9c:	e673      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007c9e:	9c00      	ldr	r4, [sp, #0]
 8007ca0:	2217      	movs	r2, #23
 8007ca2:	2113      	movs	r1, #19
 8007ca4:	469b      	mov	fp, r3
 8007ca6:	f104 0010 	add.w	r0, r4, #16
 8007caa:	f000 f829 	bl	8007d00 <core_set_error>
 8007cae:	e66a      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007cb0:	9c00      	ldr	r4, [sp, #0]
 8007cb2:	2219      	movs	r2, #25
 8007cb4:	2113      	movs	r1, #19
 8007cb6:	f04f 0b00 	mov.w	fp, #0
 8007cba:	f104 0010 	add.w	r0, r4, #16
 8007cbe:	f000 f81f 	bl	8007d00 <core_set_error>
 8007cc2:	e660      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007cc4:	f104 0010 	add.w	r0, r4, #16
 8007cc8:	2217      	movs	r2, #23
 8007cca:	2112      	movs	r1, #18
 8007ccc:	469b      	mov	fp, r3
 8007cce:	f000 f817 	bl	8007d00 <core_set_error>
 8007cd2:	e658      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007cd4:	f104 0010 	add.w	r0, r4, #16
 8007cd8:	2219      	movs	r2, #25
 8007cda:	2112      	movs	r1, #18
 8007cdc:	f04f 0b00 	mov.w	fp, #0
 8007ce0:	f000 f80e 	bl	8007d00 <core_set_error>
 8007ce4:	e64f      	b.n	8007986 <ai_platform_network_process+0x1f6>
 8007ce6:	f1ba 0f00 	cmp.w	sl, #0
 8007cea:	f47f ae7f 	bne.w	80079ec <ai_platform_network_process+0x25c>
 8007cee:	e70d      	b.n	8007b0c <ai_platform_network_process+0x37c>

08007cf0 <core_init>:
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	4770      	bx	lr

08007cf4 <core_get_error>:
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	6800      	ldr	r0, [r0, #0]
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop

08007d00 <core_set_error>:
 8007d00:	4603      	mov	r3, r0
 8007d02:	7800      	ldrb	r0, [r0, #0]
 8007d04:	b930      	cbnz	r0, 8007d14 <core_set_error+0x14>
 8007d06:	7019      	strb	r1, [r3, #0]
 8007d08:	2001      	movs	r0, #1
 8007d0a:	6819      	ldr	r1, [r3, #0]
 8007d0c:	f362 211f 	bfi	r1, r2, #8, #24
 8007d10:	6019      	str	r1, [r3, #0]
 8007d12:	4770      	bx	lr
 8007d14:	2000      	movs	r0, #0
 8007d16:	4770      	bx	lr

08007d18 <func_dummy>:
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <ai_dict8_dot_array_f32>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	9d06      	ldr	r5, [sp, #24]
 8007d22:	4c88      	ldr	r4, [pc, #544]	; (8007f44 <ai_dict8_dot_array_f32+0x228>)
 8007d24:	2d07      	cmp	r5, #7
 8007d26:	442c      	add	r4, r5
 8007d28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d2c:	f104 0620 	add.w	r6, r4, #32
 8007d30:	d817      	bhi.n	8007d62 <ai_dict8_dot_array_f32+0x46>
 8007d32:	42b3      	cmp	r3, r6
 8007d34:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8007f48 <ai_dict8_dot_array_f32+0x22c>
 8007d38:	d20b      	bcs.n	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	ecf3 7a01 	vldmia	r3!, {s15}
 8007d42:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007d46:	42b3      	cmp	r3, r6
 8007d48:	edd4 6a00 	vldr	s13, [r4]
 8007d4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d50:	d3f3      	bcc.n	8007d3a <ai_dict8_dot_array_f32+0x1e>
 8007d52:	edd0 7a00 	vldr	s15, [r0]
 8007d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d5a:	ed80 7a00 	vstr	s14, [r0]
 8007d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d62:	f001 0503 	and.w	r5, r1, #3
 8007d66:	2d02      	cmp	r5, #2
 8007d68:	f000 80f0 	beq.w	8007f4c <ai_dict8_dot_array_f32+0x230>
 8007d6c:	2d03      	cmp	r5, #3
 8007d6e:	f000 81ff 	beq.w	8008170 <ai_dict8_dot_array_f32+0x454>
 8007d72:	2d01      	cmp	r5, #1
 8007d74:	f000 81f0 	beq.w	8008158 <ai_dict8_dot_array_f32+0x43c>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	f200 81fc 	bhi.w	8008176 <ai_dict8_dot_array_f32+0x45a>
 8007d7e:	1ae4      	subs	r4, r4, r3
 8007d80:	f101 0810 	add.w	r8, r1, #16
 8007d84:	f101 0508 	add.w	r5, r1, #8
 8007d88:	f103 0720 	add.w	r7, r3, #32
 8007d8c:	0964      	lsrs	r4, r4, #5
 8007d8e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8007f48 <ai_dict8_dot_array_f32+0x22c>
 8007d92:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8007d96:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8007d9a:	3508      	adds	r5, #8
 8007d9c:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8007da0:	3720      	adds	r7, #32
 8007da2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007da6:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8007daa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007dae:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8007db2:	edde 7a00 	vldr	s15, [lr]
 8007db6:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8007dba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007dbe:	eddc 5a00 	vldr	s11, [ip]
 8007dc2:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8007dc6:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8007dca:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007dce:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007dd2:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8007dd6:	ed9c 4a00 	vldr	s8, [ip]
 8007dda:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8007dde:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007de2:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8007de6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007dea:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8007dee:	eee4 7a26 	vfma.f32	s15, s8, s13
 8007df2:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8007df6:	ed9c 4a00 	vldr	s8, [ip]
 8007dfa:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8007dfe:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8007e02:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007e06:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007e0a:	ed9e 5a00 	vldr	s10, [lr]
 8007e0e:	ed9c 4a00 	vldr	s8, [ip]
 8007e12:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8007e16:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8007e1a:	4545      	cmp	r5, r8
 8007e1c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8007e20:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007e24:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007e28:	ed9e 5a00 	vldr	s10, [lr]
 8007e2c:	ed9c 6a00 	vldr	s12, [ip]
 8007e30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e38:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e40:	d1a9      	bne.n	8007d96 <ai_dict8_dot_array_f32+0x7a>
 8007e42:	3401      	adds	r4, #1
 8007e44:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007e48:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8007e4c:	42b3      	cmp	r3, r6
 8007e4e:	d280      	bcs.n	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007e50:	461c      	mov	r4, r3
 8007e52:	780d      	ldrb	r5, [r1, #0]
 8007e54:	ecf4 6a01 	vldmia	r4!, {s13}
 8007e58:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e5c:	42a6      	cmp	r6, r4
 8007e5e:	edd5 7a00 	vldr	s15, [r5]
 8007e62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e66:	f67f af74 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007e6a:	784d      	ldrb	r5, [r1, #1]
 8007e6c:	f103 0408 	add.w	r4, r3, #8
 8007e70:	edd3 6a01 	vldr	s13, [r3, #4]
 8007e74:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	edd5 7a00 	vldr	s15, [r5]
 8007e7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e82:	f67f af66 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007e86:	788d      	ldrb	r5, [r1, #2]
 8007e88:	f103 040c 	add.w	r4, r3, #12
 8007e8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007e90:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007e94:	42a6      	cmp	r6, r4
 8007e96:	edd5 7a00 	vldr	s15, [r5]
 8007e9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e9e:	f67f af58 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007ea2:	78cd      	ldrb	r5, [r1, #3]
 8007ea4:	f103 0410 	add.w	r4, r3, #16
 8007ea8:	edd3 6a03 	vldr	s13, [r3, #12]
 8007eac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007eb0:	42a6      	cmp	r6, r4
 8007eb2:	edd5 7a00 	vldr	s15, [r5]
 8007eb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eba:	f67f af4a 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007ebe:	790d      	ldrb	r5, [r1, #4]
 8007ec0:	f103 0414 	add.w	r4, r3, #20
 8007ec4:	edd3 6a04 	vldr	s13, [r3, #16]
 8007ec8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007ecc:	42a6      	cmp	r6, r4
 8007ece:	edd5 7a00 	vldr	s15, [r5]
 8007ed2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ed6:	f67f af3c 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007eda:	794d      	ldrb	r5, [r1, #5]
 8007edc:	f103 0418 	add.w	r4, r3, #24
 8007ee0:	edd3 6a05 	vldr	s13, [r3, #20]
 8007ee4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007ee8:	42a6      	cmp	r6, r4
 8007eea:	edd5 7a00 	vldr	s15, [r5]
 8007eee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ef2:	f67f af2e 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007ef6:	798d      	ldrb	r5, [r1, #6]
 8007ef8:	f103 041c 	add.w	r4, r3, #28
 8007efc:	edd3 6a06 	vldr	s13, [r3, #24]
 8007f00:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f04:	42a6      	cmp	r6, r4
 8007f06:	edd5 7a00 	vldr	s15, [r5]
 8007f0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f0e:	f67f af20 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007f12:	79cd      	ldrb	r5, [r1, #7]
 8007f14:	f103 0420 	add.w	r4, r3, #32
 8007f18:	edd3 6a07 	vldr	s13, [r3, #28]
 8007f1c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f20:	42a6      	cmp	r6, r4
 8007f22:	edd5 7a00 	vldr	s15, [r5]
 8007f26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f2a:	f67f af12 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007f2e:	7a09      	ldrb	r1, [r1, #8]
 8007f30:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007f38:	edd2 6a00 	vldr	s13, [r2]
 8007f3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f40:	e707      	b.n	8007d52 <ai_dict8_dot_array_f32+0x36>
 8007f42:	bf00      	nop
 8007f44:	3ffffff8 	.word	0x3ffffff8
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8007f48 <ai_dict8_dot_array_f32+0x22c>
 8007f50:	780d      	ldrb	r5, [r1, #0]
 8007f52:	3304      	adds	r3, #4
 8007f54:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007f58:	3101      	adds	r1, #1
 8007f5a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f5e:	edd5 6a00 	vldr	s13, [r5]
 8007f62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f66:	780d      	ldrb	r5, [r1, #0]
 8007f68:	1d1f      	adds	r7, r3, #4
 8007f6a:	edd3 7a00 	vldr	s15, [r3]
 8007f6e:	f101 0c01 	add.w	ip, r1, #1
 8007f72:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007f76:	42bc      	cmp	r4, r7
 8007f78:	edd5 6a00 	vldr	s13, [r5]
 8007f7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f80:	d365      	bcc.n	800804e <ai_dict8_dot_array_f32+0x332>
 8007f82:	3324      	adds	r3, #36	; 0x24
 8007f84:	f101 0e11 	add.w	lr, r1, #17
 8007f88:	3109      	adds	r1, #9
 8007f8a:	eba6 0803 	sub.w	r8, r6, r3
 8007f8e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007f92:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8007f96:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007f9a:	3108      	adds	r1, #8
 8007f9c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8007fa0:	3320      	adds	r3, #32
 8007fa2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007fa6:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007faa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007fae:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8007fb2:	edd5 7a00 	vldr	s15, [r5]
 8007fb6:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8007fba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007fbe:	edd4 5a00 	vldr	s11, [r4]
 8007fc2:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8007fc6:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8007fca:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007fce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007fd2:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007fd6:	ed94 4a00 	vldr	s8, [r4]
 8007fda:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8007fde:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007fe2:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8007fe6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007fea:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8007fee:	eee4 7a26 	vfma.f32	s15, s8, s13
 8007ff2:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8007ff6:	ed94 4a00 	vldr	s8, [r4]
 8007ffa:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8007ffe:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8008002:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008006:	eee4 7a05 	vfma.f32	s15, s8, s10
 800800a:	ed95 5a00 	vldr	s10, [r5]
 800800e:	ed94 4a00 	vldr	s8, [r4]
 8008012:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008016:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800801a:	458e      	cmp	lr, r1
 800801c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8008020:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008024:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008028:	ed95 5a00 	vldr	s10, [r5]
 800802c:	ed94 6a00 	vldr	s12, [r4]
 8008030:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008034:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008038:	eee6 7a26 	vfma.f32	s15, s12, s13
 800803c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008040:	d1a9      	bne.n	8007f96 <ai_dict8_dot_array_f32+0x27a>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800804a:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800804e:	42b7      	cmp	r7, r6
 8008050:	f4bf ae7f 	bcs.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008054:	463b      	mov	r3, r7
 8008056:	f89c 1000 	ldrb.w	r1, [ip]
 800805a:	ecf3 6a01 	vldmia	r3!, {s13}
 800805e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008062:	429e      	cmp	r6, r3
 8008064:	edd1 7a00 	vldr	s15, [r1]
 8008068:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800806c:	f67f ae71 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008070:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	edd7 6a01 	vldr	s13, [r7, #4]
 800807c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008080:	429e      	cmp	r6, r3
 8008082:	edd1 7a00 	vldr	s15, [r1]
 8008086:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800808a:	f67f ae62 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 800808e:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	edd7 6a02 	vldr	s13, [r7, #8]
 800809a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800809e:	429e      	cmp	r6, r3
 80080a0:	edd1 7a00 	vldr	s15, [r1]
 80080a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080a8:	f67f ae53 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 80080ac:	f89c 1003 	ldrb.w	r1, [ip, #3]
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	edd7 6a03 	vldr	s13, [r7, #12]
 80080b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080bc:	429e      	cmp	r6, r3
 80080be:	edd1 7a00 	vldr	s15, [r1]
 80080c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c6:	f67f ae44 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 80080ca:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80080ce:	f107 0314 	add.w	r3, r7, #20
 80080d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80080d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080da:	429e      	cmp	r6, r3
 80080dc:	edd1 7a00 	vldr	s15, [r1]
 80080e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e4:	f67f ae35 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 80080e8:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80080ec:	f107 0318 	add.w	r3, r7, #24
 80080f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80080f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80080f8:	429e      	cmp	r6, r3
 80080fa:	edd1 7a00 	vldr	s15, [r1]
 80080fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008102:	f67f ae26 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008106:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800810a:	f107 031c 	add.w	r3, r7, #28
 800810e:	edd7 6a06 	vldr	s13, [r7, #24]
 8008112:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008116:	429e      	cmp	r6, r3
 8008118:	edd1 7a00 	vldr	s15, [r1]
 800811c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008120:	f67f ae17 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008124:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8008128:	f107 0320 	add.w	r3, r7, #32
 800812c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008130:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8008134:	429e      	cmp	r6, r3
 8008136:	edd1 7a00 	vldr	s15, [r1]
 800813a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800813e:	f67f ae08 	bls.w	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008142:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8008146:	edd7 7a08 	vldr	s15, [r7, #32]
 800814a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800814e:	edd2 6a00 	vldr	s13, [r2]
 8008152:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008156:	e5fc      	b.n	8007d52 <ai_dict8_dot_array_f32+0x36>
 8008158:	780d      	ldrb	r5, [r1, #0]
 800815a:	3304      	adds	r3, #4
 800815c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008160:	3101      	adds	r1, #1
 8008162:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8008166:	ed95 7a00 	vldr	s14, [r5]
 800816a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800816e:	e6ef      	b.n	8007f50 <ai_dict8_dot_array_f32+0x234>
 8008170:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8007f48 <ai_dict8_dot_array_f32+0x22c>
 8008174:	e6f7      	b.n	8007f66 <ai_dict8_dot_array_f32+0x24a>
 8008176:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8007f48 <ai_dict8_dot_array_f32+0x22c>
 800817a:	e667      	b.n	8007e4c <ai_dict8_dot_array_f32+0x130>

0800817c <ai_dict4_dot_array_f32>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008182:	f027 0c01 	bic.w	ip, r7, #1
 8008186:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800818a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800818e:	f000 80ad 	beq.w	80082ec <ai_dict4_dot_array_f32+0x170>
 8008192:	1d0d      	adds	r5, r1, #4
 8008194:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008198:	f103 0420 	add.w	r4, r3, #32
 800819c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80082f4 <ai_dict4_dot_array_f32+0x178>
 80081a0:	eb05 0e09 	add.w	lr, r5, r9
 80081a4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80081a8:	3504      	adds	r5, #4
 80081aa:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 80081ae:	3420      	adds	r4, #32
 80081b0:	f006 0a0f 	and.w	sl, r6, #15
 80081b4:	0936      	lsrs	r6, r6, #4
 80081b6:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80081ba:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081be:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 80081c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081c6:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 80081ca:	edda 7a00 	vldr	s15, [sl]
 80081ce:	edd6 5a00 	vldr	s11, [r6]
 80081d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80081d6:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 80081da:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 80081de:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80081e2:	f006 060f 	and.w	r6, r6, #15
 80081e6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80081ea:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 80081ee:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081f2:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 80081f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081fa:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 80081fe:	ed9a 3a00 	vldr	s6, [sl]
 8008202:	ed96 5a00 	vldr	s10, [r6]
 8008206:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800820a:	eee3 7a04 	vfma.f32	s15, s6, s8
 800820e:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8008212:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8008216:	f00a 0a0f 	and.w	sl, sl, #15
 800821a:	45ae      	cmp	lr, r5
 800821c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8008220:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008224:	ed9b 3a00 	vldr	s6, [fp]
 8008228:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800822c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008230:	ed9a 4a00 	vldr	s8, [sl]
 8008234:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8008238:	f006 060f 	and.w	r6, r6, #15
 800823c:	ed9a 5a00 	vldr	s10, [sl]
 8008240:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008244:	ed96 6a00 	vldr	s12, [r6]
 8008248:	eee3 7a23 	vfma.f32	s15, s6, s7
 800824c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008250:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008254:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800825c:	d1a2      	bne.n	80081a4 <ai_dict4_dot_array_f32+0x28>
 800825e:	4449      	add	r1, r9
 8008260:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008264:	459c      	cmp	ip, r3
 8008266:	d92d      	bls.n	80082c4 <ai_dict4_dot_array_f32+0x148>
 8008268:	f10c 0c07 	add.w	ip, ip, #7
 800826c:	f103 0508 	add.w	r5, r3, #8
 8008270:	f103 0810 	add.w	r8, r3, #16
 8008274:	f101 3eff 	add.w	lr, r1, #4294967295
 8008278:	ebac 0c05 	sub.w	ip, ip, r5
 800827c:	f02c 0407 	bic.w	r4, ip, #7
 8008280:	44a0      	add	r8, r4
 8008282:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008286:	3508      	adds	r5, #8
 8008288:	ed55 5a03 	vldr	s11, [r5, #-12]
 800828c:	f004 060f 	and.w	r6, r4, #15
 8008290:	0924      	lsrs	r4, r4, #4
 8008292:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008296:	45a8      	cmp	r8, r5
 8008298:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800829c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80082a0:	edd6 7a00 	vldr	s15, [r6]
 80082a4:	ed94 6a00 	vldr	s12, [r4]
 80082a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80082ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082b4:	d1e5      	bne.n	8008282 <ai_dict4_dot_array_f32+0x106>
 80082b6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80082ba:	f10c 0c01 	add.w	ip, ip, #1
 80082be:	4461      	add	r1, ip
 80082c0:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80082c4:	07fc      	lsls	r4, r7, #31
 80082c6:	d509      	bpl.n	80082dc <ai_dict4_dot_array_f32+0x160>
 80082c8:	7809      	ldrb	r1, [r1, #0]
 80082ca:	edd3 7a00 	vldr	s15, [r3]
 80082ce:	090b      	lsrs	r3, r1, #4
 80082d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80082d4:	edd2 6a00 	vldr	s13, [r2]
 80082d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082dc:	edd0 7a00 	vldr	s15, [r0]
 80082e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082e4:	ed80 7a00 	vstr	s14, [r0]
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80082f4 <ai_dict4_dot_array_f32+0x178>
 80082f0:	e7b8      	b.n	8008264 <ai_dict4_dot_array_f32+0xe8>
 80082f2:	bf00      	nop
 80082f4:	00000000 	.word	0x00000000

080082f8 <ai_dict_decompress_f32>:
 80082f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082fc:	9f08      	ldr	r7, [sp, #32]
 80082fe:	2b04      	cmp	r3, #4
 8008300:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008304:	d00e      	beq.n	8008324 <ai_dict_decompress_f32+0x2c>
 8008306:	2b08      	cmp	r3, #8
 8008308:	d10a      	bne.n	8008320 <ai_dict_decompress_f32+0x28>
 800830a:	42b8      	cmp	r0, r7
 800830c:	d208      	bcs.n	8008320 <ai_dict_decompress_f32+0x28>
 800830e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f840 3b04 	str.w	r3, [r0], #4
 800831c:	4287      	cmp	r7, r0
 800831e:	d8f6      	bhi.n	800830e <ai_dict_decompress_f32+0x16>
 8008320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800832a:	f003 0e01 	and.w	lr, r3, #1
 800832e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8008332:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008336:	42b8      	cmp	r0, r7
 8008338:	d2f2      	bcs.n	8008320 <ai_dict_decompress_f32+0x28>
 800833a:	f1bc 0f00 	cmp.w	ip, #0
 800833e:	d019      	beq.n	8008374 <ai_dict_decompress_f32+0x7c>
 8008340:	f100 0508 	add.w	r5, r0, #8
 8008344:	1e4c      	subs	r4, r1, #1
 8008346:	eb01 0608 	add.w	r6, r1, r8
 800834a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800834e:	3508      	adds	r5, #8
 8008350:	091b      	lsrs	r3, r3, #4
 8008352:	42a6      	cmp	r6, r4
 8008354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f845 3c10 	str.w	r3, [r5, #-16]
 800835e:	7823      	ldrb	r3, [r4, #0]
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f845 3c0c 	str.w	r3, [r5, #-12]
 800836e:	d1ec      	bne.n	800834a <ai_dict_decompress_f32+0x52>
 8008370:	4461      	add	r1, ip
 8008372:	4448      	add	r0, r9
 8008374:	f1be 0f00 	cmp.w	lr, #0
 8008378:	d103      	bne.n	8008382 <ai_dict_decompress_f32+0x8a>
 800837a:	4287      	cmp	r7, r0
 800837c:	d8dd      	bhi.n	800833a <ai_dict_decompress_f32+0x42>
 800837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008382:	780b      	ldrb	r3, [r1, #0]
 8008384:	3004      	adds	r0, #4
 8008386:	3101      	adds	r1, #1
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f840 3c04 	str.w	r3, [r0, #-4]
 8008394:	e7cf      	b.n	8008336 <ai_dict_decompress_f32+0x3e>
 8008396:	bf00      	nop

08008398 <forward_conv2d>:
 8008398:	6942      	ldr	r2, [r0, #20]
 800839a:	8813      	ldrh	r3, [r2, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 87ad 	beq.w	80092fc <forward_conv2d+0xf64>
 80083a2:	6852      	ldr	r2, [r2, #4]
 80083a4:	6851      	ldr	r1, [r2, #4]
 80083a6:	b101      	cbz	r1, 80083aa <forward_conv2d+0x12>
 80083a8:	6809      	ldr	r1, [r1, #0]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	f240 87a3 	bls.w	80092f6 <forward_conv2d+0xf5e>
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	ed2d 8b08 	vpush	{d8-d11}
 80083b8:	b0cb      	sub	sp, #300	; 0x12c
 80083ba:	6914      	ldr	r4, [r2, #16]
 80083bc:	af02      	add	r7, sp, #8
 80083be:	2c00      	cmp	r4, #0
 80083c0:	f000 8795 	beq.w	80092ee <forward_conv2d+0xf56>
 80083c4:	6824      	ldr	r4, [r4, #0]
 80083c6:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	f000 878a 	beq.w	80092e4 <forward_conv2d+0xf4c>
 80083d0:	69d5      	ldr	r5, [r2, #28]
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	f000 877f 	beq.w	80092d6 <forward_conv2d+0xf3e>
 80083d8:	f112 0318 	adds.w	r3, r2, #24
 80083dc:	682c      	ldr	r4, [r5, #0]
 80083de:	d004      	beq.n	80083ea <forward_conv2d+0x52>
 80083e0:	8b13      	ldrh	r3, [r2, #24]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	f240 878c 	bls.w	8009300 <forward_conv2d+0xf68>
 80083e8:	686b      	ldr	r3, [r5, #4]
 80083ea:	68aa      	ldr	r2, [r5, #8]
 80083ec:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80083f0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80083f4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80083f8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80083fc:	68ce      	ldr	r6, [r1, #12]
 80083fe:	69a1      	ldr	r1, [r4, #24]
 8008400:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008402:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008406:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800840a:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800840e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008412:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008416:	f8de 100c 	ldr.w	r1, [lr, #12]
 800841a:	64b9      	str	r1, [r7, #72]	; 0x48
 800841c:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008420:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8008424:	6871      	ldr	r1, [r6, #4]
 8008426:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800842a:	68f1      	ldr	r1, [r6, #12]
 800842c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008430:	68b1      	ldr	r1, [r6, #8]
 8008432:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008436:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800843a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800843e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008442:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8008446:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800844a:	6889      	ldr	r1, [r1, #8]
 800844c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008450:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008452:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8008456:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800845a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800845c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008460:	6981      	ldr	r1, [r0, #24]
 8008462:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8008466:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8724 	beq.w	80092b8 <forward_conv2d+0xf20>
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847c:	4606      	mov	r6, r0
 800847e:	69c0      	ldr	r0, [r0, #28]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008488:	2a00      	cmp	r2, #0
 800848a:	f000 8708 	beq.w	800929e <forward_conv2d+0xf06>
 800848e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8008492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008496:	6892      	ldr	r2, [r2, #8]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800849e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a2:	f001 fc81 	bl	8009da8 <ai_array_get_byte_size>
 80084a6:	69a3      	ldr	r3, [r4, #24]
 80084a8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80084ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80084b0:	681c      	ldr	r4, [r3, #0]
 80084b2:	fa1f f289 	uxth.w	r2, r9
 80084b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80084ba:	fa1f f388 	uxth.w	r3, r8
 80084be:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 80084c2:	f3c4 5041 	ubfx	r0, r4, #21, #2
 80084c6:	f101 3eff 	add.w	lr, r1, #4294967295
 80084ca:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 80084ce:	3a01      	subs	r2, #1
 80084d0:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80084d4:	fa45 f000 	asr.w	r0, r5, r0
 80084d8:	6a35      	ldr	r5, [r6, #32]
 80084da:	fb0e 1202 	mla	r2, lr, r2, r1
 80084de:	3b01      	subs	r3, #1
 80084e0:	3c01      	subs	r4, #1
 80084e2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80084e6:	f8c7 50b4 	str.w	r5, [r7, #180]	; 0xb4
 80084ea:	b285      	uxth	r5, r0
 80084ec:	fb04 1103 	mla	r1, r4, r3, r1
 80084f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084f4:	647a      	str	r2, [r7, #68]	; 0x44
 80084f6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80084fa:	4619      	mov	r1, r3
 80084fc:	4ade      	ldr	r2, [pc, #888]	; (8008878 <forward_conv2d+0x4e0>)
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bf08      	it	eq
 8008502:	4611      	moveq	r1, r2
 8008504:	f1bc 0f04 	cmp.w	ip, #4
 8008508:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800850c:	f000 852e 	beq.w	8008f6c <forward_conv2d+0xbd4>
 8008510:	f1bc 0f08 	cmp.w	ip, #8
 8008514:	f000 852a 	beq.w	8008f6c <forward_conv2d+0xbd4>
 8008518:	fa1f f38a 	uxth.w	r3, sl
 800851c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008524:	425b      	negs	r3, r3
 8008526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800852a:	2a00      	cmp	r2, #0
 800852c:	f000 8241 	beq.w	80089b2 <forward_conv2d+0x61a>
 8008530:	fa1f f28b 	uxth.w	r2, fp
 8008534:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008538:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 800853c:	fa0f f689 	sxth.w	r6, r9
 8008540:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008544:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008548:	fb01 f305 	mul.w	r3, r1, r5
 800854c:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8008550:	fa0f f588 	sxth.w	r5, r8
 8008554:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008558:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 800855c:	4264      	negs	r4, r4
 800855e:	fb03 fc00 	mul.w	ip, r3, r0
 8008562:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8008566:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800856a:	4634      	mov	r4, r6
 800856c:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8008570:	462e      	mov	r6, r5
 8008572:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 8008576:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 800857a:	f8c7 c0d4 	str.w	ip, [r7, #212]	; 0xd4
 800857e:	fb04 fc05 	mul.w	ip, r4, r5
 8008582:	4605      	mov	r5, r0
 8008584:	0084      	lsls	r4, r0, #2
 8008586:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800858a:	fb06 f605 	mul.w	r6, r6, r5
 800858e:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8008592:	fb01 f200 	mul.w	r2, r1, r0
 8008596:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800859a:	62fe      	str	r6, [r7, #44]	; 0x2c
 800859c:	4626      	mov	r6, r4
 800859e:	fb01 f000 	mul.w	r0, r1, r0
 80085a2:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 800887c <forward_conv2d+0x4e4>
 80085a6:	fb06 f605 	mul.w	r6, r6, r5
 80085aa:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 80085ac:	6338      	str	r0, [r7, #48]	; 0x30
 80085ae:	00ad      	lsls	r5, r5, #2
 80085b0:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80085b4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80085b8:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
 80085bc:	4625      	mov	r5, r4
 80085be:	0080      	lsls	r0, r0, #2
 80085c0:	f8c7 c074 	str.w	ip, [r7, #116]	; 0x74
 80085c4:	fb05 f503 	mul.w	r5, r5, r3
 80085c8:	460b      	mov	r3, r1
 80085ca:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80085ce:	0089      	lsls	r1, r1, #2
 80085d0:	4620      	mov	r0, r4
 80085d2:	63fd      	str	r5, [r7, #60]	; 0x3c
 80085d4:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80085d8:	0095      	lsls	r5, r2, #2
 80085da:	6239      	str	r1, [r7, #32]
 80085dc:	4619      	mov	r1, r3
 80085de:	62bd      	str	r5, [r7, #40]	; 0x28
 80085e0:	4625      	mov	r5, r4
 80085e2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80085e4:	fb00 f505 	mul.w	r5, r0, r5
 80085e8:	fb04 f101 	mul.w	r1, r4, r1
 80085ec:	65fe      	str	r6, [r7, #92]	; 0x5c
 80085ee:	66bd      	str	r5, [r7, #104]	; 0x68
 80085f0:	6179      	str	r1, [r7, #20]
 80085f2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80085f6:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80085fa:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80085fe:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 8008602:	fb04 f400 	mul.w	r4, r4, r0
 8008606:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800860a:	65bc      	str	r4, [r7, #88]	; 0x58
 800860c:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8008610:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 8008614:	643c      	str	r4, [r7, #64]	; 0x40
 8008616:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800861a:	fb02 f204 	mul.w	r2, r2, r4
 800861e:	61ba      	str	r2, [r7, #24]
 8008620:	460a      	mov	r2, r1
 8008622:	0109      	lsls	r1, r1, #4
 8008624:	6079      	str	r1, [r7, #4]
 8008626:	4619      	mov	r1, r3
 8008628:	4603      	mov	r3, r0
 800862a:	fb01 f303 	mul.w	r3, r1, r3
 800862e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008632:	00d3      	lsls	r3, r2, #3
 8008634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800863c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008646:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800864a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800864e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008650:	2900      	cmp	r1, #0
 8008652:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008654:	441a      	add	r2, r3
 8008656:	bfb4      	ite	lt
 8008658:	2100      	movlt	r1, #0
 800865a:	2300      	movge	r3, #0
 800865c:	4282      	cmp	r2, r0
 800865e:	bf28      	it	cs
 8008660:	4602      	movcs	r2, r0
 8008662:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008666:	2801      	cmp	r0, #1
 8008668:	f000 8300 	beq.w	8008c6c <forward_conv2d+0x8d4>
 800866c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008670:	4281      	cmp	r1, r0
 8008672:	f000 81bc 	beq.w	80089ee <forward_conv2d+0x656>
 8008676:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800867a:	2900      	cmp	r1, #0
 800867c:	f000 8178 	beq.w	8008970 <forward_conv2d+0x5d8>
 8008680:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800868a:	181d      	adds	r5, r3, r0
 800868c:	f8c7 b01c 	str.w	fp, [r7, #28]
 8008690:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8008694:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8008698:	3d01      	subs	r5, #1
 800869a:	fb93 f1f0 	sdiv	r1, r3, r0
 800869e:	fb00 3111 	mls	r1, r0, r1, r3
 80086a2:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80086a6:	2400      	movs	r4, #0
 80086a8:	1a41      	subs	r1, r0, r1
 80086aa:	67bc      	str	r4, [r7, #120]	; 0x78
 80086ac:	4604      	mov	r4, r0
 80086ae:	fb91 f0f0 	sdiv	r0, r1, r0
 80086b2:	fb04 1110 	mls	r1, r4, r0, r1
 80086b6:	4620      	mov	r0, r4
 80086b8:	1a52      	subs	r2, r2, r1
 80086ba:	4419      	add	r1, r3
 80086bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c0:	4422      	add	r2, r4
 80086c2:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80086c6:	fb03 f301 	mul.w	r3, r3, r1
 80086ca:	3a01      	subs	r2, #1
 80086cc:	673b      	str	r3, [r7, #112]	; 0x70
 80086ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086d2:	fb92 f8f0 	sdiv	r8, r2, r0
 80086d6:	4619      	mov	r1, r3
 80086d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80086dc:	46c2      	mov	sl, r8
 80086de:	fbb1 f3f4 	udiv	r3, r1, r4
 80086e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80086e6:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80086ea:	fb95 f5f0 	sdiv	r5, r5, r0
 80086ee:	eba1 0008 	sub.w	r0, r1, r8
 80086f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f4:	eba1 0c03 	sub.w	ip, r1, r3
 80086f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80086fc:	fbb2 f2f4 	udiv	r2, r2, r4
 8008700:	fb0e f403 	mul.w	r4, lr, r3
 8008704:	0096      	lsls	r6, r2, #2
 8008706:	fb03 f305 	mul.w	r3, r3, r5
 800870a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800870e:	657a      	str	r2, [r7, #84]	; 0x54
 8008710:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8008714:	653b      	str	r3, [r7, #80]	; 0x50
 8008716:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800871a:	fb04 f300 	mul.w	r3, r4, r0
 800871e:	663e      	str	r6, [r7, #96]	; 0x60
 8008720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008728:	1b9b      	subs	r3, r3, r6
 800872a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800872e:	008b      	lsls	r3, r1, #2
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
 8008732:	00d3      	lsls	r3, r2, #3
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
 8008736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008738:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800873c:	189e      	adds	r6, r3, r2
 800873e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 813e 	blt.w	80089c4 <forward_conv2d+0x62c>
 8008748:	2100      	movs	r1, #0
 800874a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800874c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008750:	4688      	mov	r8, r1
 8008752:	460d      	mov	r5, r1
 8008754:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8008758:	f103 3cff 	add.w	ip, r3, #4294967295
 800875c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008760:	0080      	lsls	r0, r0, #2
 8008762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008766:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800876a:	4422      	add	r2, r4
 800876c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8008770:	4423      	add	r3, r4
 8008772:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8008776:	42a2      	cmp	r2, r4
 8008778:	bf94      	ite	ls
 800877a:	ebc5 0202 	rsbls	r2, r5, r2
 800877e:	ebc5 0204 	rsbhi	r2, r5, r4
 8008782:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008786:	eb08 0403 	add.w	r4, r8, r3
 800878a:	1a52      	subs	r2, r2, r1
 800878c:	462b      	mov	r3, r5
 800878e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008792:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008796:	2d00      	cmp	r5, #0
 8008798:	bf08      	it	eq
 800879a:	4633      	moveq	r3, r6
 800879c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80087a0:	440a      	add	r2, r1
 80087a2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 80087a6:	42b3      	cmp	r3, r6
 80087a8:	f102 36ff 	add.w	r6, r2, #4294967295
 80087ac:	fb00 5004 	mla	r0, r0, r4, r5
 80087b0:	460a      	mov	r2, r1
 80087b2:	fe08 6a06 	vseleq.f32	s12, s16, s12
 80087b6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80087ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087bc:	fb96 f6f1 	sdiv	r6, r6, r1
 80087c0:	fb9c f5f1 	sdiv	r5, ip, r1
 80087c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087c6:	440d      	add	r5, r1
 80087c8:	fb06 0112 	mls	r1, r6, r2, r0
 80087cc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80087d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80087d4:	fb0e 0505 	mla	r5, lr, r5, r0
 80087d8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80087dc:	1b92      	subs	r2, r2, r6
 80087de:	2800      	cmp	r0, #0
 80087e0:	d074      	beq.n	80088cc <forward_conv2d+0x534>
 80087e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80087e6:	fb0e f802 	mul.w	r8, lr, r2
 80087ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ec:	fb00 fb01 	mul.w	fp, r0, r1
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d06b      	beq.n	80088cc <forward_conv2d+0x534>
 80087f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087f6:	189a      	adds	r2, r3, r2
 80087f8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80087fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
 8008804:	2300      	movs	r3, #0
 8008806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008808:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008810:	4413      	add	r3, r2
 8008812:	188a      	adds	r2, r1, r2
 8008814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008816:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800881a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800881e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008822:	f1ba 0f00 	cmp.w	sl, #0
 8008826:	ecf3 7a01 	vldmia	r3!, {s15}
 800882a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800882e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008832:	f340 80c5 	ble.w	80089c0 <forward_conv2d+0x628>
 8008836:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800883a:	f04f 0c00 	mov.w	ip, #0
 800883e:	2e00      	cmp	r6, #0
 8008840:	dd1e      	ble.n	8008880 <forward_conv2d+0x4e8>
 8008842:	2100      	movs	r1, #0
 8008844:	eb00 040e 	add.w	r4, r0, lr
 8008848:	4284      	cmp	r4, r0
 800884a:	d910      	bls.n	800886e <forward_conv2d+0x4d6>
 800884c:	4603      	mov	r3, r0
 800884e:	462a      	mov	r2, r5
 8008850:	ecb3 7a01 	vldmia	r3!, {s14}
 8008854:	ecf2 6a01 	vldmia	r2!, {s13}
 8008858:	429c      	cmp	r4, r3
 800885a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800885e:	d8f7      	bhi.n	8008850 <forward_conv2d+0x4b8>
 8008860:	43c3      	mvns	r3, r0
 8008862:	441c      	add	r4, r3
 8008864:	f024 0403 	bic.w	r4, r4, #3
 8008868:	3404      	adds	r4, #4
 800886a:	4425      	add	r5, r4
 800886c:	4420      	add	r0, r4
 800886e:	3101      	adds	r1, #1
 8008870:	4448      	add	r0, r9
 8008872:	428e      	cmp	r6, r1
 8008874:	d1e6      	bne.n	8008844 <forward_conv2d+0x4ac>
 8008876:	e003      	b.n	8008880 <forward_conv2d+0x4e8>
 8008878:	08007d19 	.word	0x08007d19
 800887c:	00000000 	.word	0x00000000
 8008880:	f10c 0c01 	add.w	ip, ip, #1
 8008884:	4458      	add	r0, fp
 8008886:	4445      	add	r5, r8
 8008888:	45e2      	cmp	sl, ip
 800888a:	d1d8      	bne.n	800883e <forward_conv2d+0x4a6>
 800888c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008894:	441d      	add	r5, r3
 8008896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800889a:	ece3 7a01 	vstmia	r3!, {s15}
 800889e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d1b9      	bne.n	800881e <forward_conv2d+0x486>
 80088aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80088ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b0:	4472      	add	r2, lr
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088b8:	3301      	adds	r3, #1
 80088ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088be:	1a52      	subs	r2, r2, r1
 80088c0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80088c4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d19d      	bne.n	8008808 <forward_conv2d+0x470>
 80088cc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80088d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80088d4:	4608      	mov	r0, r1
 80088d6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80088da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088dc:	4410      	add	r0, r2
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80088e4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80088e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088ea:	4401      	add	r1, r0
 80088ec:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80088f0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80088f4:	1a8a      	subs	r2, r1, r2
 80088f6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80088fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80088fe:	429a      	cmp	r2, r3
 8008900:	f47f af19 	bne.w	8008736 <forward_conv2d+0x39e>
 8008904:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8008908:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800890c:	b383      	cbz	r3, 8008970 <forward_conv2d+0x5d8>
 800890e:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8008912:	2500      	movs	r5, #0
 8008914:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
 8008918:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 800891c:	46a2      	mov	sl, r4
 800891e:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 8008922:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008926:	4633      	mov	r3, r6
 8008928:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800892c:	3501      	adds	r5, #1
 800892e:	f8c1 a008 	str.w	sl, [r1, #8]
 8008932:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8008936:	4416      	add	r6, r2
 8008938:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800893c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008940:	4482      	add	sl, r0
 8008942:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8008946:	4608      	mov	r0, r1
 8008948:	47a0      	blx	r4
 800894a:	eba6 0309 	sub.w	r3, r6, r9
 800894e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008952:	4293      	cmp	r3, r2
 8008954:	bfa8      	it	ge
 8008956:	464e      	movge	r6, r9
 8008958:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800895c:	42ab      	cmp	r3, r5
 800895e:	d1e0      	bne.n	8008922 <forward_conv2d+0x58a>
 8008960:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	f8c7 608c 	str.w	r6, [r7, #140]	; 0x8c
 800896a:	4413      	add	r3, r2
 800896c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008970:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008974:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008976:	4604      	mov	r4, r0
 8008978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	4414      	add	r4, r2
 8008984:	1a82      	subs	r2, r0, r2
 8008986:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800898a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800898e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008992:	3101      	adds	r1, #1
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	697c      	ldr	r4, [r7, #20]
 800899e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a2:	4420      	add	r0, r4
 80089a4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80089a8:	428b      	cmp	r3, r1
 80089aa:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 80089ae:	f47f ae4a 	bne.w	8008646 <forward_conv2d+0x2ae>
 80089b2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80089b6:	46bd      	mov	sp, r7
 80089b8:	ecbd 8b08 	vpop	{d8-d11}
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	461a      	mov	r2, r3
 80089c2:	e765      	b.n	8008890 <forward_conv2d+0x4f8>
 80089c4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80089c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089cc:	460d      	mov	r5, r1
 80089ce:	4688      	mov	r8, r1
 80089d0:	1853      	adds	r3, r2, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	fb95 f2f2 	sdiv	r2, r5, r2
 80089d8:	fb01 5212 	mls	r2, r1, r2, r5
 80089dc:	460c      	mov	r4, r1
 80089de:	1a8a      	subs	r2, r1, r2
 80089e0:	fb92 f1f1 	sdiv	r1, r2, r1
 80089e4:	fb04 2111 	mls	r1, r4, r1, r2
 80089e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089ea:	1888      	adds	r0, r1, r2
 80089ec:	e6b2      	b.n	8008754 <forward_conv2d+0x3bc>
 80089ee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80089f0:	2901      	cmp	r1, #1
 80089f2:	f47f ae40 	bne.w	8008676 <forward_conv2d+0x2de>
 80089f6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80089fa:	2900      	cmp	r1, #0
 80089fc:	d0b8      	beq.n	8008970 <forward_conv2d+0x5d8>
 80089fe:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008a02:	1ad1      	subs	r1, r2, r3
 8008a04:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008a08:	0082      	lsls	r2, r0, #2
 8008a0a:	fb03 f000 	mul.w	r0, r3, r0
 8008a0e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008a12:	6738      	str	r0, [r7, #112]	; 0x70
 8008a14:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8008a18:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8008a1c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008a20:	1a41      	subs	r1, r0, r1
 8008a22:	6a38      	ldr	r0, [r7, #32]
 8008a24:	fb00 f303 	mul.w	r3, r0, r3
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a3a:	fb02 f301 	mul.w	r3, r2, r1
 8008a3e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34
 8008a44:	2300      	movs	r3, #0
 8008a46:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8008a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a58:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8008a5c:	0092      	lsls	r2, r2, #2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	008b      	lsls	r3, r1, #2
 8008a66:	60bb      	str	r3, [r7, #8]
 8008a68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f2c0 8264 	blt.w	8008f3a <forward_conv2d+0xba2>
 8008a72:	2400      	movs	r4, #0
 8008a74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a76:	4621      	mov	r1, r4
 8008a78:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008a7c:	f8d7 6114 	ldr.w	r6, [r7, #276]	; 0x114
 8008a80:	1818      	adds	r0, r3, r0
 8008a82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a86:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008a8a:	18f3      	adds	r3, r6, r3
 8008a8c:	4420      	add	r0, r4
 8008a8e:	461c      	mov	r4, r3
 8008a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a94:	0080      	lsls	r0, r0, #2
 8008a96:	429c      	cmp	r4, r3
 8008a98:	bf28      	it	cs
 8008a9a:	461c      	movcs	r4, r3
 8008a9c:	1a64      	subs	r4, r4, r1
 8008a9e:	2d00      	cmp	r5, #0
 8008aa0:	f000 823c 	beq.w	8008f1c <forward_conv2d+0xb84>
 8008aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aa8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008aac:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008ab0:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8008ab4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ab8:	428d      	cmp	r5, r1
 8008aba:	462a      	mov	r2, r5
 8008abc:	eba6 0104 	sub.w	r1, r6, r4
 8008ac0:	eba3 0304 	sub.w	r3, r3, r4
 8008ac4:	fe48 3a23 	vseleq.f32	s7, s16, s7
 8008ac8:	69fd      	ldr	r5, [r7, #28]
 8008aca:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8008ace:	4428      	add	r0, r5
 8008ad0:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008ad4:	fb05 6e00 	mla	lr, r5, r0, r6
 8008ad8:	eb0e 000b 	add.w	r0, lr, fp
 8008adc:	4586      	cmp	lr, r0
 8008ade:	6278      	str	r0, [r7, #36]	; 0x24
 8008ae0:	f080 80a7 	bcs.w	8008c32 <forward_conv2d+0x89a>
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	fb01 f10b 	mul.w	r1, r1, fp
 8008aea:	f024 0803 	bic.w	r8, r4, #3
 8008aee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 809a 	beq.w	8008c32 <forward_conv2d+0x89a>
 8008afe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b00:	f108 33ff 	add.w	r3, r8, #4294967295
 8008b04:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008b08:	089b      	lsrs	r3, r3, #2
 8008b0a:	4401      	add	r1, r0
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	1810      	adds	r0, r2, r0
 8008b12:	1a8a      	subs	r2, r1, r2
 8008b14:	613a      	str	r2, [r7, #16]
 8008b16:	fb03 f20a 	mul.w	r2, r3, sl
 8008b1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008b1e:	657a      	str	r2, [r7, #84]	; 0x54
 8008b20:	011a      	lsls	r2, r3, #4
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	663a      	str	r2, [r7, #96]	; 0x60
 8008b26:	653b      	str	r3, [r7, #80]	; 0x50
 8008b28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2e:	6939      	ldr	r1, [r7, #16]
 8008b30:	4413      	add	r3, r2
 8008b32:	188a      	adds	r2, r1, r2
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b40:	ecf3 6a01 	vldmia	r3!, {s13}
 8008b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b48:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008b4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dd57      	ble.n	8008c04 <forward_conv2d+0x86c>
 8008b54:	4676      	mov	r6, lr
 8008b56:	f04f 0c00 	mov.w	ip, #0
 8008b5a:	f1b8 0f00 	cmp.w	r8, #0
 8008b5e:	f340 81db 	ble.w	8008f18 <forward_conv2d+0xb80>
 8008b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b66:	f109 0310 	add.w	r3, r9, #16
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	18b1      	adds	r1, r6, r2
 8008b6e:	4632      	mov	r2, r6
 8008b70:	eb02 050b 	add.w	r5, r2, fp
 8008b74:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008b78:	ed92 4a00 	vldr	s8, [r2]
 8008b7c:	3004      	adds	r0, #4
 8008b7e:	ed95 7a00 	vldr	s14, [r5]
 8008b82:	eb01 050b 	add.w	r5, r1, fp
 8008b86:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008b8a:	4540      	cmp	r0, r8
 8008b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b90:	ed91 5a00 	vldr	s10, [r1]
 8008b94:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008b98:	4452      	add	r2, sl
 8008b9a:	ed13 7a01 	vldr	s14, [r3, #-4]
 8008b9e:	4451      	add	r1, sl
 8008ba0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008ba4:	ed95 6a00 	vldr	s12, [r5]
 8008ba8:	f103 0310 	add.w	r3, r3, #16
 8008bac:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008bb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008bb8:	dbda      	blt.n	8008b70 <forward_conv2d+0x7d8>
 8008bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008bbe:	441e      	add	r6, r3
 8008bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bc2:	4499      	add	r9, r3
 8008bc4:	4284      	cmp	r4, r0
 8008bc6:	dd11      	ble.n	8008bec <forward_conv2d+0x854>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4633      	mov	r3, r6
 8008bcc:	4649      	mov	r1, r9
 8008bce:	3201      	adds	r2, #1
 8008bd0:	edd3 7a00 	vldr	s15, [r3]
 8008bd4:	ecb1 7a01 	vldmia	r1!, {s14}
 8008bd8:	445b      	add	r3, fp
 8008bda:	4294      	cmp	r4, r2
 8008bdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008be0:	d1f5      	bne.n	8008bce <forward_conv2d+0x836>
 8008be2:	1a20      	subs	r0, r4, r0
 8008be4:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008be8:	fb00 660b 	mla	r6, r0, fp, r6
 8008bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bf0:	f10c 0c01 	add.w	ip, ip, #1
 8008bf4:	441e      	add	r6, r3
 8008bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bfa:	4499      	add	r9, r3
 8008bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c00:	4563      	cmp	r3, ip
 8008c02:	d1aa      	bne.n	8008b5a <forward_conv2d+0x7c2>
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c0a:	4499      	add	r9, r3
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	ece3 6a01 	vstmia	r3!, {s13}
 8008c12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d18f      	bne.n	8008b3c <forward_conv2d+0x7a4>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f10e 0e04 	add.w	lr, lr, #4
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	459e      	cmp	lr, r3
 8008c2e:	f4ff af7b 	bcc.w	8008b28 <forward_conv2d+0x790>
 8008c32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008c36:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008c42:	3301      	adds	r3, #1
 8008c44:	4608      	mov	r0, r1
 8008c46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c4a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008c4e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c54:	4410      	add	r0, r2
 8008c56:	1a8a      	subs	r2, r1, r2
 8008c58:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008c5c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008c60:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8008c64:	429a      	cmp	r2, r3
 8008c66:	f47f aeff 	bne.w	8008a68 <forward_conv2d+0x6d0>
 8008c6a:	e64d      	b.n	8008908 <forward_conv2d+0x570>
 8008c6c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008c6e:	2801      	cmp	r0, #1
 8008c70:	f47f ad01 	bne.w	8008676 <forward_conv2d+0x2de>
 8008c74:	1ad2      	subs	r2, r2, r3
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8008c7c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c82:	fb00 4101 	mla	r1, r0, r1, r4
 8008c86:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008c8a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008c8e:	f080 8195 	bcs.w	8008fbc <forward_conv2d+0xc24>
 8008c92:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	f43f ae36 	beq.w	8008908 <forward_conv2d+0x570>
 8008c9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c9e:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8008caa:	4411      	add	r1, r2
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	64f9      	str	r1, [r7, #76]	; 0x4c
 8008cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cb2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cba:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cca:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8008cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8147 	beq.w	8008f66 <forward_conv2d+0xbce>
 8008cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cda:	ed93 6a00 	vldr	s12, [r3]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80fe 	beq.w	8008ee8 <forward_conv2d+0xb50>
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf0:	f04f 0b00 	mov.w	fp, #0
 8008cf4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008cf8:	eb03 0802 	add.w	r8, r3, r2
 8008cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8008d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f2c0 811a 	blt.w	8008f54 <forward_conv2d+0xbbc>
 8008d20:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8008d24:	2300      	movs	r3, #0
 8008d26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d28:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008d2c:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008d30:	4540      	cmp	r0, r8
 8008d32:	bf94      	ite	ls
 8008d34:	ebc3 0300 	rsbls	r3, r3, r0
 8008d38:	ebc3 0308 	rsbhi	r3, r3, r8
 8008d3c:	4422      	add	r2, r4
 8008d3e:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008d42:	1ac0      	subs	r0, r0, r3
 8008d44:	eba4 0903 	sub.w	r9, r4, r3
 8008d48:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008d4c:	fb03 f304 	mul.w	r3, r3, r4
 8008d50:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	f340 80fa 	ble.w	8008f4e <forward_conv2d+0xbb6>
 8008d5a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8008d5e:	f023 050f 	bic.w	r5, r3, #15
 8008d62:	eef0 6a46 	vmov.f32	s13, s12
 8008d66:	f04f 0e00 	mov.w	lr, #0
 8008d6a:	fb04 f000 	mul.w	r0, r4, r0
 8008d6e:	fb04 f909 	mul.w	r9, r4, r9
 8008d72:	6578      	str	r0, [r7, #84]	; 0x54
 8008d74:	1e68      	subs	r0, r5, #1
 8008d76:	0900      	lsrs	r0, r0, #4
 8008d78:	3001      	adds	r0, #1
 8008d7a:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008d7e:	0100      	lsls	r0, r0, #4
 8008d80:	6538      	str	r0, [r7, #80]	; 0x50
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	f340 80e1 	ble.w	8008f4a <forward_conv2d+0xbb2>
 8008d88:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008d8c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008d90:	2600      	movs	r6, #0
 8008d92:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 8008d96:	3610      	adds	r6, #16
 8008d98:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8008d9c:	3040      	adds	r0, #64	; 0x40
 8008d9e:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 8008da2:	42ae      	cmp	r6, r5
 8008da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da8:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 8008dac:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 8008db0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008db4:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8008db8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008dbc:	ed50 3a1d 	vldr	s7, [r0, #-116]	; 0xffffff8c
 8008dc0:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8008dc4:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8008dc8:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8008dcc:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8008dd0:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8008dd4:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008dd8:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8008ddc:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8008de0:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8008de4:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8008de8:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8008dec:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8008df0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008df4:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8008df8:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8008dfc:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 8008e00:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 8008e04:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8008e08:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 8008e0c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008e10:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8008e14:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8008e18:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 8008e1c:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 8008e20:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8008e24:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8008e28:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008e2c:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8008e30:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8008e34:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008e38:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008e3c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008e40:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008e44:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008e48:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008e4c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008e50:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008e54:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008e58:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008e5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008e60:	db97      	blt.n	8008d92 <forward_conv2d+0x9fa>
 8008e62:	4451      	add	r1, sl
 8008e64:	4452      	add	r2, sl
 8008e66:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e68:	4283      	cmp	r3, r0
 8008e6a:	dd0f      	ble.n	8008e8c <forward_conv2d+0xaf4>
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	468c      	mov	ip, r1
 8008e70:	4616      	mov	r6, r2
 8008e72:	3401      	adds	r4, #1
 8008e74:	ecb6 7a01 	vldmia	r6!, {s14}
 8008e78:	ecfc 7a01 	vldmia	ip!, {s15}
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e82:	d1f6      	bne.n	8008e72 <forward_conv2d+0xada>
 8008e84:	1a18      	subs	r0, r3, r0
 8008e86:	0080      	lsls	r0, r0, #2
 8008e88:	4402      	add	r2, r0
 8008e8a:	4401      	add	r1, r0
 8008e8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e8e:	f10e 0e01 	add.w	lr, lr, #1
 8008e92:	4449      	add	r1, r9
 8008e94:	4402      	add	r2, r0
 8008e96:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008e9a:	4570      	cmp	r0, lr
 8008e9c:	f47f af71 	bne.w	8008d82 <forward_conv2d+0x9ea>
 8008ea0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008ea4:	f10b 0b01 	add.w	fp, fp, #1
 8008ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eaa:	4608      	mov	r0, r1
 8008eac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008eb0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008eb4:	4410      	add	r0, r2
 8008eb6:	edc3 6a00 	vstr	s13, [r3]
 8008eba:	440b      	add	r3, r1
 8008ebc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8008ec0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8008ec4:	eba8 0802 	sub.w	r8, r8, r2
 8008ec8:	4608      	mov	r0, r1
 8008eca:	673b      	str	r3, [r7, #112]	; 0x70
 8008ecc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ed2:	4418      	add	r0, r3
 8008ed4:	1acb      	subs	r3, r1, r3
 8008ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008eda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ede:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008ee2:	455b      	cmp	r3, fp
 8008ee4:	f47f af17 	bne.w	8008d16 <forward_conv2d+0x97e>
 8008ee8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ef2:	440a      	add	r2, r1
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008efa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f02:	3204      	adds	r2, #4
 8008f04:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008f08:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f47f aede 	bne.w	8008cce <forward_conv2d+0x936>
 8008f12:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
 8008f16:	e4f7      	b.n	8008908 <forward_conv2d+0x570>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e653      	b.n	8008bc4 <forward_conv2d+0x82c>
 8008f1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f20:	eef0 3a48 	vmov.f32	s7, s16
 8008f24:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008f30:	1b19      	subs	r1, r3, r4
 8008f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f36:	1b1b      	subs	r3, r3, r4
 8008f38:	e5c6      	b.n	8008ac8 <forward_conv2d+0x730>
 8008f3a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8008f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f40:	4621      	mov	r1, r4
 8008f42:	191a      	adds	r2, r3, r4
 8008f44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f48:	e596      	b.n	8008a78 <forward_conv2d+0x6e0>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e78c      	b.n	8008e68 <forward_conv2d+0xad0>
 8008f4e:	eef0 6a46 	vmov.f32	s13, s12
 8008f52:	e7a5      	b.n	8008ea0 <forward_conv2d+0xb08>
 8008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f5c:	eba8 0303 	sub.w	r3, r8, r3
 8008f60:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008f64:	e6e0      	b.n	8008d28 <forward_conv2d+0x990>
 8008f66:	eeb0 6a48 	vmov.f32	s12, s16
 8008f6a:	e6ba      	b.n	8008ce2 <forward_conv2d+0x94a>
 8008f6c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008f70:	68ca      	ldr	r2, [r1, #12]
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	f43f aad0 	beq.w	8008518 <forward_conv2d+0x180>
 8008f78:	6973      	ldr	r3, [r6, #20]
 8008f7a:	8818      	ldrh	r0, [r3, #0]
 8008f7c:	2803      	cmp	r0, #3
 8008f7e:	f240 818b 	bls.w	8009298 <forward_conv2d+0xf00>
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8183 	beq.w	8009292 <forward_conv2d+0xefa>
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 817f 	beq.w	8009292 <forward_conv2d+0xefa>
 8008f94:	699c      	ldr	r4, [r3, #24]
 8008f96:	462b      	mov	r3, r5
 8008f98:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8008f9c:	6889      	ldr	r1, [r1, #8]
 8008f9e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	bf18      	it	ne
 8008fa6:	4605      	movne	r5, r0
 8008fa8:	f8c7 5108 	str.w	r5, [r7, #264]	; 0x108
 8008fac:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008fb0:	e9cd 5400 	strd	r5, r4, [sp]
 8008fb4:	f7ff f9a0 	bl	80082f8 <ai_dict_decompress_f32>
 8008fb8:	f7ff baae 	b.w	8008518 <forward_conv2d+0x180>
 8008fbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008fc0:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
 8008fc4:	320a      	adds	r2, #10
 8008fc6:	f022 0207 	bic.w	r2, r2, #7
 8008fca:	ebad 0d02 	sub.w	sp, sp, r2
 8008fce:	aa02      	add	r2, sp, #8
 8008fd0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008fd4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	f000 8145 	beq.w	8009268 <forward_conv2d+0xed0>
 8008fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fe0:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008fe4:	fb02 f303 	mul.w	r3, r2, r3
 8008fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fea:	657b      	str	r3, [r7, #84]	; 0x54
 8008fec:	4411      	add	r1, r2
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008ff8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ffc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8009000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009004:	2300      	movs	r3, #0
 8009006:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800900a:	67bb      	str	r3, [r7, #120]	; 0x78
 800900c:	6739      	str	r1, [r7, #112]	; 0x70
 800900e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009010:	b13b      	cbz	r3, 8009022 <forward_conv2d+0xc8a>
 8009012:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009016:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800901a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800901e:	f000 ff15 	bl	8009e4c <memcpy>
 8009022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 8130 	beq.w	800928c <forward_conv2d+0xef4>
 800902c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800902e:	ed93 6a00 	vldr	s12, [r3]
 8009032:	3304      	adds	r3, #4
 8009034:	673b      	str	r3, [r7, #112]	; 0x70
 8009036:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80fe 	beq.w	800923c <forward_conv2d+0xea4>
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009044:	f04f 0b00 	mov.w	fp, #0
 8009048:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800904c:	eb03 0802 	add.w	r8, r3, r2
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800905c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800906a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800906e:	2b00      	cmp	r3, #0
 8009070:	f2c0 8103 	blt.w	800927a <forward_conv2d+0xee2>
 8009074:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8009078:	2300      	movs	r3, #0
 800907a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800907c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009080:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009084:	4540      	cmp	r0, r8
 8009086:	bf94      	ite	ls
 8009088:	ebc3 0300 	rsbls	r3, r3, r0
 800908c:	ebc3 0308 	rsbhi	r3, r3, r8
 8009090:	4422      	add	r2, r4
 8009092:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009096:	1ac0      	subs	r0, r0, r3
 8009098:	eba4 0903 	sub.w	r9, r4, r3
 800909c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80090a0:	fb03 f304 	mul.w	r3, r3, r4
 80090a4:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	f340 80e3 	ble.w	8009274 <forward_conv2d+0xedc>
 80090ae:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80090b2:	f023 050f 	bic.w	r5, r3, #15
 80090b6:	eef0 6a46 	vmov.f32	s13, s12
 80090ba:	f04f 0e00 	mov.w	lr, #0
 80090be:	fb04 f000 	mul.w	r0, r4, r0
 80090c2:	fb04 f909 	mul.w	r9, r4, r9
 80090c6:	6538      	str	r0, [r7, #80]	; 0x50
 80090c8:	1e68      	subs	r0, r5, #1
 80090ca:	0900      	lsrs	r0, r0, #4
 80090cc:	3001      	adds	r0, #1
 80090ce:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80090d2:	0100      	lsls	r0, r0, #4
 80090d4:	6378      	str	r0, [r7, #52]	; 0x34
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	f340 80ca 	ble.w	8009270 <forward_conv2d+0xed8>
 80090dc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80090e0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80090e4:	2600      	movs	r6, #0
 80090e6:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80090ea:	3610      	adds	r6, #16
 80090ec:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80090f0:	3040      	adds	r0, #64	; 0x40
 80090f2:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 80090f6:	42ae      	cmp	r6, r5
 80090f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fc:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 8009100:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 8009104:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009108:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 800910c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009110:	ed50 3a1d 	vldr	s7, [r0, #-116]	; 0xffffff8c
 8009114:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8009118:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 800911c:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8009120:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8009124:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8009128:	eee2 7a83 	vfma.f32	s15, s5, s6
 800912c:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8009130:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8009134:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8009138:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800913c:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8009140:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8009144:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009148:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 800914c:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 8009150:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8009154:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009158:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800915c:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 8009160:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009164:	ed54 2a14 	vldr	s5, [r4, #-80]	; 0xffffffb0
 8009168:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800916c:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 8009170:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8009174:	ed54 4a12 	vldr	s9, [r4, #-72]	; 0xffffffb8
 8009178:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800917c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009180:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 8009184:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8009188:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800918c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009190:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009194:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009198:	eee0 7a81 	vfma.f32	s15, s1, s2
 800919c:	eee1 7a82 	vfma.f32	s15, s3, s4
 80091a0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80091a4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80091a8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80091ac:	eee5 7a87 	vfma.f32	s15, s11, s14
 80091b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80091b4:	db97      	blt.n	80090e6 <forward_conv2d+0xd4e>
 80091b6:	4451      	add	r1, sl
 80091b8:	4452      	add	r2, sl
 80091ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80091bc:	4283      	cmp	r3, r0
 80091be:	dd0f      	ble.n	80091e0 <forward_conv2d+0xe48>
 80091c0:	4604      	mov	r4, r0
 80091c2:	468c      	mov	ip, r1
 80091c4:	4616      	mov	r6, r2
 80091c6:	3401      	adds	r4, #1
 80091c8:	ecb6 7a01 	vldmia	r6!, {s14}
 80091cc:	ecfc 7a01 	vldmia	ip!, {s15}
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80091d6:	d1f6      	bne.n	80091c6 <forward_conv2d+0xe2e>
 80091d8:	1a18      	subs	r0, r3, r0
 80091da:	0080      	lsls	r0, r0, #2
 80091dc:	4402      	add	r2, r0
 80091de:	4401      	add	r1, r0
 80091e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80091e2:	f10e 0e01 	add.w	lr, lr, #1
 80091e6:	4449      	add	r1, r9
 80091e8:	4402      	add	r2, r0
 80091ea:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80091ee:	4570      	cmp	r0, lr
 80091f0:	f47f af71 	bne.w	80090d6 <forward_conv2d+0xd3e>
 80091f4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80091f8:	f10b 0b01 	add.w	fp, fp, #1
 80091fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fe:	4608      	mov	r0, r1
 8009200:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009204:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009208:	4410      	add	r0, r2
 800920a:	edc3 6a00 	vstr	s13, [r3]
 800920e:	440b      	add	r3, r1
 8009210:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8009214:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009218:	eba8 0802 	sub.w	r8, r8, r2
 800921c:	4608      	mov	r0, r1
 800921e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009220:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009226:	4418      	add	r0, r3
 8009228:	1acb      	subs	r3, r1, r3
 800922a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800922e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009232:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009236:	455b      	cmp	r3, fp
 8009238:	f47f af17 	bne.w	800906a <forward_conv2d+0xcd2>
 800923c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009240:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009246:	440a      	add	r2, r1
 8009248:	3301      	adds	r3, #1
 800924a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800924e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009252:	67bb      	str	r3, [r7, #120]	; 0x78
 8009254:	3204      	adds	r2, #4
 8009256:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800925a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800925e:	429a      	cmp	r2, r3
 8009260:	f47f aed5 	bne.w	800900e <forward_conv2d+0xc76>
 8009264:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8009268:	f8d7 d060 	ldr.w	sp, [r7, #96]	; 0x60
 800926c:	f7ff bb4c 	b.w	8008908 <forward_conv2d+0x570>
 8009270:	2000      	movs	r0, #0
 8009272:	e7a3      	b.n	80091bc <forward_conv2d+0xe24>
 8009274:	eef0 6a46 	vmov.f32	s13, s12
 8009278:	e7bc      	b.n	80091f4 <forward_conv2d+0xe5c>
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009282:	eba8 0303 	sub.w	r3, r8, r3
 8009286:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800928a:	e6f7      	b.n	800907c <forward_conv2d+0xce4>
 800928c:	eeb0 6a48 	vmov.f32	s12, s16
 8009290:	e6d1      	b.n	8009036 <forward_conv2d+0xc9e>
 8009292:	2300      	movs	r3, #0
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	deff      	udf	#255	; 0xff
 8009298:	2300      	movs	r3, #0
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	deff      	udf	#255	; 0xff
 800929e:	b178      	cbz	r0, 80092c0 <forward_conv2d+0xf28>
 80092a0:	6883      	ldr	r3, [r0, #8]
 80092a2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80092a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092aa:	2301      	movs	r3, #1
 80092ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092b4:	f7ff b8fc 	b.w	80084b0 <forward_conv2d+0x118>
 80092b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092bc:	f7ff b8dc 	b.w	8008478 <forward_conv2d+0xe0>
 80092c0:	2301      	movs	r3, #1
 80092c2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80092c6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80092ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092d2:	f7ff b8ed 	b.w	80084b0 <forward_conv2d+0x118>
 80092d6:	3218      	adds	r2, #24
 80092d8:	d007      	beq.n	80092ea <forward_conv2d+0xf52>
 80092da:	462b      	mov	r3, r5
 80092dc:	462c      	mov	r4, r5
 80092de:	462a      	mov	r2, r5
 80092e0:	f7ff b884 	b.w	80083ec <forward_conv2d+0x54>
 80092e4:	2300      	movs	r3, #0
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	deff      	udf	#255	; 0xff
 80092ea:	68d3      	ldr	r3, [r2, #12]
 80092ec:	deff      	udf	#255	; 0xff
 80092ee:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80092f2:	f7ff b86a 	b.w	80083ca <forward_conv2d+0x32>
 80092f6:	2300      	movs	r3, #0
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	deff      	udf	#255	; 0xff
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	deff      	udf	#255	; 0xff
 8009300:	2300      	movs	r3, #0
 8009302:	f7ff b872 	b.w	80083ea <forward_conv2d+0x52>
 8009306:	bf00      	nop

08009308 <forward_dense>:
 8009308:	6942      	ldr	r2, [r0, #20]
 800930a:	8813      	ldrh	r3, [r2, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 81c8 	beq.w	80096a2 <forward_dense+0x39a>
 8009312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009316:	ed2d 8b08 	vpush	{d8-d11}
 800931a:	6851      	ldr	r1, [r2, #4]
 800931c:	b091      	sub	sp, #68	; 0x44
 800931e:	684d      	ldr	r5, [r1, #4]
 8009320:	b105      	cbz	r5, 8009324 <forward_dense+0x1c>
 8009322:	682d      	ldr	r5, [r5, #0]
 8009324:	2b01      	cmp	r3, #1
 8009326:	f240 81b9 	bls.w	800969c <forward_dense+0x394>
 800932a:	690a      	ldr	r2, [r1, #16]
 800932c:	b102      	cbz	r2, 8009330 <forward_dense+0x28>
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	2b02      	cmp	r3, #2
 8009332:	f000 81b8 	beq.w	80096a6 <forward_dense+0x39e>
 8009336:	69cb      	ldr	r3, [r1, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 8209 	beq.w	8009750 <forward_dense+0x448>
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	9008      	str	r0, [sp, #32]
 8009342:	f111 0018 	adds.w	r0, r1, #24
 8009346:	f000 81dc 	beq.w	8009702 <forward_dense+0x3fa>
 800934a:	8b09      	ldrh	r1, [r1, #24]
 800934c:	2901      	cmp	r1, #1
 800934e:	f240 81fc 	bls.w	800974a <forward_dense+0x442>
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 81d7 	beq.w	8009706 <forward_dense+0x3fe>
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	9306      	str	r3, [sp, #24]
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	68d6      	ldr	r6, [r2, #12]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	68b0      	ldr	r0, [r6, #8]
 8009364:	681f      	ldr	r7, [r3, #0]
 8009366:	68f4      	ldr	r4, [r6, #12]
 8009368:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800936c:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8009370:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8009374:	fb04 f000 	mul.w	r0, r4, r0
 8009378:	fa4e f10c 	asr.w	r1, lr, ip
 800937c:	2f04      	cmp	r7, #4
 800937e:	9007      	str	r0, [sp, #28]
 8009380:	910b      	str	r1, [sp, #44]	; 0x2c
 8009382:	68e9      	ldr	r1, [r5, #12]
 8009384:	6870      	ldr	r0, [r6, #4]
 8009386:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800938a:	f000 81db 	beq.w	8009744 <forward_dense+0x43c>
 800938e:	2f08      	cmp	r7, #8
 8009390:	f000 81d8 	beq.w	8009744 <forward_dense+0x43c>
 8009394:	f04f 0a00 	mov.w	sl, #0
 8009398:	6992      	ldr	r2, [r2, #24]
 800939a:	0080      	lsls	r0, r0, #2
 800939c:	69a9      	ldr	r1, [r5, #24]
 800939e:	6894      	ldr	r4, [r2, #8]
 80093a0:	9a08      	ldr	r2, [sp, #32]
 80093a2:	9009      	str	r0, [sp, #36]	; 0x24
 80093a4:	1826      	adds	r6, r4, r0
 80093a6:	6952      	ldr	r2, [r2, #20]
 80093a8:	9404      	str	r4, [sp, #16]
 80093aa:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80093ae:	9a07      	ldr	r2, [sp, #28]
 80093b0:	688f      	ldr	r7, [r1, #8]
 80093b2:	2a00      	cmp	r2, #0
 80093b4:	f000 81c1 	beq.w	800973a <forward_dense+0x432>
 80093b8:	f1a8 0210 	sub.w	r2, r8, #16
 80093bc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80093c0:	689d      	ldr	r5, [r3, #8]
 80093c2:	0912      	lsrs	r2, r2, #4
 80093c4:	910a      	str	r1, [sp, #40]	; 0x28
 80093c6:	2100      	movs	r1, #0
 80093c8:	9b06      	ldr	r3, [sp, #24]
 80093ca:	3201      	adds	r2, #1
 80093cc:	eddf 2acf 	vldr	s5, [pc, #828]	; 800970c <forward_dense+0x404>
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	f008 010f 	and.w	r1, r8, #15
 80093d6:	0192      	lsls	r2, r2, #6
 80093d8:	910d      	str	r1, [sp, #52]	; 0x34
 80093da:	920c      	str	r2, [sp, #48]	; 0x30
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d042      	beq.n	8009466 <forward_dense+0x15e>
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	689c      	ldr	r4, [r3, #8]
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	f1ba 0f00 	cmp.w	sl, #0
 80093ea:	d041      	beq.n	8009470 <forward_dense+0x168>
 80093ec:	42b3      	cmp	r3, r6
 80093ee:	d229      	bcs.n	8009444 <forward_dense+0x13c>
 80093f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093f2:	469b      	mov	fp, r3
 80093f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80093f6:	2a04      	cmp	r2, #4
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	4633      	mov	r3, r6
 80093fc:	4646      	mov	r6, r8
 80093fe:	4698      	mov	r8, r3
 8009400:	f000 8154 	beq.w	80096ac <forward_dense+0x3a4>
 8009404:	2c00      	cmp	r4, #0
 8009406:	f000 8183 	beq.w	8009710 <forward_dense+0x408>
 800940a:	f8d4 c000 	ldr.w	ip, [r4]
 800940e:	463b      	mov	r3, r7
 8009410:	4629      	mov	r1, r5
 8009412:	9600      	str	r6, [sp, #0]
 8009414:	4652      	mov	r2, sl
 8009416:	9803      	ldr	r0, [sp, #12]
 8009418:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800941c:	f7fe fc7e 	bl	8007d1c <ai_dict8_dot_array_f32>
 8009420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009422:	3404      	adds	r4, #4
 8009424:	444d      	add	r5, r9
 8009426:	f84b 3b04 	str.w	r3, [fp], #4
 800942a:	45c3      	cmp	fp, r8
 800942c:	d3ea      	bcc.n	8009404 <forward_dense+0xfc>
 800942e:	4643      	mov	r3, r8
 8009430:	46b0      	mov	r8, r6
 8009432:	461e      	mov	r6, r3
 8009434:	9a04      	ldr	r2, [sp, #16]
 8009436:	43d3      	mvns	r3, r2
 8009438:	4433      	add	r3, r6
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	3304      	adds	r3, #4
 8009440:	18d3      	adds	r3, r2, r3
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009446:	9b05      	ldr	r3, [sp, #20]
 8009448:	4417      	add	r7, r2
 800944a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800944c:	3301      	adds	r3, #1
 800944e:	4416      	add	r6, r2
 8009450:	9a07      	ldr	r2, [sp, #28]
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	4293      	cmp	r3, r2
 8009456:	f000 8170 	beq.w	800973a <forward_dense+0x432>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	689d      	ldr	r5, [r3, #8]
 8009460:	9b06      	ldr	r3, [sp, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1bc      	bne.n	80093e0 <forward_dense+0xd8>
 8009466:	461c      	mov	r4, r3
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	f1ba 0f00 	cmp.w	sl, #0
 800946e:	d1bd      	bne.n	80093ec <forward_dense+0xe4>
 8009470:	42b3      	cmp	r3, r6
 8009472:	d2e7      	bcs.n	8009444 <forward_dense+0x13c>
 8009474:	4618      	mov	r0, r3
 8009476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009478:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800947c:	eb07 0c03 	add.w	ip, r7, r3
 8009480:	469e      	mov	lr, r3
 8009482:	2c00      	cmp	r4, #0
 8009484:	f000 80fe 	beq.w	8009684 <forward_dense+0x37c>
 8009488:	f1b8 0f0f 	cmp.w	r8, #15
 800948c:	ed94 6a00 	vldr	s12, [r4]
 8009490:	f104 0404 	add.w	r4, r4, #4
 8009494:	f240 80fc 	bls.w	8009690 <forward_dense+0x388>
 8009498:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800949c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80094a0:	4641      	mov	r1, r8
 80094a2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800970c <forward_dense+0x404>
 80094a6:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 80094aa:	3910      	subs	r1, #16
 80094ac:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80094b0:	3240      	adds	r2, #64	; 0x40
 80094b2:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80094b6:	290f      	cmp	r1, #15
 80094b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094bc:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 80094c0:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 80094c4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80094c8:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 80094cc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80094d0:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 80094d4:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 80094d8:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 80094dc:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 80094e0:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80094e4:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 80094e8:	eee2 7a03 	vfma.f32	s15, s4, s6
 80094ec:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 80094f0:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 80094f4:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 80094f8:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 80094fc:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8009500:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8009504:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009508:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800950c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8009510:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8009514:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8009518:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800951c:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8009520:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009524:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8009528:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800952c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8009530:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8009534:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8009538:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800953c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009540:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8009544:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8009548:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800954c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009550:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009554:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009558:	eee0 7a20 	vfma.f32	s15, s0, s1
 800955c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009560:	eee2 7a03 	vfma.f32	s15, s4, s6
 8009564:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009568:	eee4 7a85 	vfma.f32	s15, s9, s10
 800956c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009570:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009574:	d897      	bhi.n	80094a6 <forward_dense+0x19e>
 8009576:	eb05 010e 	add.w	r1, r5, lr
 800957a:	465b      	mov	r3, fp
 800957c:	4662      	mov	r2, ip
 800957e:	2b00      	cmp	r3, #0
 8009580:	d075      	beq.n	800966e <forward_dense+0x366>
 8009582:	ed91 7a00 	vldr	s14, [r1]
 8009586:	2b01      	cmp	r3, #1
 8009588:	edd2 7a00 	vldr	s15, [r2]
 800958c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009590:	d06d      	beq.n	800966e <forward_dense+0x366>
 8009592:	ed91 7a01 	vldr	s14, [r1, #4]
 8009596:	2b02      	cmp	r3, #2
 8009598:	edd2 7a01 	vldr	s15, [r2, #4]
 800959c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095a0:	d065      	beq.n	800966e <forward_dense+0x366>
 80095a2:	ed91 7a02 	vldr	s14, [r1, #8]
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	edd2 7a02 	vldr	s15, [r2, #8]
 80095ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095b0:	d05d      	beq.n	800966e <forward_dense+0x366>
 80095b2:	ed91 7a03 	vldr	s14, [r1, #12]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	edd2 7a03 	vldr	s15, [r2, #12]
 80095bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095c0:	d055      	beq.n	800966e <forward_dense+0x366>
 80095c2:	ed91 7a04 	vldr	s14, [r1, #16]
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	edd2 7a04 	vldr	s15, [r2, #16]
 80095cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095d0:	d04d      	beq.n	800966e <forward_dense+0x366>
 80095d2:	ed91 7a05 	vldr	s14, [r1, #20]
 80095d6:	2b06      	cmp	r3, #6
 80095d8:	edd2 7a05 	vldr	s15, [r2, #20]
 80095dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095e0:	d045      	beq.n	800966e <forward_dense+0x366>
 80095e2:	ed91 7a06 	vldr	s14, [r1, #24]
 80095e6:	2b07      	cmp	r3, #7
 80095e8:	edd2 7a06 	vldr	s15, [r2, #24]
 80095ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80095f0:	d03d      	beq.n	800966e <forward_dense+0x366>
 80095f2:	ed91 7a07 	vldr	s14, [r1, #28]
 80095f6:	2b08      	cmp	r3, #8
 80095f8:	edd2 7a07 	vldr	s15, [r2, #28]
 80095fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009600:	d035      	beq.n	800966e <forward_dense+0x366>
 8009602:	ed91 7a08 	vldr	s14, [r1, #32]
 8009606:	2b09      	cmp	r3, #9
 8009608:	edd2 7a08 	vldr	s15, [r2, #32]
 800960c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009610:	d02d      	beq.n	800966e <forward_dense+0x366>
 8009612:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8009616:	2b0a      	cmp	r3, #10
 8009618:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800961c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009620:	d025      	beq.n	800966e <forward_dense+0x366>
 8009622:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8009626:	2b0b      	cmp	r3, #11
 8009628:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800962c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009630:	d01d      	beq.n	800966e <forward_dense+0x366>
 8009632:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8009636:	2b0c      	cmp	r3, #12
 8009638:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800963c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009640:	d015      	beq.n	800966e <forward_dense+0x366>
 8009642:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8009646:	2b0d      	cmp	r3, #13
 8009648:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800964c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009650:	d00d      	beq.n	800966e <forward_dense+0x366>
 8009652:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8009656:	2b0e      	cmp	r3, #14
 8009658:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800965c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009660:	d005      	beq.n	800966e <forward_dense+0x366>
 8009662:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8009666:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800966a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800966e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009672:	444d      	add	r5, r9
 8009674:	ece0 6a01 	vstmia	r0!, {s13}
 8009678:	42b0      	cmp	r0, r6
 800967a:	f4bf aedb 	bcs.w	8009434 <forward_dense+0x12c>
 800967e:	2c00      	cmp	r4, #0
 8009680:	f47f af02 	bne.w	8009488 <forward_dense+0x180>
 8009684:	f1b8 0f0f 	cmp.w	r8, #15
 8009688:	eeb0 6a62 	vmov.f32	s12, s5
 800968c:	f63f af04 	bhi.w	8009498 <forward_dense+0x190>
 8009690:	4643      	mov	r3, r8
 8009692:	4629      	mov	r1, r5
 8009694:	463a      	mov	r2, r7
 8009696:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800970c <forward_dense+0x404>
 800969a:	e770      	b.n	800957e <forward_dense+0x276>
 800969c:	2300      	movs	r3, #0
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	deff      	udf	#255	; 0xff
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	deff      	udf	#255	; 0xff
 80096a6:	2300      	movs	r3, #0
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	deff      	udf	#255	; 0xff
 80096ac:	b1a4      	cbz	r4, 80096d8 <forward_dense+0x3d0>
 80096ae:	f8d4 c000 	ldr.w	ip, [r4]
 80096b2:	463b      	mov	r3, r7
 80096b4:	4629      	mov	r1, r5
 80096b6:	9600      	str	r6, [sp, #0]
 80096b8:	4652      	mov	r2, sl
 80096ba:	9803      	ldr	r0, [sp, #12]
 80096bc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80096c0:	f7fe fd5c 	bl	800817c <ai_dict4_dot_array_f32>
 80096c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096c6:	3404      	adds	r4, #4
 80096c8:	444d      	add	r5, r9
 80096ca:	f84b 3b04 	str.w	r3, [fp], #4
 80096ce:	45c3      	cmp	fp, r8
 80096d0:	f4bf aead 	bcs.w	800942e <forward_dense+0x126>
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d1ea      	bne.n	80096ae <forward_dense+0x3a6>
 80096d8:	4634      	mov	r4, r6
 80096da:	4646      	mov	r6, r8
 80096dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096e0:	463b      	mov	r3, r7
 80096e2:	4629      	mov	r1, r5
 80096e4:	9400      	str	r4, [sp, #0]
 80096e6:	4652      	mov	r2, sl
 80096e8:	4640      	mov	r0, r8
 80096ea:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 80096ee:	f7fe fd45 	bl	800817c <ai_dict4_dot_array_f32>
 80096f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096f4:	444d      	add	r5, r9
 80096f6:	f84b 3b04 	str.w	r3, [fp], #4
 80096fa:	45b3      	cmp	fp, r6
 80096fc:	d3f0      	bcc.n	80096e0 <forward_dense+0x3d8>
 80096fe:	46a0      	mov	r8, r4
 8009700:	e698      	b.n	8009434 <forward_dense+0x12c>
 8009702:	9006      	str	r0, [sp, #24]
 8009704:	e62a      	b.n	800935c <forward_dense+0x54>
 8009706:	9306      	str	r3, [sp, #24]
 8009708:	e628      	b.n	800935c <forward_dense+0x54>
 800970a:	bf00      	nop
 800970c:	00000000 	.word	0x00000000
 8009710:	4634      	mov	r4, r6
 8009712:	4646      	mov	r6, r8
 8009714:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009718:	463b      	mov	r3, r7
 800971a:	4629      	mov	r1, r5
 800971c:	9400      	str	r4, [sp, #0]
 800971e:	4652      	mov	r2, sl
 8009720:	4640      	mov	r0, r8
 8009722:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8009726:	f7fe faf9 	bl	8007d1c <ai_dict8_dot_array_f32>
 800972a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800972c:	444d      	add	r5, r9
 800972e:	f84b 3b04 	str.w	r3, [fp], #4
 8009732:	45b3      	cmp	fp, r6
 8009734:	d3f0      	bcc.n	8009718 <forward_dense+0x410>
 8009736:	46a0      	mov	r8, r4
 8009738:	e67c      	b.n	8009434 <forward_dense+0x12c>
 800973a:	b011      	add	sp, #68	; 0x44
 800973c:	ecbd 8b08 	vpop	{d8-d11}
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009744:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8009748:	e626      	b.n	8009398 <forward_dense+0x90>
 800974a:	2300      	movs	r3, #0
 800974c:	9306      	str	r3, [sp, #24]
 800974e:	e605      	b.n	800935c <forward_dense+0x54>
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	e5f6      	b.n	8009342 <forward_dense+0x3a>

08009754 <nl_func_relu_generic_array_f32>:
 8009754:	b470      	push	{r4, r5, r6}
 8009756:	edd3 6a02 	vldr	s13, [r3, #8]
 800975a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800975e:	6880      	ldr	r0, [r0, #8]
 8009760:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009764:	4414      	add	r4, r2
 8009766:	688d      	ldr	r5, [r1, #8]
 8009768:	00a4      	lsls	r4, r4, #2
 800976a:	ed93 7a00 	vldr	s14, [r3]
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	ed93 6a01 	vldr	s12, [r3, #4]
 8009776:	eb00 0204 	add.w	r2, r0, r4
 800977a:	442c      	add	r4, r5
 800977c:	d420      	bmi.n	80097c0 <nl_func_relu_generic_array_f32+0x6c>
 800977e:	42ac      	cmp	r4, r5
 8009780:	d33b      	bcc.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 8009782:	1d23      	adds	r3, r4, #4
 8009784:	3204      	adds	r2, #4
 8009786:	e010      	b.n	80097aa <nl_func_relu_generic_array_f32+0x56>
 8009788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800978c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	dd01      	ble.n	800979a <nl_func_relu_generic_array_f32+0x46>
 8009796:	ee65 7a86 	vmul.f32	s15, s11, s12
 800979a:	f1a3 0408 	sub.w	r4, r3, #8
 800979e:	ed62 7a01 	vstmdb	r2!, {s15}
 80097a2:	4603      	mov	r3, r0
 80097a4:	6888      	ldr	r0, [r1, #8]
 80097a6:	4284      	cmp	r4, r0
 80097a8:	d327      	bcc.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 80097aa:	ed53 7a01 	vldr	s15, [r3, #-4]
 80097ae:	1f18      	subs	r0, r3, #4
 80097b0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	dce6      	bgt.n	8009788 <nl_func_relu_generic_array_f32+0x34>
 80097ba:	eef0 7a66 	vmov.f32	s15, s13
 80097be:	e7ec      	b.n	800979a <nl_func_relu_generic_array_f32+0x46>
 80097c0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	d019      	beq.n	80097fe <nl_func_relu_generic_array_f32+0xaa>
 80097ca:	42ac      	cmp	r4, r5
 80097cc:	d315      	bcc.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	3204      	adds	r2, #4
 80097d2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80097d6:	1f18      	subs	r0, r3, #4
 80097d8:	f1a3 0508 	sub.w	r5, r3, #8
 80097dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097e0:	4603      	mov	r3, r0
 80097e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80097ee:	d51c      	bpl.n	800982a <nl_func_relu_generic_array_f32+0xd6>
 80097f0:	ed62 6a01 	vstmdb	r2!, {s13}
 80097f4:	6888      	ldr	r0, [r1, #8]
 80097f6:	42a8      	cmp	r0, r5
 80097f8:	d9eb      	bls.n	80097d2 <nl_func_relu_generic_array_f32+0x7e>
 80097fa:	bc70      	pop	{r4, r5, r6}
 80097fc:	4770      	bx	lr
 80097fe:	42ac      	cmp	r4, r5
 8009800:	d3fb      	bcc.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 8009802:	1d23      	adds	r3, r4, #4
 8009804:	3204      	adds	r2, #4
 8009806:	2600      	movs	r6, #0
 8009808:	ed53 7a01 	vldr	s15, [r3, #-4]
 800980c:	1f18      	subs	r0, r3, #4
 800980e:	f1a3 0508 	sub.w	r5, r3, #8
 8009812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009816:	4603      	mov	r3, r0
 8009818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981c:	d80b      	bhi.n	8009836 <nl_func_relu_generic_array_f32+0xe2>
 800981e:	ed62 7a01 	vstmdb	r2!, {s15}
 8009822:	6888      	ldr	r0, [r1, #8]
 8009824:	42a8      	cmp	r0, r5
 8009826:	d9ef      	bls.n	8009808 <nl_func_relu_generic_array_f32+0xb4>
 8009828:	e7e7      	b.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 800982a:	ed62 7a01 	vstmdb	r2!, {s15}
 800982e:	6888      	ldr	r0, [r1, #8]
 8009830:	42a8      	cmp	r0, r5
 8009832:	d9ce      	bls.n	80097d2 <nl_func_relu_generic_array_f32+0x7e>
 8009834:	e7e1      	b.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 8009836:	f842 6d04 	str.w	r6, [r2, #-4]!
 800983a:	6888      	ldr	r0, [r1, #8]
 800983c:	42a8      	cmp	r0, r5
 800983e:	d9e3      	bls.n	8009808 <nl_func_relu_generic_array_f32+0xb4>
 8009840:	e7db      	b.n	80097fa <nl_func_relu_generic_array_f32+0xa6>
 8009842:	bf00      	nop

08009844 <forward_sm>:
 8009844:	6942      	ldr	r2, [r0, #20]
 8009846:	8813      	ldrh	r3, [r2, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 8085 	beq.w	8009958 <forward_sm+0x114>
 800984e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009852:	ed2d 8b04 	vpush	{d8-d9}
 8009856:	6852      	ldr	r2, [r2, #4]
 8009858:	b085      	sub	sp, #20
 800985a:	6855      	ldr	r5, [r2, #4]
 800985c:	b105      	cbz	r5, 8009860 <forward_sm+0x1c>
 800985e:	682d      	ldr	r5, [r5, #0]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d971      	bls.n	8009948 <forward_sm+0x104>
 8009864:	6913      	ldr	r3, [r2, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d06c      	beq.n	8009944 <forward_sm+0x100>
 800986a:	681f      	ldr	r7, [r3, #0]
 800986c:	68e9      	ldr	r1, [r5, #12]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	68ab      	ldr	r3, [r5, #8]
 8009872:	6850      	ldr	r0, [r2, #4]
 8009874:	0a1b      	lsrs	r3, r3, #8
 8009876:	684a      	ldr	r2, [r1, #4]
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	d06f      	beq.n	800995c <forward_sm+0x118>
 800987c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009880:	2401      	movs	r4, #1
 8009882:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009886:	4299      	cmp	r1, r3
 8009888:	fb02 f404 	mul.w	r4, r2, r4
 800988c:	d1f9      	bne.n	8009882 <forward_sm+0x3e>
 800988e:	9901      	ldr	r1, [sp, #4]
 8009890:	69ae      	ldr	r6, [r5, #24]
 8009892:	1a63      	subs	r3, r4, r1
 8009894:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8009898:	1a24      	subs	r4, r4, r0
 800989a:	68b5      	ldr	r5, [r6, #8]
 800989c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80098a0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80098a4:	68f3      	ldr	r3, [r6, #12]
 80098a6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80098aa:	429d      	cmp	r5, r3
 80098ac:	d340      	bcc.n	8009930 <forward_sm+0xec>
 80098ae:	008b      	lsls	r3, r1, #2
 80098b0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80098b4:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	425b      	negs	r3, r3
 80098bc:	f1c8 0200 	rsb	r2, r8, #0
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	9203      	str	r2, [sp, #12]
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	60b5      	str	r5, [r6, #8]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	f8c9 4008 	str.w	r4, [r9, #8]
 80098ce:	68b2      	ldr	r2, [r6, #8]
 80098d0:	ed92 8a00 	vldr	s16, [r2]
 80098d4:	d93b      	bls.n	800994e <forward_sm+0x10a>
 80098d6:	9900      	ldr	r1, [sp, #0]
 80098d8:	1d13      	adds	r3, r2, #4
 80098da:	1857      	adds	r7, r2, r1
 80098dc:	ecf3 7a01 	vldmia	r3!, {s15}
 80098e0:	429f      	cmp	r7, r3
 80098e2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 80098e6:	d1f9      	bne.n	80098dc <forward_sm+0x98>
 80098e8:	4692      	mov	sl, r2
 80098ea:	46a3      	mov	fp, r4
 80098ec:	46a0      	mov	r8, r4
 80098ee:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8009964 <forward_sm+0x120>
 80098f2:	ecba 0a01 	vldmia	sl!, {s0}
 80098f6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80098fa:	f001 fa89 	bl	800ae10 <expf>
 80098fe:	4557      	cmp	r7, sl
 8009900:	eca8 0a01 	vstmia	r8!, {s0}
 8009904:	ee78 8a80 	vadd.f32	s17, s17, s0
 8009908:	d1f3      	bne.n	80098f2 <forward_sm+0xae>
 800990a:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800990e:	9b00      	ldr	r3, [sp, #0]
 8009910:	18e2      	adds	r2, r4, r3
 8009912:	eddb 7a00 	vldr	s15, [fp]
 8009916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991a:	eceb 7a01 	vstmia	fp!, {s15}
 800991e:	455a      	cmp	r2, fp
 8009920:	d1f7      	bne.n	8009912 <forward_sm+0xce>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	9a03      	ldr	r2, [sp, #12]
 8009926:	441d      	add	r5, r3
 8009928:	68f3      	ldr	r3, [r6, #12]
 800992a:	4414      	add	r4, r2
 800992c:	429d      	cmp	r5, r3
 800992e:	d2c9      	bcs.n	80098c4 <forward_sm+0x80>
 8009930:	60b3      	str	r3, [r6, #8]
 8009932:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009936:	f8c9 3008 	str.w	r3, [r9, #8]
 800993a:	b005      	add	sp, #20
 800993c:	ecbd 8b04 	vpop	{d8-d9}
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	deff      	udf	#255	; 0xff
 8009948:	2300      	movs	r3, #0
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	deff      	udf	#255	; 0xff
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0e7      	beq.n	8009922 <forward_sm+0xde>
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	18d7      	adds	r7, r2, r3
 8009956:	e7c7      	b.n	80098e8 <forward_sm+0xa4>
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	deff      	udf	#255	; 0xff
 800995c:	2401      	movs	r4, #1
 800995e:	4611      	mov	r1, r2
 8009960:	e796      	b.n	8009890 <forward_sm+0x4c>
 8009962:	bf00      	nop
 8009964:	00000000 	.word	0x00000000

08009968 <forward_mp>:
 8009968:	6943      	ldr	r3, [r0, #20]
 800996a:	881a      	ldrh	r2, [r3, #0]
 800996c:	2a00      	cmp	r2, #0
 800996e:	f000 80be 	beq.w	8009aee <forward_mp+0x186>
 8009972:	6859      	ldr	r1, [r3, #4]
 8009974:	684b      	ldr	r3, [r1, #4]
 8009976:	b103      	cbz	r3, 800997a <forward_mp+0x12>
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2a01      	cmp	r2, #1
 800997c:	f240 80b4 	bls.w	8009ae8 <forward_mp+0x180>
 8009980:	690a      	ldr	r2, [r1, #16]
 8009982:	2a00      	cmp	r2, #0
 8009984:	f000 80ae 	beq.w	8009ae4 <forward_mp+0x17c>
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800998e:	b093      	sub	sp, #76	; 0x4c
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	68dc      	ldr	r4, [r3, #12]
 8009994:	68d5      	ldr	r5, [r2, #12]
 8009996:	6996      	ldr	r6, [r2, #24]
 8009998:	680a      	ldr	r2, [r1, #0]
 800999a:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800999e:	4253      	negs	r3, r2
 80099a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80099a4:	68ef      	ldr	r7, [r5, #12]
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	68b3      	ldr	r3, [r6, #8]
 80099aa:	684e      	ldr	r6, [r1, #4]
 80099ac:	9308      	str	r3, [sp, #32]
 80099ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80099b2:	68ad      	ldr	r5, [r5, #8]
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80099b8:	9501      	str	r5, [sp, #4]
 80099ba:	960f      	str	r6, [sp, #60]	; 0x3c
 80099bc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 80099c0:	6984      	ldr	r4, [r0, #24]
 80099c2:	930c      	str	r3, [sp, #48]	; 0x30
 80099c4:	9403      	str	r4, [sp, #12]
 80099c6:	69c4      	ldr	r4, [r0, #28]
 80099c8:	940d      	str	r4, [sp, #52]	; 0x34
 80099ca:	6a04      	ldr	r4, [r0, #32]
 80099cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80099ce:	9404      	str	r4, [sp, #16]
 80099d0:	900e      	str	r0, [sp, #56]	; 0x38
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	d07f      	beq.n	8009ad6 <forward_mp+0x16e>
 80099d6:	188a      	adds	r2, r1, r2
 80099d8:	fb09 f303 	mul.w	r3, r9, r3
 80099dc:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80099e0:	9209      	str	r2, [sp, #36]	; 0x24
 80099e2:	4272      	negs	r2, r6
 80099e4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80099e8:	2300      	movs	r3, #0
 80099ea:	9211      	str	r2, [sp, #68]	; 0x44
 80099ec:	fb05 f20a 	mul.w	r2, r5, sl
 80099f0:	930a      	str	r3, [sp, #40]	; 0x28
 80099f2:	9210      	str	r2, [sp, #64]	; 0x40
 80099f4:	9a07      	ldr	r2, [sp, #28]
 80099f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099fe:	4281      	cmp	r1, r0
 8009a00:	bf94      	ite	ls
 8009a02:	1852      	addls	r2, r2, r1
 8009a04:	1812      	addhi	r2, r2, r0
 8009a06:	9306      	str	r3, [sp, #24]
 8009a08:	4694      	mov	ip, r2
 8009a0a:	9a01      	ldr	r2, [sp, #4]
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	d055      	beq.n	8009abc <forward_mp+0x154>
 8009a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	9d08      	ldr	r5, [sp, #32]
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
 8009a1c:	9302      	str	r3, [sp, #8]
 8009a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a20:	eb02 0e03 	add.w	lr, r2, r3
 8009a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	db57      	blt.n	8009adc <forward_mp+0x174>
 8009a2c:	9a02      	ldr	r2, [sp, #8]
 8009a2e:	18d4      	adds	r4, r2, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	9903      	ldr	r1, [sp, #12]
 8009a34:	4571      	cmp	r1, lr
 8009a36:	bf94      	ite	ls
 8009a38:	1852      	addls	r2, r2, r1
 8009a3a:	4472      	addhi	r2, lr
 8009a3c:	4617      	mov	r7, r2
 8009a3e:	9a05      	ldr	r2, [sp, #20]
 8009a40:	1aff      	subs	r7, r7, r3
 8009a42:	fb04 240a 	mla	r4, r4, sl, r2
 8009a46:	f1b9 0f00 	cmp.w	r9, #0
 8009a4a:	d009      	beq.n	8009a60 <forward_mp+0xf8>
 8009a4c:	4623      	mov	r3, r4
 8009a4e:	462a      	mov	r2, r5
 8009a50:	eb0a 0104 	add.w	r1, sl, r4
 8009a54:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	f842 0b04 	str.w	r0, [r2], #4
 8009a5e:	d1f9      	bne.n	8009a54 <forward_mp+0xec>
 8009a60:	9e06      	ldr	r6, [sp, #24]
 8009a62:	45b4      	cmp	ip, r6
 8009a64:	dd1b      	ble.n	8009a9e <forward_mp+0x136>
 8009a66:	fb0a f707 	mul.w	r7, sl, r7
 8009a6a:	4648      	mov	r0, r9
 8009a6c:	19e1      	adds	r1, r4, r7
 8009a6e:	428c      	cmp	r4, r1
 8009a70:	d210      	bcs.n	8009a94 <forward_mp+0x12c>
 8009a72:	b178      	cbz	r0, 8009a94 <forward_mp+0x12c>
 8009a74:	4623      	mov	r3, r4
 8009a76:	462a      	mov	r2, r5
 8009a78:	eb03 090a 	add.w	r9, r3, sl
 8009a7c:	ecb3 7a01 	vldmia	r3!, {s14}
 8009a80:	edd2 7a00 	vldr	s15, [r2]
 8009a84:	454b      	cmp	r3, r9
 8009a86:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8009a8a:	ece2 7a01 	vstmia	r2!, {s15}
 8009a8e:	d1f5      	bne.n	8009a7c <forward_mp+0x114>
 8009a90:	428b      	cmp	r3, r1
 8009a92:	d3f0      	bcc.n	8009a76 <forward_mp+0x10e>
 8009a94:	3601      	adds	r6, #1
 8009a96:	445c      	add	r4, fp
 8009a98:	45b4      	cmp	ip, r6
 8009a9a:	d1e7      	bne.n	8009a6c <forward_mp+0x104>
 8009a9c:	4681      	mov	r9, r0
 8009a9e:	9a04      	ldr	r2, [sp, #16]
 8009aa0:	f108 0801 	add.w	r8, r8, #1
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	4455      	add	r5, sl
 8009aa8:	ebae 0e02 	sub.w	lr, lr, r2
 8009aac:	4413      	add	r3, r2
 8009aae:	9a01      	ldr	r2, [sp, #4]
 8009ab0:	4542      	cmp	r2, r8
 8009ab2:	d1b8      	bne.n	8009a26 <forward_mp+0xbe>
 8009ab4:	9b08      	ldr	r3, [sp, #32]
 8009ab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ab8:	4413      	add	r3, r2
 8009aba:	9308      	str	r3, [sp, #32]
 8009abc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	1a89      	subs	r1, r1, r2
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	9109      	str	r1, [sp, #36]	; 0x24
 8009ac8:	9907      	ldr	r1, [sp, #28]
 8009aca:	930a      	str	r3, [sp, #40]	; 0x28
 8009acc:	4411      	add	r1, r2
 8009ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	9107      	str	r1, [sp, #28]
 8009ad4:	d18e      	bne.n	80099f4 <forward_mp+0x8c>
 8009ad6:	b013      	add	sp, #76	; 0x4c
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	9c02      	ldr	r4, [sp, #8]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9a00      	ldr	r2, [sp, #0]
 8009ae2:	e7a6      	b.n	8009a32 <forward_mp+0xca>
 8009ae4:	68d3      	ldr	r3, [r2, #12]
 8009ae6:	deff      	udf	#255	; 0xff
 8009ae8:	2300      	movs	r3, #0
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	deff      	udf	#255	; 0xff
 8009aee:	6853      	ldr	r3, [r2, #4]
 8009af0:	deff      	udf	#255	; 0xff
 8009af2:	bf00      	nop

08009af4 <forward_bn>:
 8009af4:	6943      	ldr	r3, [r0, #20]
 8009af6:	8819      	ldrh	r1, [r3, #0]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	d061      	beq.n	8009bc0 <forward_bn+0xcc>
 8009afc:	6858      	ldr	r0, [r3, #4]
 8009afe:	6843      	ldr	r3, [r0, #4]
 8009b00:	b103      	cbz	r3, 8009b04 <forward_bn+0x10>
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2901      	cmp	r1, #1
 8009b06:	d958      	bls.n	8009bba <forward_bn+0xc6>
 8009b08:	6902      	ldr	r2, [r0, #16]
 8009b0a:	b102      	cbz	r2, 8009b0e <forward_bn+0x1a>
 8009b0c:	6812      	ldr	r2, [r2, #0]
 8009b0e:	2902      	cmp	r1, #2
 8009b10:	d058      	beq.n	8009bc4 <forward_bn+0xd0>
 8009b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b16:	69c4      	ldr	r4, [r0, #28]
 8009b18:	2c00      	cmp	r4, #0
 8009b1a:	f000 8093 	beq.w	8009c44 <forward_bn+0x150>
 8009b1e:	6821      	ldr	r1, [r4, #0]
 8009b20:	f110 0f18 	cmn.w	r0, #24
 8009b24:	d051      	beq.n	8009bca <forward_bn+0xd6>
 8009b26:	8b00      	ldrh	r0, [r0, #24]
 8009b28:	2801      	cmp	r0, #1
 8009b2a:	d94e      	bls.n	8009bca <forward_bn+0xd6>
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	d04c      	beq.n	8009bca <forward_bn+0xd6>
 8009b30:	6996      	ldr	r6, [r2, #24]
 8009b32:	68d8      	ldr	r0, [r3, #12]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	698d      	ldr	r5, [r1, #24]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	68b1      	ldr	r1, [r6, #8]
 8009b3e:	6864      	ldr	r4, [r4, #4]
 8009b40:	68ae      	ldr	r6, [r5, #8]
 8009b42:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8009b46:	6845      	ldr	r5, [r0, #4]
 8009b48:	d074      	beq.n	8009c34 <forward_bn+0x140>
 8009b4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b4e:	2701      	movs	r7, #1
 8009b50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b54:	4298      	cmp	r0, r3
 8009b56:	fb02 f707 	mul.w	r7, r2, r7
 8009b5a:	d1f9      	bne.n	8009b50 <forward_bn+0x5c>
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	d042      	beq.n	8009be6 <forward_bn+0xf2>
 8009b60:	69a3      	ldr	r3, [r4, #24]
 8009b62:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8009b66:	b337      	cbz	r7, 8009bb6 <forward_bn+0xc2>
 8009b68:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	ebc5 7985 	rsb	r9, r5, r5, lsl #30
 8009b72:	eba1 010e 	sub.w	r1, r1, lr
 8009b76:	eb0a 040e 	add.w	r4, sl, lr
 8009b7a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009b7e:	eba1 0a0a 	sub.w	sl, r1, sl
 8009b82:	eb05 0c03 	add.w	ip, r5, r3
 8009b86:	459c      	cmp	ip, r3
 8009b88:	d911      	bls.n	8009bae <forward_bn+0xba>
 8009b8a:	eb09 0304 	add.w	r3, r9, r4
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4641      	mov	r1, r8
 8009b92:	eb0a 0204 	add.w	r2, sl, r4
 8009b96:	ecf3 6a01 	vldmia	r3!, {s13}
 8009b9a:	ecb0 7a01 	vldmia	r0!, {s14}
 8009b9e:	ecf1 7a01 	vldmia	r1!, {s15}
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ba8:	ece2 7a01 	vstmia	r2!, {s15}
 8009bac:	d1f3      	bne.n	8009b96 <forward_bn+0xa2>
 8009bae:	45bc      	cmp	ip, r7
 8009bb0:	4663      	mov	r3, ip
 8009bb2:	4474      	add	r4, lr
 8009bb4:	d3e5      	bcc.n	8009b82 <forward_bn+0x8e>
 8009bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bba:	2300      	movs	r3, #0
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	deff      	udf	#255	; 0xff
 8009bc0:	684b      	ldr	r3, [r1, #4]
 8009bc2:	deff      	udf	#255	; 0xff
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	deff      	udf	#255	; 0xff
 8009bca:	6995      	ldr	r5, [r2, #24]
 8009bcc:	68d8      	ldr	r0, [r3, #12]
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	698c      	ldr	r4, [r1, #24]
 8009bd4:	0a1b      	lsrs	r3, r3, #8
 8009bd6:	68a9      	ldr	r1, [r5, #8]
 8009bd8:	68a6      	ldr	r6, [r4, #8]
 8009bda:	6845      	ldr	r5, [r0, #4]
 8009bdc:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8009be0:	d02e      	beq.n	8009c40 <forward_bn+0x14c>
 8009be2:	2400      	movs	r4, #0
 8009be4:	e7b1      	b.n	8009b4a <forward_bn+0x56>
 8009be6:	2f00      	cmp	r7, #0
 8009be8:	d0e5      	beq.n	8009bb6 <forward_bn+0xc2>
 8009bea:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8009bee:	2300      	movs	r3, #0
 8009bf0:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 8009bf4:	eba1 0108 	sub.w	r1, r1, r8
 8009bf8:	eb0a 0008 	add.w	r0, sl, r8
 8009bfc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009c00:	eba1 0c0a 	sub.w	ip, r1, sl
 8009c04:	18ec      	adds	r4, r5, r3
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d90e      	bls.n	8009c28 <forward_bn+0x134>
 8009c0a:	eb0e 0300 	add.w	r3, lr, r0
 8009c0e:	4631      	mov	r1, r6
 8009c10:	eb00 020c 	add.w	r2, r0, ip
 8009c14:	ecf3 7a01 	vldmia	r3!, {s15}
 8009c18:	ecb1 7a01 	vldmia	r1!, {s14}
 8009c1c:	4298      	cmp	r0, r3
 8009c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c22:	ece2 7a01 	vstmia	r2!, {s15}
 8009c26:	d1f5      	bne.n	8009c14 <forward_bn+0x120>
 8009c28:	42bc      	cmp	r4, r7
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	4440      	add	r0, r8
 8009c2e:	d3e9      	bcc.n	8009c04 <forward_bn+0x110>
 8009c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c34:	b124      	cbz	r4, 8009c40 <forward_bn+0x14c>
 8009c36:	69a3      	ldr	r3, [r4, #24]
 8009c38:	2701      	movs	r7, #1
 8009c3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8009c3e:	e793      	b.n	8009b68 <forward_bn+0x74>
 8009c40:	2701      	movs	r7, #1
 8009c42:	e7d2      	b.n	8009bea <forward_bn+0xf6>
 8009c44:	4621      	mov	r1, r4
 8009c46:	e76b      	b.n	8009b20 <forward_bn+0x2c>

08009c48 <ai_check_custom_types>:
 8009c48:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <ai_check_custom_types+0x50>)
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	b118      	cbz	r0, 8009c5a <ai_check_custom_types+0x12>
 8009c52:	7803      	ldrb	r3, [r0, #0]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d002      	beq.n	8009c5e <ai_check_custom_types+0x16>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	b002      	add	sp, #8
 8009c5c:	4770      	bx	lr
 8009c5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <ai_check_custom_types+0x28>
 8009c66:	2001      	movs	r0, #1
 8009c68:	f080 0001 	eor.w	r0, r0, #1
 8009c6c:	b002      	add	sp, #8
 8009c6e:	4770      	bx	lr
 8009c70:	7842      	ldrb	r2, [r0, #1]
 8009c72:	3001      	adds	r0, #1
 8009c74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d1f4      	bne.n	8009c66 <ai_check_custom_types+0x1e>
 8009c7c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009c80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1ee      	bne.n	8009c66 <ai_check_custom_types+0x1e>
 8009c88:	7842      	ldrb	r2, [r0, #1]
 8009c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d1e9      	bne.n	8009c66 <ai_check_custom_types+0x1e>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e7e8      	b.n	8009c68 <ai_check_custom_types+0x20>
 8009c96:	bf00      	nop
 8009c98:	0800b598 	.word	0x0800b598

08009c9c <ai_layers_forward_all>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8009ca4:	b316      	cbz	r6, 8009cec <ai_layers_forward_all+0x50>
 8009ca6:	b1c5      	cbz	r5, 8009cda <ai_layers_forward_all+0x3e>
 8009ca8:	6545      	str	r5, [r0, #84]	; 0x54
 8009caa:	4629      	mov	r1, r5
 8009cac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009cae:	2001      	movs	r0, #1
 8009cb0:	47b0      	blx	r6
 8009cb2:	2700      	movs	r7, #0
 8009cb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009cb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009cb8:	2002      	movs	r0, #2
 8009cba:	47b0      	blx	r6
 8009cbc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009cbe:	692b      	ldr	r3, [r5, #16]
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	4798      	blx	r3
 8009cc4:	68eb      	ldr	r3, [r5, #12]
 8009cc6:	2003      	movs	r0, #3
 8009cc8:	429d      	cmp	r5, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	d006      	beq.n	8009cdc <ai_layers_forward_all+0x40>
 8009cce:	6563      	str	r3, [r4, #84]	; 0x54
 8009cd0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009cd2:	47b0      	blx	r6
 8009cd4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d1ed      	bne.n	8009cb6 <ai_layers_forward_all+0x1a>
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6567      	str	r7, [r4, #84]	; 0x54
 8009ce0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009ce2:	47b0      	blx	r6
 8009ce4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <ai_layers_forward_all+0x1a>
 8009cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	d0f4      	beq.n	8009cda <ai_layers_forward_all+0x3e>
 8009cf0:	6545      	str	r5, [r0, #84]	; 0x54
 8009cf2:	692b      	ldr	r3, [r5, #16]
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	4798      	blx	r3
 8009cf8:	68eb      	ldr	r3, [r5, #12]
 8009cfa:	42ab      	cmp	r3, r5
 8009cfc:	461d      	mov	r5, r3
 8009cfe:	d003      	beq.n	8009d08 <ai_layers_forward_all+0x6c>
 8009d00:	6563      	str	r3, [r4, #84]	; 0x54
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f5      	bne.n	8009cf2 <ai_layers_forward_all+0x56>
 8009d06:	e7e8      	b.n	8009cda <ai_layers_forward_all+0x3e>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	6563      	str	r3, [r4, #84]	; 0x54
 8009d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0e:	bf00      	nop

08009d10 <ai_array_to_buffer_fmt>:
 8009d10:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d01f      	beq.n	8009d58 <ai_array_to_buffer_fmt+0x48>
 8009d18:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8009d1c:	4a1b      	ldr	r2, [pc, #108]	; (8009d8c <ai_array_to_buffer_fmt+0x7c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00a      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d22:	dc0d      	bgt.n	8009d40 <ai_array_to_buffer_fmt+0x30>
 8009d24:	4a1a      	ldr	r2, [pc, #104]	; (8009d90 <ai_array_to_buffer_fmt+0x80>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d006      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d2a:	dd1d      	ble.n	8009d68 <ai_array_to_buffer_fmt+0x58>
 8009d2c:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <ai_array_to_buffer_fmt+0x84>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d002      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d32:	320f      	adds	r2, #15
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d10d      	bne.n	8009d54 <ai_array_to_buffer_fmt+0x44>
 8009d38:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009d3c:	4318      	orrs	r0, r3
 8009d3e:	4770      	bx	lr
 8009d40:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <ai_array_to_buffer_fmt+0x88>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d0f8      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d46:	dd18      	ble.n	8009d7a <ai_array_to_buffer_fmt+0x6a>
 8009d48:	4a14      	ldr	r2, [pc, #80]	; (8009d9c <ai_array_to_buffer_fmt+0x8c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d0f4      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d4e:	4a14      	ldr	r2, [pc, #80]	; (8009da0 <ai_array_to_buffer_fmt+0x90>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d0f1      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	e7ef      	b.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d58:	4b12      	ldr	r3, [pc, #72]	; (8009da4 <ai_array_to_buffer_fmt+0x94>)
 8009d5a:	4003      	ands	r3, r0
 8009d5c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d64:	4318      	orrs	r0, r3
 8009d66:	4770      	bx	lr
 8009d68:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d0e3      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d0df      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d78:	e7ec      	b.n	8009d54 <ai_array_to_buffer_fmt+0x44>
 8009d7a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d0da      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d82:	3207      	adds	r2, #7
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d0d7      	beq.n	8009d38 <ai_array_to_buffer_fmt+0x28>
 8009d88:	e7e4      	b.n	8009d54 <ai_array_to_buffer_fmt+0x44>
 8009d8a:	bf00      	nop
 8009d8c:	00840040 	.word	0x00840040
 8009d90:	00040447 	.word	0x00040447
 8009d94:	00040840 	.word	0x00040840
 8009d98:	00840840 	.word	0x00840840
 8009d9c:	0084084f 	.word	0x0084084f
 8009da0:	01821040 	.word	0x01821040
 8009da4:	00803fff 	.word	0x00803fff

08009da8 <ai_array_get_byte_size>:
 8009da8:	b1e1      	cbz	r1, 8009de4 <ai_array_get_byte_size+0x3c>
 8009daa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009dae:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009db2:	b410      	push	{r4}
 8009db4:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8009db8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009dbc:	4423      	add	r3, r4
 8009dbe:	2804      	cmp	r0, #4
 8009dc0:	fb01 f103 	mul.w	r1, r1, r3
 8009dc4:	f101 0107 	add.w	r1, r1, #7
 8009dc8:	f021 0107 	bic.w	r1, r1, #7
 8009dcc:	fa21 f102 	lsr.w	r1, r1, r2
 8009dd0:	d00a      	beq.n	8009de8 <ai_array_get_byte_size+0x40>
 8009dd2:	2808      	cmp	r0, #8
 8009dd4:	d101      	bne.n	8009dda <ai_array_get_byte_size+0x32>
 8009dd6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009dda:	3107      	adds	r1, #7
 8009ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de0:	08c8      	lsrs	r0, r1, #3
 8009de2:	4770      	bx	lr
 8009de4:	4608      	mov	r0, r1
 8009de6:	4770      	bx	lr
 8009de8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df0:	3107      	adds	r1, #7
 8009df2:	08c8      	lsrs	r0, r1, #3
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000ecc 	.word	0x20000ecc

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	4d0d      	ldr	r5, [pc, #52]	; (8009e3c <__libc_init_array+0x38>)
 8009e08:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0a:	1b64      	subs	r4, r4, r5
 8009e0c:	10a4      	asrs	r4, r4, #2
 8009e0e:	2600      	movs	r6, #0
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	4d0b      	ldr	r5, [pc, #44]	; (8009e44 <__libc_init_array+0x40>)
 8009e16:	4c0c      	ldr	r4, [pc, #48]	; (8009e48 <__libc_init_array+0x44>)
 8009e18:	f001 fac6 	bl	800b3a8 <_init>
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	2600      	movs	r6, #0
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0803120c 	.word	0x0803120c
 8009e40:	0803120c 	.word	0x0803120c
 8009e44:	0803120c 	.word	0x0803120c
 8009e48:	08031210 	.word	0x08031210

08009e4c <memcpy>:
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	4770      	bx	lr
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e62:	4291      	cmp	r1, r2
 8009e64:	d1f9      	bne.n	8009e5a <memcpy+0xe>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <memset>:
 8009e68:	4402      	add	r2, r0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d100      	bne.n	8009e72 <memset+0xa>
 8009e70:	4770      	bx	lr
 8009e72:	f803 1b01 	strb.w	r1, [r3], #1
 8009e76:	e7f9      	b.n	8009e6c <memset+0x4>

08009e78 <_free_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d048      	beq.n	8009f10 <_free_r+0x98>
 8009e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8a:	bfb8      	it	lt
 8009e8c:	18e4      	addlt	r4, r4, r3
 8009e8e:	f000 fc19 	bl	800a6c4 <__malloc_lock>
 8009e92:	4a20      	ldr	r2, [pc, #128]	; (8009f14 <_free_r+0x9c>)
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	4615      	mov	r5, r2
 8009e9a:	b933      	cbnz	r3, 8009eaa <_free_r+0x32>
 8009e9c:	6063      	str	r3, [r4, #4]
 8009e9e:	6014      	str	r4, [r2, #0]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea6:	f000 bc13 	b.w	800a6d0 <__malloc_unlock>
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	d90b      	bls.n	8009ec6 <_free_r+0x4e>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	1862      	adds	r2, r4, r1
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	bf04      	itt	eq
 8009eb6:	681a      	ldreq	r2, [r3, #0]
 8009eb8:	685b      	ldreq	r3, [r3, #4]
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	bf04      	itt	eq
 8009ebe:	1852      	addeq	r2, r2, r1
 8009ec0:	6022      	streq	r2, [r4, #0]
 8009ec2:	602c      	str	r4, [r5, #0]
 8009ec4:	e7ec      	b.n	8009ea0 <_free_r+0x28>
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	b10b      	cbz	r3, 8009ed0 <_free_r+0x58>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d9fa      	bls.n	8009ec6 <_free_r+0x4e>
 8009ed0:	6811      	ldr	r1, [r2, #0]
 8009ed2:	1855      	adds	r5, r2, r1
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d10b      	bne.n	8009ef0 <_free_r+0x78>
 8009ed8:	6824      	ldr	r4, [r4, #0]
 8009eda:	4421      	add	r1, r4
 8009edc:	1854      	adds	r4, r2, r1
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	d1dd      	bne.n	8009ea0 <_free_r+0x28>
 8009ee4:	681c      	ldr	r4, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	4421      	add	r1, r4
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	e7d7      	b.n	8009ea0 <_free_r+0x28>
 8009ef0:	d902      	bls.n	8009ef8 <_free_r+0x80>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	e7d3      	b.n	8009ea0 <_free_r+0x28>
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1961      	adds	r1, r4, r5
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf04      	itt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	bf04      	itt	eq
 8009f08:	1949      	addeq	r1, r1, r5
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	6054      	str	r4, [r2, #4]
 8009f0e:	e7c7      	b.n	8009ea0 <_free_r+0x28>
 8009f10:	b003      	add	sp, #12
 8009f12:	bd30      	pop	{r4, r5, pc}
 8009f14:	2000fa04 	.word	0x2000fa04

08009f18 <_malloc_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	1ccd      	adds	r5, r1, #3
 8009f1c:	f025 0503 	bic.w	r5, r5, #3
 8009f20:	3508      	adds	r5, #8
 8009f22:	2d0c      	cmp	r5, #12
 8009f24:	bf38      	it	cc
 8009f26:	250c      	movcc	r5, #12
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	db01      	blt.n	8009f32 <_malloc_r+0x1a>
 8009f2e:	42a9      	cmp	r1, r5
 8009f30:	d903      	bls.n	8009f3a <_malloc_r+0x22>
 8009f32:	230c      	movs	r3, #12
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	2000      	movs	r0, #0
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3a:	f000 fbc3 	bl	800a6c4 <__malloc_lock>
 8009f3e:	4921      	ldr	r1, [pc, #132]	; (8009fc4 <_malloc_r+0xac>)
 8009f40:	680a      	ldr	r2, [r1, #0]
 8009f42:	4614      	mov	r4, r2
 8009f44:	b99c      	cbnz	r4, 8009f6e <_malloc_r+0x56>
 8009f46:	4f20      	ldr	r7, [pc, #128]	; (8009fc8 <_malloc_r+0xb0>)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	b923      	cbnz	r3, 8009f56 <_malloc_r+0x3e>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f000 f8ca 	bl	800a0e8 <_sbrk_r>
 8009f54:	6038      	str	r0, [r7, #0]
 8009f56:	4629      	mov	r1, r5
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f8c5 	bl	800a0e8 <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d123      	bne.n	8009faa <_malloc_r+0x92>
 8009f62:	230c      	movs	r3, #12
 8009f64:	6033      	str	r3, [r6, #0]
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fbb2 	bl	800a6d0 <__malloc_unlock>
 8009f6c:	e7e3      	b.n	8009f36 <_malloc_r+0x1e>
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	1b5b      	subs	r3, r3, r5
 8009f72:	d417      	bmi.n	8009fa4 <_malloc_r+0x8c>
 8009f74:	2b0b      	cmp	r3, #11
 8009f76:	d903      	bls.n	8009f80 <_malloc_r+0x68>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	441c      	add	r4, r3
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	e004      	b.n	8009f8a <_malloc_r+0x72>
 8009f80:	6863      	ldr	r3, [r4, #4]
 8009f82:	42a2      	cmp	r2, r4
 8009f84:	bf0c      	ite	eq
 8009f86:	600b      	streq	r3, [r1, #0]
 8009f88:	6053      	strne	r3, [r2, #4]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 fba0 	bl	800a6d0 <__malloc_unlock>
 8009f90:	f104 000b 	add.w	r0, r4, #11
 8009f94:	1d23      	adds	r3, r4, #4
 8009f96:	f020 0007 	bic.w	r0, r0, #7
 8009f9a:	1ac2      	subs	r2, r0, r3
 8009f9c:	d0cc      	beq.n	8009f38 <_malloc_r+0x20>
 8009f9e:	1a1b      	subs	r3, r3, r0
 8009fa0:	50a3      	str	r3, [r4, r2]
 8009fa2:	e7c9      	b.n	8009f38 <_malloc_r+0x20>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	6864      	ldr	r4, [r4, #4]
 8009fa8:	e7cc      	b.n	8009f44 <_malloc_r+0x2c>
 8009faa:	1cc4      	adds	r4, r0, #3
 8009fac:	f024 0403 	bic.w	r4, r4, #3
 8009fb0:	42a0      	cmp	r0, r4
 8009fb2:	d0e3      	beq.n	8009f7c <_malloc_r+0x64>
 8009fb4:	1a21      	subs	r1, r4, r0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 f896 	bl	800a0e8 <_sbrk_r>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1dd      	bne.n	8009f7c <_malloc_r+0x64>
 8009fc0:	e7cf      	b.n	8009f62 <_malloc_r+0x4a>
 8009fc2:	bf00      	nop
 8009fc4:	2000fa04 	.word	0x2000fa04
 8009fc8:	2000fa08 	.word	0x2000fa08

08009fcc <iprintf>:
 8009fcc:	b40f      	push	{r0, r1, r2, r3}
 8009fce:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <iprintf+0x2c>)
 8009fd0:	b513      	push	{r0, r1, r4, lr}
 8009fd2:	681c      	ldr	r4, [r3, #0]
 8009fd4:	b124      	cbz	r4, 8009fe0 <iprintf+0x14>
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	b913      	cbnz	r3, 8009fe0 <iprintf+0x14>
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fa6e 	bl	800a4bc <__sinit>
 8009fe0:	ab05      	add	r3, sp, #20
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	68a1      	ldr	r1, [r4, #8]
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fba1 	bl	800a730 <_vfiprintf_r>
 8009fee:	b002      	add	sp, #8
 8009ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff4:	b004      	add	sp, #16
 8009ff6:	4770      	bx	lr
 8009ff8:	20000ecc 	.word	0x20000ecc

08009ffc <_puts_r>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	460e      	mov	r6, r1
 800a000:	4605      	mov	r5, r0
 800a002:	b118      	cbz	r0, 800a00c <_puts_r+0x10>
 800a004:	6983      	ldr	r3, [r0, #24]
 800a006:	b90b      	cbnz	r3, 800a00c <_puts_r+0x10>
 800a008:	f000 fa58 	bl	800a4bc <__sinit>
 800a00c:	69ab      	ldr	r3, [r5, #24]
 800a00e:	68ac      	ldr	r4, [r5, #8]
 800a010:	b913      	cbnz	r3, 800a018 <_puts_r+0x1c>
 800a012:	4628      	mov	r0, r5
 800a014:	f000 fa52 	bl	800a4bc <__sinit>
 800a018:	4b2c      	ldr	r3, [pc, #176]	; (800a0cc <_puts_r+0xd0>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d120      	bne.n	800a060 <_puts_r+0x64>
 800a01e:	686c      	ldr	r4, [r5, #4]
 800a020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a022:	07db      	lsls	r3, r3, #31
 800a024:	d405      	bmi.n	800a032 <_puts_r+0x36>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	0598      	lsls	r0, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_puts_r+0x36>
 800a02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02e:	f000 fae3 	bl	800a5f8 <__retarget_lock_acquire_recursive>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	0719      	lsls	r1, r3, #28
 800a036:	d51d      	bpl.n	800a074 <_puts_r+0x78>
 800a038:	6923      	ldr	r3, [r4, #16]
 800a03a:	b1db      	cbz	r3, 800a074 <_puts_r+0x78>
 800a03c:	3e01      	subs	r6, #1
 800a03e:	68a3      	ldr	r3, [r4, #8]
 800a040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a044:	3b01      	subs	r3, #1
 800a046:	60a3      	str	r3, [r4, #8]
 800a048:	bb39      	cbnz	r1, 800a09a <_puts_r+0x9e>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	da38      	bge.n	800a0c0 <_puts_r+0xc4>
 800a04e:	4622      	mov	r2, r4
 800a050:	210a      	movs	r1, #10
 800a052:	4628      	mov	r0, r5
 800a054:	f000 f858 	bl	800a108 <__swbuf_r>
 800a058:	3001      	adds	r0, #1
 800a05a:	d011      	beq.n	800a080 <_puts_r+0x84>
 800a05c:	250a      	movs	r5, #10
 800a05e:	e011      	b.n	800a084 <_puts_r+0x88>
 800a060:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <_puts_r+0xd4>)
 800a062:	429c      	cmp	r4, r3
 800a064:	d101      	bne.n	800a06a <_puts_r+0x6e>
 800a066:	68ac      	ldr	r4, [r5, #8]
 800a068:	e7da      	b.n	800a020 <_puts_r+0x24>
 800a06a:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <_puts_r+0xd8>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	bf08      	it	eq
 800a070:	68ec      	ldreq	r4, [r5, #12]
 800a072:	e7d5      	b.n	800a020 <_puts_r+0x24>
 800a074:	4621      	mov	r1, r4
 800a076:	4628      	mov	r0, r5
 800a078:	f000 f898 	bl	800a1ac <__swsetup_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d0dd      	beq.n	800a03c <_puts_r+0x40>
 800a080:	f04f 35ff 	mov.w	r5, #4294967295
 800a084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a086:	07da      	lsls	r2, r3, #31
 800a088:	d405      	bmi.n	800a096 <_puts_r+0x9a>
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	059b      	lsls	r3, r3, #22
 800a08e:	d402      	bmi.n	800a096 <_puts_r+0x9a>
 800a090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a092:	f000 fab2 	bl	800a5fa <__retarget_lock_release_recursive>
 800a096:	4628      	mov	r0, r5
 800a098:	bd70      	pop	{r4, r5, r6, pc}
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	da04      	bge.n	800a0a8 <_puts_r+0xac>
 800a09e:	69a2      	ldr	r2, [r4, #24]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	dc06      	bgt.n	800a0b2 <_puts_r+0xb6>
 800a0a4:	290a      	cmp	r1, #10
 800a0a6:	d004      	beq.n	800a0b2 <_puts_r+0xb6>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	7019      	strb	r1, [r3, #0]
 800a0b0:	e7c5      	b.n	800a03e <_puts_r+0x42>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f827 	bl	800a108 <__swbuf_r>
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d1bf      	bne.n	800a03e <_puts_r+0x42>
 800a0be:	e7df      	b.n	800a080 <_puts_r+0x84>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	250a      	movs	r5, #10
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	701d      	strb	r5, [r3, #0]
 800a0ca:	e7db      	b.n	800a084 <_puts_r+0x88>
 800a0cc:	08031178 	.word	0x08031178
 800a0d0:	08031198 	.word	0x08031198
 800a0d4:	08031158 	.word	0x08031158

0800a0d8 <puts>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <puts+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f7ff bf8d 	b.w	8009ffc <_puts_r>
 800a0e2:	bf00      	nop
 800a0e4:	20000ecc 	.word	0x20000ecc

0800a0e8 <_sbrk_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d06      	ldr	r5, [pc, #24]	; (800a104 <_sbrk_r+0x1c>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	f7f8 f892 	bl	800221c <_sbrk>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_sbrk_r+0x1a>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_sbrk_r+0x1a>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20022370 	.word	0x20022370

0800a108 <__swbuf_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	460e      	mov	r6, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	4605      	mov	r5, r0
 800a110:	b118      	cbz	r0, 800a11a <__swbuf_r+0x12>
 800a112:	6983      	ldr	r3, [r0, #24]
 800a114:	b90b      	cbnz	r3, 800a11a <__swbuf_r+0x12>
 800a116:	f000 f9d1 	bl	800a4bc <__sinit>
 800a11a:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <__swbuf_r+0x98>)
 800a11c:	429c      	cmp	r4, r3
 800a11e:	d12b      	bne.n	800a178 <__swbuf_r+0x70>
 800a120:	686c      	ldr	r4, [r5, #4]
 800a122:	69a3      	ldr	r3, [r4, #24]
 800a124:	60a3      	str	r3, [r4, #8]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	071a      	lsls	r2, r3, #28
 800a12a:	d52f      	bpl.n	800a18c <__swbuf_r+0x84>
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	b36b      	cbz	r3, 800a18c <__swbuf_r+0x84>
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	6820      	ldr	r0, [r4, #0]
 800a134:	1ac0      	subs	r0, r0, r3
 800a136:	6963      	ldr	r3, [r4, #20]
 800a138:	b2f6      	uxtb	r6, r6
 800a13a:	4283      	cmp	r3, r0
 800a13c:	4637      	mov	r7, r6
 800a13e:	dc04      	bgt.n	800a14a <__swbuf_r+0x42>
 800a140:	4621      	mov	r1, r4
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f926 	bl	800a394 <_fflush_r>
 800a148:	bb30      	cbnz	r0, 800a198 <__swbuf_r+0x90>
 800a14a:	68a3      	ldr	r3, [r4, #8]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	60a3      	str	r3, [r4, #8]
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	6022      	str	r2, [r4, #0]
 800a156:	701e      	strb	r6, [r3, #0]
 800a158:	6963      	ldr	r3, [r4, #20]
 800a15a:	3001      	adds	r0, #1
 800a15c:	4283      	cmp	r3, r0
 800a15e:	d004      	beq.n	800a16a <__swbuf_r+0x62>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	07db      	lsls	r3, r3, #31
 800a164:	d506      	bpl.n	800a174 <__swbuf_r+0x6c>
 800a166:	2e0a      	cmp	r6, #10
 800a168:	d104      	bne.n	800a174 <__swbuf_r+0x6c>
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 f911 	bl	800a394 <_fflush_r>
 800a172:	b988      	cbnz	r0, 800a198 <__swbuf_r+0x90>
 800a174:	4638      	mov	r0, r7
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a178:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <__swbuf_r+0x9c>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d101      	bne.n	800a182 <__swbuf_r+0x7a>
 800a17e:	68ac      	ldr	r4, [r5, #8]
 800a180:	e7cf      	b.n	800a122 <__swbuf_r+0x1a>
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <__swbuf_r+0xa0>)
 800a184:	429c      	cmp	r4, r3
 800a186:	bf08      	it	eq
 800a188:	68ec      	ldreq	r4, [r5, #12]
 800a18a:	e7ca      	b.n	800a122 <__swbuf_r+0x1a>
 800a18c:	4621      	mov	r1, r4
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 f80c 	bl	800a1ac <__swsetup_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	d0cb      	beq.n	800a130 <__swbuf_r+0x28>
 800a198:	f04f 37ff 	mov.w	r7, #4294967295
 800a19c:	e7ea      	b.n	800a174 <__swbuf_r+0x6c>
 800a19e:	bf00      	nop
 800a1a0:	08031178 	.word	0x08031178
 800a1a4:	08031198 	.word	0x08031198
 800a1a8:	08031158 	.word	0x08031158

0800a1ac <__swsetup_r>:
 800a1ac:	4b32      	ldr	r3, [pc, #200]	; (800a278 <__swsetup_r+0xcc>)
 800a1ae:	b570      	push	{r4, r5, r6, lr}
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	b125      	cbz	r5, 800a1c2 <__swsetup_r+0x16>
 800a1b8:	69ab      	ldr	r3, [r5, #24]
 800a1ba:	b913      	cbnz	r3, 800a1c2 <__swsetup_r+0x16>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f000 f97d 	bl	800a4bc <__sinit>
 800a1c2:	4b2e      	ldr	r3, [pc, #184]	; (800a27c <__swsetup_r+0xd0>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d10f      	bne.n	800a1e8 <__swsetup_r+0x3c>
 800a1c8:	686c      	ldr	r4, [r5, #4]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d0:	0719      	lsls	r1, r3, #28
 800a1d2:	d42c      	bmi.n	800a22e <__swsetup_r+0x82>
 800a1d4:	06dd      	lsls	r5, r3, #27
 800a1d6:	d411      	bmi.n	800a1fc <__swsetup_r+0x50>
 800a1d8:	2309      	movs	r3, #9
 800a1da:	6033      	str	r3, [r6, #0]
 800a1dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e6:	e03e      	b.n	800a266 <__swsetup_r+0xba>
 800a1e8:	4b25      	ldr	r3, [pc, #148]	; (800a280 <__swsetup_r+0xd4>)
 800a1ea:	429c      	cmp	r4, r3
 800a1ec:	d101      	bne.n	800a1f2 <__swsetup_r+0x46>
 800a1ee:	68ac      	ldr	r4, [r5, #8]
 800a1f0:	e7eb      	b.n	800a1ca <__swsetup_r+0x1e>
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <__swsetup_r+0xd8>)
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	bf08      	it	eq
 800a1f8:	68ec      	ldreq	r4, [r5, #12]
 800a1fa:	e7e6      	b.n	800a1ca <__swsetup_r+0x1e>
 800a1fc:	0758      	lsls	r0, r3, #29
 800a1fe:	d512      	bpl.n	800a226 <__swsetup_r+0x7a>
 800a200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a202:	b141      	cbz	r1, 800a216 <__swsetup_r+0x6a>
 800a204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a208:	4299      	cmp	r1, r3
 800a20a:	d002      	beq.n	800a212 <__swsetup_r+0x66>
 800a20c:	4630      	mov	r0, r6
 800a20e:	f7ff fe33 	bl	8009e78 <_free_r>
 800a212:	2300      	movs	r3, #0
 800a214:	6363      	str	r3, [r4, #52]	; 0x34
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	2300      	movs	r3, #0
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f043 0308 	orr.w	r3, r3, #8
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	b94b      	cbnz	r3, 800a246 <__swsetup_r+0x9a>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a23c:	d003      	beq.n	800a246 <__swsetup_r+0x9a>
 800a23e:	4621      	mov	r1, r4
 800a240:	4630      	mov	r0, r6
 800a242:	f000 f9ff 	bl	800a644 <__smakebuf_r>
 800a246:	89a0      	ldrh	r0, [r4, #12]
 800a248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a24c:	f010 0301 	ands.w	r3, r0, #1
 800a250:	d00a      	beq.n	800a268 <__swsetup_r+0xbc>
 800a252:	2300      	movs	r3, #0
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	6963      	ldr	r3, [r4, #20]
 800a258:	425b      	negs	r3, r3
 800a25a:	61a3      	str	r3, [r4, #24]
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	b943      	cbnz	r3, 800a272 <__swsetup_r+0xc6>
 800a260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a264:	d1ba      	bne.n	800a1dc <__swsetup_r+0x30>
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	0781      	lsls	r1, r0, #30
 800a26a:	bf58      	it	pl
 800a26c:	6963      	ldrpl	r3, [r4, #20]
 800a26e:	60a3      	str	r3, [r4, #8]
 800a270:	e7f4      	b.n	800a25c <__swsetup_r+0xb0>
 800a272:	2000      	movs	r0, #0
 800a274:	e7f7      	b.n	800a266 <__swsetup_r+0xba>
 800a276:	bf00      	nop
 800a278:	20000ecc 	.word	0x20000ecc
 800a27c:	08031178 	.word	0x08031178
 800a280:	08031198 	.word	0x08031198
 800a284:	08031158 	.word	0x08031158

0800a288 <__sflush_r>:
 800a288:	898a      	ldrh	r2, [r1, #12]
 800a28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	0710      	lsls	r0, r2, #28
 800a292:	460c      	mov	r4, r1
 800a294:	d458      	bmi.n	800a348 <__sflush_r+0xc0>
 800a296:	684b      	ldr	r3, [r1, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	dc05      	bgt.n	800a2a8 <__sflush_r+0x20>
 800a29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	dc02      	bgt.n	800a2a8 <__sflush_r+0x20>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	d0f9      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2b4:	682f      	ldr	r7, [r5, #0]
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	d032      	beq.n	800a320 <__sflush_r+0x98>
 800a2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	075a      	lsls	r2, r3, #29
 800a2c0:	d505      	bpl.n	800a2ce <__sflush_r+0x46>
 800a2c2:	6863      	ldr	r3, [r4, #4]
 800a2c4:	1ac0      	subs	r0, r0, r3
 800a2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2c8:	b10b      	cbz	r3, 800a2ce <__sflush_r+0x46>
 800a2ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2cc:	1ac0      	subs	r0, r0, r3
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2d4:	6a21      	ldr	r1, [r4, #32]
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b0      	blx	r6
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	d106      	bne.n	800a2ee <__sflush_r+0x66>
 800a2e0:	6829      	ldr	r1, [r5, #0]
 800a2e2:	291d      	cmp	r1, #29
 800a2e4:	d82c      	bhi.n	800a340 <__sflush_r+0xb8>
 800a2e6:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <__sflush_r+0x108>)
 800a2e8:	40ca      	lsrs	r2, r1
 800a2ea:	07d6      	lsls	r6, r2, #31
 800a2ec:	d528      	bpl.n	800a340 <__sflush_r+0xb8>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	6062      	str	r2, [r4, #4]
 800a2f2:	04d9      	lsls	r1, r3, #19
 800a2f4:	6922      	ldr	r2, [r4, #16]
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	d504      	bpl.n	800a304 <__sflush_r+0x7c>
 800a2fa:	1c42      	adds	r2, r0, #1
 800a2fc:	d101      	bne.n	800a302 <__sflush_r+0x7a>
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	b903      	cbnz	r3, 800a304 <__sflush_r+0x7c>
 800a302:	6560      	str	r0, [r4, #84]	; 0x54
 800a304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a306:	602f      	str	r7, [r5, #0]
 800a308:	2900      	cmp	r1, #0
 800a30a:	d0ca      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <__sflush_r+0x92>
 800a314:	4628      	mov	r0, r5
 800a316:	f7ff fdaf 	bl	8009e78 <_free_r>
 800a31a:	2000      	movs	r0, #0
 800a31c:	6360      	str	r0, [r4, #52]	; 0x34
 800a31e:	e7c1      	b.n	800a2a4 <__sflush_r+0x1c>
 800a320:	6a21      	ldr	r1, [r4, #32]
 800a322:	2301      	movs	r3, #1
 800a324:	4628      	mov	r0, r5
 800a326:	47b0      	blx	r6
 800a328:	1c41      	adds	r1, r0, #1
 800a32a:	d1c7      	bne.n	800a2bc <__sflush_r+0x34>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0c4      	beq.n	800a2bc <__sflush_r+0x34>
 800a332:	2b1d      	cmp	r3, #29
 800a334:	d001      	beq.n	800a33a <__sflush_r+0xb2>
 800a336:	2b16      	cmp	r3, #22
 800a338:	d101      	bne.n	800a33e <__sflush_r+0xb6>
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	e7b1      	b.n	800a2a2 <__sflush_r+0x1a>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	e7ad      	b.n	800a2a4 <__sflush_r+0x1c>
 800a348:	690f      	ldr	r7, [r1, #16]
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	d0a9      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a34e:	0793      	lsls	r3, r2, #30
 800a350:	680e      	ldr	r6, [r1, #0]
 800a352:	bf08      	it	eq
 800a354:	694b      	ldreq	r3, [r1, #20]
 800a356:	600f      	str	r7, [r1, #0]
 800a358:	bf18      	it	ne
 800a35a:	2300      	movne	r3, #0
 800a35c:	eba6 0807 	sub.w	r8, r6, r7
 800a360:	608b      	str	r3, [r1, #8]
 800a362:	f1b8 0f00 	cmp.w	r8, #0
 800a366:	dd9c      	ble.n	800a2a2 <__sflush_r+0x1a>
 800a368:	6a21      	ldr	r1, [r4, #32]
 800a36a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a36c:	4643      	mov	r3, r8
 800a36e:	463a      	mov	r2, r7
 800a370:	4628      	mov	r0, r5
 800a372:	47b0      	blx	r6
 800a374:	2800      	cmp	r0, #0
 800a376:	dc06      	bgt.n	800a386 <__sflush_r+0xfe>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	e78e      	b.n	800a2a4 <__sflush_r+0x1c>
 800a386:	4407      	add	r7, r0
 800a388:	eba8 0800 	sub.w	r8, r8, r0
 800a38c:	e7e9      	b.n	800a362 <__sflush_r+0xda>
 800a38e:	bf00      	nop
 800a390:	20400001 	.word	0x20400001

0800a394 <_fflush_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	690b      	ldr	r3, [r1, #16]
 800a398:	4605      	mov	r5, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b913      	cbnz	r3, 800a3a4 <_fflush_r+0x10>
 800a39e:	2500      	movs	r5, #0
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	b118      	cbz	r0, 800a3ae <_fflush_r+0x1a>
 800a3a6:	6983      	ldr	r3, [r0, #24]
 800a3a8:	b90b      	cbnz	r3, 800a3ae <_fflush_r+0x1a>
 800a3aa:	f000 f887 	bl	800a4bc <__sinit>
 800a3ae:	4b14      	ldr	r3, [pc, #80]	; (800a400 <_fflush_r+0x6c>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d11b      	bne.n	800a3ec <_fflush_r+0x58>
 800a3b4:	686c      	ldr	r4, [r5, #4]
 800a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0ef      	beq.n	800a39e <_fflush_r+0xa>
 800a3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3c0:	07d0      	lsls	r0, r2, #31
 800a3c2:	d404      	bmi.n	800a3ce <_fflush_r+0x3a>
 800a3c4:	0599      	lsls	r1, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_fflush_r+0x3a>
 800a3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ca:	f000 f915 	bl	800a5f8 <__retarget_lock_acquire_recursive>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f7ff ff59 	bl	800a288 <__sflush_r>
 800a3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d8:	07da      	lsls	r2, r3, #31
 800a3da:	4605      	mov	r5, r0
 800a3dc:	d4e0      	bmi.n	800a3a0 <_fflush_r+0xc>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	059b      	lsls	r3, r3, #22
 800a3e2:	d4dd      	bmi.n	800a3a0 <_fflush_r+0xc>
 800a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e6:	f000 f908 	bl	800a5fa <__retarget_lock_release_recursive>
 800a3ea:	e7d9      	b.n	800a3a0 <_fflush_r+0xc>
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <_fflush_r+0x70>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d101      	bne.n	800a3f6 <_fflush_r+0x62>
 800a3f2:	68ac      	ldr	r4, [r5, #8]
 800a3f4:	e7df      	b.n	800a3b6 <_fflush_r+0x22>
 800a3f6:	4b04      	ldr	r3, [pc, #16]	; (800a408 <_fflush_r+0x74>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	bf08      	it	eq
 800a3fc:	68ec      	ldreq	r4, [r5, #12]
 800a3fe:	e7da      	b.n	800a3b6 <_fflush_r+0x22>
 800a400:	08031178 	.word	0x08031178
 800a404:	08031198 	.word	0x08031198
 800a408:	08031158 	.word	0x08031158

0800a40c <std>:
 800a40c:	2300      	movs	r3, #0
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	e9c0 3300 	strd	r3, r3, [r0]
 800a416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	8181      	strh	r1, [r0, #12]
 800a41e:	6643      	str	r3, [r0, #100]	; 0x64
 800a420:	81c2      	strh	r2, [r0, #14]
 800a422:	6183      	str	r3, [r0, #24]
 800a424:	4619      	mov	r1, r3
 800a426:	2208      	movs	r2, #8
 800a428:	305c      	adds	r0, #92	; 0x5c
 800a42a:	f7ff fd1d 	bl	8009e68 <memset>
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x38>)
 800a430:	6263      	str	r3, [r4, #36]	; 0x24
 800a432:	4b05      	ldr	r3, [pc, #20]	; (800a448 <std+0x3c>)
 800a434:	62a3      	str	r3, [r4, #40]	; 0x28
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x40>)
 800a438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <std+0x44>)
 800a43c:	6224      	str	r4, [r4, #32]
 800a43e:	6323      	str	r3, [r4, #48]	; 0x30
 800a440:	bd10      	pop	{r4, pc}
 800a442:	bf00      	nop
 800a444:	0800acb9 	.word	0x0800acb9
 800a448:	0800acdb 	.word	0x0800acdb
 800a44c:	0800ad13 	.word	0x0800ad13
 800a450:	0800ad37 	.word	0x0800ad37

0800a454 <_cleanup_r>:
 800a454:	4901      	ldr	r1, [pc, #4]	; (800a45c <_cleanup_r+0x8>)
 800a456:	f000 b8af 	b.w	800a5b8 <_fwalk_reent>
 800a45a:	bf00      	nop
 800a45c:	0800a395 	.word	0x0800a395

0800a460 <__sfmoreglue>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	1e4a      	subs	r2, r1, #1
 800a464:	2568      	movs	r5, #104	; 0x68
 800a466:	4355      	muls	r5, r2
 800a468:	460e      	mov	r6, r1
 800a46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a46e:	f7ff fd53 	bl	8009f18 <_malloc_r>
 800a472:	4604      	mov	r4, r0
 800a474:	b140      	cbz	r0, 800a488 <__sfmoreglue+0x28>
 800a476:	2100      	movs	r1, #0
 800a478:	e9c0 1600 	strd	r1, r6, [r0]
 800a47c:	300c      	adds	r0, #12
 800a47e:	60a0      	str	r0, [r4, #8]
 800a480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a484:	f7ff fcf0 	bl	8009e68 <memset>
 800a488:	4620      	mov	r0, r4
 800a48a:	bd70      	pop	{r4, r5, r6, pc}

0800a48c <__sfp_lock_acquire>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sfp_lock_acquire+0x8>)
 800a48e:	f000 b8b3 	b.w	800a5f8 <__retarget_lock_acquire_recursive>
 800a492:	bf00      	nop
 800a494:	2002236c 	.word	0x2002236c

0800a498 <__sfp_lock_release>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__sfp_lock_release+0x8>)
 800a49a:	f000 b8ae 	b.w	800a5fa <__retarget_lock_release_recursive>
 800a49e:	bf00      	nop
 800a4a0:	2002236c 	.word	0x2002236c

0800a4a4 <__sinit_lock_acquire>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sinit_lock_acquire+0x8>)
 800a4a6:	f000 b8a7 	b.w	800a5f8 <__retarget_lock_acquire_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	20022367 	.word	0x20022367

0800a4b0 <__sinit_lock_release>:
 800a4b0:	4801      	ldr	r0, [pc, #4]	; (800a4b8 <__sinit_lock_release+0x8>)
 800a4b2:	f000 b8a2 	b.w	800a5fa <__retarget_lock_release_recursive>
 800a4b6:	bf00      	nop
 800a4b8:	20022367 	.word	0x20022367

0800a4bc <__sinit>:
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	4604      	mov	r4, r0
 800a4c0:	f7ff fff0 	bl	800a4a4 <__sinit_lock_acquire>
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	b11b      	cbz	r3, 800a4d0 <__sinit+0x14>
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4cc:	f7ff bff0 	b.w	800a4b0 <__sinit_lock_release>
 800a4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <__sinit+0x68>)
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <__sinit+0x6c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	bf04      	itt	eq
 800a4e2:	2301      	moveq	r3, #1
 800a4e4:	61a3      	streq	r3, [r4, #24]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 f820 	bl	800a52c <__sfp>
 800a4ec:	6060      	str	r0, [r4, #4]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f81c 	bl	800a52c <__sfp>
 800a4f4:	60a0      	str	r0, [r4, #8]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f818 	bl	800a52c <__sfp>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60e0      	str	r0, [r4, #12]
 800a500:	2104      	movs	r1, #4
 800a502:	6860      	ldr	r0, [r4, #4]
 800a504:	f7ff ff82 	bl	800a40c <std>
 800a508:	68a0      	ldr	r0, [r4, #8]
 800a50a:	2201      	movs	r2, #1
 800a50c:	2109      	movs	r1, #9
 800a50e:	f7ff ff7d 	bl	800a40c <std>
 800a512:	68e0      	ldr	r0, [r4, #12]
 800a514:	2202      	movs	r2, #2
 800a516:	2112      	movs	r1, #18
 800a518:	f7ff ff78 	bl	800a40c <std>
 800a51c:	2301      	movs	r3, #1
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	e7d2      	b.n	800a4c8 <__sinit+0xc>
 800a522:	bf00      	nop
 800a524:	08031154 	.word	0x08031154
 800a528:	0800a455 	.word	0x0800a455

0800a52c <__sfp>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	4607      	mov	r7, r0
 800a530:	f7ff ffac 	bl	800a48c <__sfp_lock_acquire>
 800a534:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <__sfp+0x84>)
 800a536:	681e      	ldr	r6, [r3, #0]
 800a538:	69b3      	ldr	r3, [r6, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__sfp+0x16>
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff ffbd 	bl	800a4bc <__sinit>
 800a542:	3648      	adds	r6, #72	; 0x48
 800a544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	d503      	bpl.n	800a554 <__sfp+0x28>
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	b30b      	cbz	r3, 800a594 <__sfp+0x68>
 800a550:	6836      	ldr	r6, [r6, #0]
 800a552:	e7f7      	b.n	800a544 <__sfp+0x18>
 800a554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a558:	b9d5      	cbnz	r5, 800a590 <__sfp+0x64>
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <__sfp+0x88>)
 800a55c:	60e3      	str	r3, [r4, #12]
 800a55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a562:	6665      	str	r5, [r4, #100]	; 0x64
 800a564:	f000 f847 	bl	800a5f6 <__retarget_lock_init_recursive>
 800a568:	f7ff ff96 	bl	800a498 <__sfp_lock_release>
 800a56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a574:	6025      	str	r5, [r4, #0]
 800a576:	61a5      	str	r5, [r4, #24]
 800a578:	2208      	movs	r2, #8
 800a57a:	4629      	mov	r1, r5
 800a57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a580:	f7ff fc72 	bl	8009e68 <memset>
 800a584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a58c:	4620      	mov	r0, r4
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a590:	3468      	adds	r4, #104	; 0x68
 800a592:	e7d9      	b.n	800a548 <__sfp+0x1c>
 800a594:	2104      	movs	r1, #4
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff ff62 	bl	800a460 <__sfmoreglue>
 800a59c:	4604      	mov	r4, r0
 800a59e:	6030      	str	r0, [r6, #0]
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1d5      	bne.n	800a550 <__sfp+0x24>
 800a5a4:	f7ff ff78 	bl	800a498 <__sfp_lock_release>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	e7ee      	b.n	800a58c <__sfp+0x60>
 800a5ae:	bf00      	nop
 800a5b0:	08031154 	.word	0x08031154
 800a5b4:	ffff0001 	.word	0xffff0001

0800a5b8 <_fwalk_reent>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4606      	mov	r6, r0
 800a5be:	4688      	mov	r8, r1
 800a5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5c4:	2700      	movs	r7, #0
 800a5c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5ca:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ce:	d505      	bpl.n	800a5dc <_fwalk_reent+0x24>
 800a5d0:	6824      	ldr	r4, [r4, #0]
 800a5d2:	2c00      	cmp	r4, #0
 800a5d4:	d1f7      	bne.n	800a5c6 <_fwalk_reent+0xe>
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5dc:	89ab      	ldrh	r3, [r5, #12]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d907      	bls.n	800a5f2 <_fwalk_reent+0x3a>
 800a5e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	d003      	beq.n	800a5f2 <_fwalk_reent+0x3a>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	47c0      	blx	r8
 800a5f0:	4307      	orrs	r7, r0
 800a5f2:	3568      	adds	r5, #104	; 0x68
 800a5f4:	e7e9      	b.n	800a5ca <_fwalk_reent+0x12>

0800a5f6 <__retarget_lock_init_recursive>:
 800a5f6:	4770      	bx	lr

0800a5f8 <__retarget_lock_acquire_recursive>:
 800a5f8:	4770      	bx	lr

0800a5fa <__retarget_lock_release_recursive>:
 800a5fa:	4770      	bx	lr

0800a5fc <__swhatbuf_r>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	460e      	mov	r6, r1
 800a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a604:	2900      	cmp	r1, #0
 800a606:	b096      	sub	sp, #88	; 0x58
 800a608:	4614      	mov	r4, r2
 800a60a:	461d      	mov	r5, r3
 800a60c:	da07      	bge.n	800a61e <__swhatbuf_r+0x22>
 800a60e:	2300      	movs	r3, #0
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	89b3      	ldrh	r3, [r6, #12]
 800a614:	061a      	lsls	r2, r3, #24
 800a616:	d410      	bmi.n	800a63a <__swhatbuf_r+0x3e>
 800a618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61c:	e00e      	b.n	800a63c <__swhatbuf_r+0x40>
 800a61e:	466a      	mov	r2, sp
 800a620:	f000 fbb0 	bl	800ad84 <_fstat_r>
 800a624:	2800      	cmp	r0, #0
 800a626:	dbf2      	blt.n	800a60e <__swhatbuf_r+0x12>
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a62e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a632:	425a      	negs	r2, r3
 800a634:	415a      	adcs	r2, r3
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	e7ee      	b.n	800a618 <__swhatbuf_r+0x1c>
 800a63a:	2340      	movs	r3, #64	; 0x40
 800a63c:	2000      	movs	r0, #0
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	b016      	add	sp, #88	; 0x58
 800a642:	bd70      	pop	{r4, r5, r6, pc}

0800a644 <__smakebuf_r>:
 800a644:	898b      	ldrh	r3, [r1, #12]
 800a646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a648:	079d      	lsls	r5, r3, #30
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	d507      	bpl.n	800a660 <__smakebuf_r+0x1c>
 800a650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2301      	movs	r3, #1
 800a65a:	6163      	str	r3, [r4, #20]
 800a65c:	b002      	add	sp, #8
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	ab01      	add	r3, sp, #4
 800a662:	466a      	mov	r2, sp
 800a664:	f7ff ffca 	bl	800a5fc <__swhatbuf_r>
 800a668:	9900      	ldr	r1, [sp, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff fc53 	bl	8009f18 <_malloc_r>
 800a672:	b948      	cbnz	r0, 800a688 <__smakebuf_r+0x44>
 800a674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d4ef      	bmi.n	800a65c <__smakebuf_r+0x18>
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	e7e3      	b.n	800a650 <__smakebuf_r+0xc>
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <__smakebuf_r+0x7c>)
 800a68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	6020      	str	r0, [r4, #0]
 800a690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	9b00      	ldr	r3, [sp, #0]
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	6120      	str	r0, [r4, #16]
 800a69e:	b15b      	cbz	r3, 800a6b8 <__smakebuf_r+0x74>
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 fb7f 	bl	800ada8 <_isatty_r>
 800a6aa:	b128      	cbz	r0, 800a6b8 <__smakebuf_r+0x74>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	89a0      	ldrh	r0, [r4, #12]
 800a6ba:	4305      	orrs	r5, r0
 800a6bc:	81a5      	strh	r5, [r4, #12]
 800a6be:	e7cd      	b.n	800a65c <__smakebuf_r+0x18>
 800a6c0:	0800a455 	.word	0x0800a455

0800a6c4 <__malloc_lock>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	; (800a6cc <__malloc_lock+0x8>)
 800a6c6:	f7ff bf97 	b.w	800a5f8 <__retarget_lock_acquire_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20022368 	.word	0x20022368

0800a6d0 <__malloc_unlock>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	; (800a6d8 <__malloc_unlock+0x8>)
 800a6d2:	f7ff bf92 	b.w	800a5fa <__retarget_lock_release_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	20022368 	.word	0x20022368

0800a6dc <__sfputc_r>:
 800a6dc:	6893      	ldr	r3, [r2, #8]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	b410      	push	{r4}
 800a6e4:	6093      	str	r3, [r2, #8]
 800a6e6:	da08      	bge.n	800a6fa <__sfputc_r+0x1e>
 800a6e8:	6994      	ldr	r4, [r2, #24]
 800a6ea:	42a3      	cmp	r3, r4
 800a6ec:	db01      	blt.n	800a6f2 <__sfputc_r+0x16>
 800a6ee:	290a      	cmp	r1, #10
 800a6f0:	d103      	bne.n	800a6fa <__sfputc_r+0x1e>
 800a6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f6:	f7ff bd07 	b.w	800a108 <__swbuf_r>
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	1c58      	adds	r0, r3, #1
 800a6fe:	6010      	str	r0, [r2, #0]
 800a700:	7019      	strb	r1, [r3, #0]
 800a702:	4608      	mov	r0, r1
 800a704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <__sfputs_r>:
 800a70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	4614      	mov	r4, r2
 800a712:	18d5      	adds	r5, r2, r3
 800a714:	42ac      	cmp	r4, r5
 800a716:	d101      	bne.n	800a71c <__sfputs_r+0x12>
 800a718:	2000      	movs	r0, #0
 800a71a:	e007      	b.n	800a72c <__sfputs_r+0x22>
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	463a      	mov	r2, r7
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ffda 	bl	800a6dc <__sfputc_r>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d1f3      	bne.n	800a714 <__sfputs_r+0xa>
 800a72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a730 <_vfiprintf_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	460d      	mov	r5, r1
 800a736:	b09d      	sub	sp, #116	; 0x74
 800a738:	4614      	mov	r4, r2
 800a73a:	4698      	mov	r8, r3
 800a73c:	4606      	mov	r6, r0
 800a73e:	b118      	cbz	r0, 800a748 <_vfiprintf_r+0x18>
 800a740:	6983      	ldr	r3, [r0, #24]
 800a742:	b90b      	cbnz	r3, 800a748 <_vfiprintf_r+0x18>
 800a744:	f7ff feba 	bl	800a4bc <__sinit>
 800a748:	4b89      	ldr	r3, [pc, #548]	; (800a970 <_vfiprintf_r+0x240>)
 800a74a:	429d      	cmp	r5, r3
 800a74c:	d11b      	bne.n	800a786 <_vfiprintf_r+0x56>
 800a74e:	6875      	ldr	r5, [r6, #4]
 800a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x32>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x32>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7ff ff4b 	bl	800a5f8 <__retarget_lock_acquire_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	071b      	lsls	r3, r3, #28
 800a766:	d501      	bpl.n	800a76c <_vfiprintf_r+0x3c>
 800a768:	692b      	ldr	r3, [r5, #16]
 800a76a:	b9eb      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x78>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff fd1c 	bl	800a1ac <__swsetup_r>
 800a774:	b1c0      	cbz	r0, 800a7a8 <_vfiprintf_r+0x78>
 800a776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a778:	07dc      	lsls	r4, r3, #31
 800a77a:	d50e      	bpl.n	800a79a <_vfiprintf_r+0x6a>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	b01d      	add	sp, #116	; 0x74
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	4b7b      	ldr	r3, [pc, #492]	; (800a974 <_vfiprintf_r+0x244>)
 800a788:	429d      	cmp	r5, r3
 800a78a:	d101      	bne.n	800a790 <_vfiprintf_r+0x60>
 800a78c:	68b5      	ldr	r5, [r6, #8]
 800a78e:	e7df      	b.n	800a750 <_vfiprintf_r+0x20>
 800a790:	4b79      	ldr	r3, [pc, #484]	; (800a978 <_vfiprintf_r+0x248>)
 800a792:	429d      	cmp	r5, r3
 800a794:	bf08      	it	eq
 800a796:	68f5      	ldreq	r5, [r6, #12]
 800a798:	e7da      	b.n	800a750 <_vfiprintf_r+0x20>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	0598      	lsls	r0, r3, #22
 800a79e:	d4ed      	bmi.n	800a77c <_vfiprintf_r+0x4c>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a2:	f7ff ff2a 	bl	800a5fa <__retarget_lock_release_recursive>
 800a7a6:	e7e9      	b.n	800a77c <_vfiprintf_r+0x4c>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b6:	2330      	movs	r3, #48	; 0x30
 800a7b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a97c <_vfiprintf_r+0x24c>
 800a7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c0:	f04f 0901 	mov.w	r9, #1
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	469a      	mov	sl, r3
 800a7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7cc:	b10a      	cbz	r2, 800a7d2 <_vfiprintf_r+0xa2>
 800a7ce:	2a25      	cmp	r2, #37	; 0x25
 800a7d0:	d1f9      	bne.n	800a7c6 <_vfiprintf_r+0x96>
 800a7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d6:	d00b      	beq.n	800a7f0 <_vfiprintf_r+0xc0>
 800a7d8:	465b      	mov	r3, fp
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f7ff ff93 	bl	800a70a <__sfputs_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	f000 80aa 	beq.w	800a93e <_vfiprintf_r+0x20e>
 800a7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ec:	445a      	add	r2, fp
 800a7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80a2 	beq.w	800a93e <_vfiprintf_r+0x20e>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a804:	f10a 0a01 	add.w	sl, sl, #1
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	9307      	str	r3, [sp, #28]
 800a80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a810:	931a      	str	r3, [sp, #104]	; 0x68
 800a812:	4654      	mov	r4, sl
 800a814:	2205      	movs	r2, #5
 800a816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81a:	4858      	ldr	r0, [pc, #352]	; (800a97c <_vfiprintf_r+0x24c>)
 800a81c:	f7f5 fd58 	bl	80002d0 <memchr>
 800a820:	9a04      	ldr	r2, [sp, #16]
 800a822:	b9d8      	cbnz	r0, 800a85c <_vfiprintf_r+0x12c>
 800a824:	06d1      	lsls	r1, r2, #27
 800a826:	bf44      	itt	mi
 800a828:	2320      	movmi	r3, #32
 800a82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82e:	0713      	lsls	r3, r2, #28
 800a830:	bf44      	itt	mi
 800a832:	232b      	movmi	r3, #43	; 0x2b
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a838:	f89a 3000 	ldrb.w	r3, [sl]
 800a83c:	2b2a      	cmp	r3, #42	; 0x2a
 800a83e:	d015      	beq.n	800a86c <_vfiprintf_r+0x13c>
 800a840:	9a07      	ldr	r2, [sp, #28]
 800a842:	4654      	mov	r4, sl
 800a844:	2000      	movs	r0, #0
 800a846:	f04f 0c0a 	mov.w	ip, #10
 800a84a:	4621      	mov	r1, r4
 800a84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a850:	3b30      	subs	r3, #48	; 0x30
 800a852:	2b09      	cmp	r3, #9
 800a854:	d94e      	bls.n	800a8f4 <_vfiprintf_r+0x1c4>
 800a856:	b1b0      	cbz	r0, 800a886 <_vfiprintf_r+0x156>
 800a858:	9207      	str	r2, [sp, #28]
 800a85a:	e014      	b.n	800a886 <_vfiprintf_r+0x156>
 800a85c:	eba0 0308 	sub.w	r3, r0, r8
 800a860:	fa09 f303 	lsl.w	r3, r9, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	46a2      	mov	sl, r4
 800a86a:	e7d2      	b.n	800a812 <_vfiprintf_r+0xe2>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	1d19      	adds	r1, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	9103      	str	r1, [sp, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	bfbb      	ittet	lt
 800a878:	425b      	neglt	r3, r3
 800a87a:	f042 0202 	orrlt.w	r2, r2, #2
 800a87e:	9307      	strge	r3, [sp, #28]
 800a880:	9307      	strlt	r3, [sp, #28]
 800a882:	bfb8      	it	lt
 800a884:	9204      	strlt	r2, [sp, #16]
 800a886:	7823      	ldrb	r3, [r4, #0]
 800a888:	2b2e      	cmp	r3, #46	; 0x2e
 800a88a:	d10c      	bne.n	800a8a6 <_vfiprintf_r+0x176>
 800a88c:	7863      	ldrb	r3, [r4, #1]
 800a88e:	2b2a      	cmp	r3, #42	; 0x2a
 800a890:	d135      	bne.n	800a8fe <_vfiprintf_r+0x1ce>
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	1d1a      	adds	r2, r3, #4
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	9203      	str	r2, [sp, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bfb8      	it	lt
 800a89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a2:	3402      	adds	r4, #2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a98c <_vfiprintf_r+0x25c>
 800a8aa:	7821      	ldrb	r1, [r4, #0]
 800a8ac:	2203      	movs	r2, #3
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f7f5 fd0e 	bl	80002d0 <memchr>
 800a8b4:	b140      	cbz	r0, 800a8c8 <_vfiprintf_r+0x198>
 800a8b6:	2340      	movs	r3, #64	; 0x40
 800a8b8:	eba0 000a 	sub.w	r0, r0, sl
 800a8bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	4303      	orrs	r3, r0
 800a8c4:	3401      	adds	r4, #1
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	482c      	ldr	r0, [pc, #176]	; (800a980 <_vfiprintf_r+0x250>)
 800a8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d2:	2206      	movs	r2, #6
 800a8d4:	f7f5 fcfc 	bl	80002d0 <memchr>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d03f      	beq.n	800a95c <_vfiprintf_r+0x22c>
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <_vfiprintf_r+0x254>)
 800a8de:	bb1b      	cbnz	r3, 800a928 <_vfiprintf_r+0x1f8>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	3307      	adds	r3, #7
 800a8e4:	f023 0307 	bic.w	r3, r3, #7
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ee:	443b      	add	r3, r7
 800a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f2:	e767      	b.n	800a7c4 <_vfiprintf_r+0x94>
 800a8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7a5      	b.n	800a84a <_vfiprintf_r+0x11a>
 800a8fe:	2300      	movs	r3, #0
 800a900:	3401      	adds	r4, #1
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	4619      	mov	r1, r3
 800a906:	f04f 0c0a 	mov.w	ip, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a910:	3a30      	subs	r2, #48	; 0x30
 800a912:	2a09      	cmp	r2, #9
 800a914:	d903      	bls.n	800a91e <_vfiprintf_r+0x1ee>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0c5      	beq.n	800a8a6 <_vfiprintf_r+0x176>
 800a91a:	9105      	str	r1, [sp, #20]
 800a91c:	e7c3      	b.n	800a8a6 <_vfiprintf_r+0x176>
 800a91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a922:	4604      	mov	r4, r0
 800a924:	2301      	movs	r3, #1
 800a926:	e7f0      	b.n	800a90a <_vfiprintf_r+0x1da>
 800a928:	ab03      	add	r3, sp, #12
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	462a      	mov	r2, r5
 800a92e:	4b16      	ldr	r3, [pc, #88]	; (800a988 <_vfiprintf_r+0x258>)
 800a930:	a904      	add	r1, sp, #16
 800a932:	4630      	mov	r0, r6
 800a934:	f3af 8000 	nop.w
 800a938:	4607      	mov	r7, r0
 800a93a:	1c78      	adds	r0, r7, #1
 800a93c:	d1d6      	bne.n	800a8ec <_vfiprintf_r+0x1bc>
 800a93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a940:	07d9      	lsls	r1, r3, #31
 800a942:	d405      	bmi.n	800a950 <_vfiprintf_r+0x220>
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	059a      	lsls	r2, r3, #22
 800a948:	d402      	bmi.n	800a950 <_vfiprintf_r+0x220>
 800a94a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a94c:	f7ff fe55 	bl	800a5fa <__retarget_lock_release_recursive>
 800a950:	89ab      	ldrh	r3, [r5, #12]
 800a952:	065b      	lsls	r3, r3, #25
 800a954:	f53f af12 	bmi.w	800a77c <_vfiprintf_r+0x4c>
 800a958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a95a:	e711      	b.n	800a780 <_vfiprintf_r+0x50>
 800a95c:	ab03      	add	r3, sp, #12
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	462a      	mov	r2, r5
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <_vfiprintf_r+0x258>)
 800a964:	a904      	add	r1, sp, #16
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f880 	bl	800aa6c <_printf_i>
 800a96c:	e7e4      	b.n	800a938 <_vfiprintf_r+0x208>
 800a96e:	bf00      	nop
 800a970:	08031178 	.word	0x08031178
 800a974:	08031198 	.word	0x08031198
 800a978:	08031158 	.word	0x08031158
 800a97c:	080311b8 	.word	0x080311b8
 800a980:	080311c2 	.word	0x080311c2
 800a984:	00000000 	.word	0x00000000
 800a988:	0800a70b 	.word	0x0800a70b
 800a98c:	080311be 	.word	0x080311be

0800a990 <_printf_common>:
 800a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a994:	4616      	mov	r6, r2
 800a996:	4699      	mov	r9, r3
 800a998:	688a      	ldr	r2, [r1, #8]
 800a99a:	690b      	ldr	r3, [r1, #16]
 800a99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	bfb8      	it	lt
 800a9a4:	4613      	movlt	r3, r2
 800a9a6:	6033      	str	r3, [r6, #0]
 800a9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	b10a      	cbz	r2, 800a9b6 <_printf_common+0x26>
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	6033      	str	r3, [r6, #0]
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	0699      	lsls	r1, r3, #26
 800a9ba:	bf42      	ittt	mi
 800a9bc:	6833      	ldrmi	r3, [r6, #0]
 800a9be:	3302      	addmi	r3, #2
 800a9c0:	6033      	strmi	r3, [r6, #0]
 800a9c2:	6825      	ldr	r5, [r4, #0]
 800a9c4:	f015 0506 	ands.w	r5, r5, #6
 800a9c8:	d106      	bne.n	800a9d8 <_printf_common+0x48>
 800a9ca:	f104 0a19 	add.w	sl, r4, #25
 800a9ce:	68e3      	ldr	r3, [r4, #12]
 800a9d0:	6832      	ldr	r2, [r6, #0]
 800a9d2:	1a9b      	subs	r3, r3, r2
 800a9d4:	42ab      	cmp	r3, r5
 800a9d6:	dc26      	bgt.n	800aa26 <_printf_common+0x96>
 800a9d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9dc:	1e13      	subs	r3, r2, #0
 800a9de:	6822      	ldr	r2, [r4, #0]
 800a9e0:	bf18      	it	ne
 800a9e2:	2301      	movne	r3, #1
 800a9e4:	0692      	lsls	r2, r2, #26
 800a9e6:	d42b      	bmi.n	800aa40 <_printf_common+0xb0>
 800a9e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	47c0      	blx	r8
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d01e      	beq.n	800aa34 <_printf_common+0xa4>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	68e5      	ldr	r5, [r4, #12]
 800a9fa:	6832      	ldr	r2, [r6, #0]
 800a9fc:	f003 0306 	and.w	r3, r3, #6
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	bf08      	it	eq
 800aa04:	1aad      	subeq	r5, r5, r2
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	6922      	ldr	r2, [r4, #16]
 800aa0a:	bf0c      	ite	eq
 800aa0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa10:	2500      	movne	r5, #0
 800aa12:	4293      	cmp	r3, r2
 800aa14:	bfc4      	itt	gt
 800aa16:	1a9b      	subgt	r3, r3, r2
 800aa18:	18ed      	addgt	r5, r5, r3
 800aa1a:	2600      	movs	r6, #0
 800aa1c:	341a      	adds	r4, #26
 800aa1e:	42b5      	cmp	r5, r6
 800aa20:	d11a      	bne.n	800aa58 <_printf_common+0xc8>
 800aa22:	2000      	movs	r0, #0
 800aa24:	e008      	b.n	800aa38 <_printf_common+0xa8>
 800aa26:	2301      	movs	r3, #1
 800aa28:	4652      	mov	r2, sl
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	47c0      	blx	r8
 800aa30:	3001      	adds	r0, #1
 800aa32:	d103      	bne.n	800aa3c <_printf_common+0xac>
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	e7c6      	b.n	800a9ce <_printf_common+0x3e>
 800aa40:	18e1      	adds	r1, r4, r3
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	2030      	movs	r0, #48	; 0x30
 800aa46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa4a:	4422      	add	r2, r4
 800aa4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa54:	3302      	adds	r3, #2
 800aa56:	e7c7      	b.n	800a9e8 <_printf_common+0x58>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	4638      	mov	r0, r7
 800aa60:	47c0      	blx	r8
 800aa62:	3001      	adds	r0, #1
 800aa64:	d0e6      	beq.n	800aa34 <_printf_common+0xa4>
 800aa66:	3601      	adds	r6, #1
 800aa68:	e7d9      	b.n	800aa1e <_printf_common+0x8e>
	...

0800aa6c <_printf_i>:
 800aa6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa70:	460c      	mov	r4, r1
 800aa72:	4691      	mov	r9, r2
 800aa74:	7e27      	ldrb	r7, [r4, #24]
 800aa76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa78:	2f78      	cmp	r7, #120	; 0x78
 800aa7a:	4680      	mov	r8, r0
 800aa7c:	469a      	mov	sl, r3
 800aa7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa82:	d807      	bhi.n	800aa94 <_printf_i+0x28>
 800aa84:	2f62      	cmp	r7, #98	; 0x62
 800aa86:	d80a      	bhi.n	800aa9e <_printf_i+0x32>
 800aa88:	2f00      	cmp	r7, #0
 800aa8a:	f000 80d8 	beq.w	800ac3e <_printf_i+0x1d2>
 800aa8e:	2f58      	cmp	r7, #88	; 0x58
 800aa90:	f000 80a3 	beq.w	800abda <_printf_i+0x16e>
 800aa94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa9c:	e03a      	b.n	800ab14 <_printf_i+0xa8>
 800aa9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaa2:	2b15      	cmp	r3, #21
 800aaa4:	d8f6      	bhi.n	800aa94 <_printf_i+0x28>
 800aaa6:	a001      	add	r0, pc, #4	; (adr r0, 800aaac <_printf_i+0x40>)
 800aaa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaac:	0800ab05 	.word	0x0800ab05
 800aab0:	0800ab19 	.word	0x0800ab19
 800aab4:	0800aa95 	.word	0x0800aa95
 800aab8:	0800aa95 	.word	0x0800aa95
 800aabc:	0800aa95 	.word	0x0800aa95
 800aac0:	0800aa95 	.word	0x0800aa95
 800aac4:	0800ab19 	.word	0x0800ab19
 800aac8:	0800aa95 	.word	0x0800aa95
 800aacc:	0800aa95 	.word	0x0800aa95
 800aad0:	0800aa95 	.word	0x0800aa95
 800aad4:	0800aa95 	.word	0x0800aa95
 800aad8:	0800ac25 	.word	0x0800ac25
 800aadc:	0800ab49 	.word	0x0800ab49
 800aae0:	0800ac07 	.word	0x0800ac07
 800aae4:	0800aa95 	.word	0x0800aa95
 800aae8:	0800aa95 	.word	0x0800aa95
 800aaec:	0800ac47 	.word	0x0800ac47
 800aaf0:	0800aa95 	.word	0x0800aa95
 800aaf4:	0800ab49 	.word	0x0800ab49
 800aaf8:	0800aa95 	.word	0x0800aa95
 800aafc:	0800aa95 	.word	0x0800aa95
 800ab00:	0800ac0f 	.word	0x0800ac0f
 800ab04:	680b      	ldr	r3, [r1, #0]
 800ab06:	1d1a      	adds	r2, r3, #4
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	600a      	str	r2, [r1, #0]
 800ab0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0a3      	b.n	800ac60 <_printf_i+0x1f4>
 800ab18:	6825      	ldr	r5, [r4, #0]
 800ab1a:	6808      	ldr	r0, [r1, #0]
 800ab1c:	062e      	lsls	r6, r5, #24
 800ab1e:	f100 0304 	add.w	r3, r0, #4
 800ab22:	d50a      	bpl.n	800ab3a <_printf_i+0xce>
 800ab24:	6805      	ldr	r5, [r0, #0]
 800ab26:	600b      	str	r3, [r1, #0]
 800ab28:	2d00      	cmp	r5, #0
 800ab2a:	da03      	bge.n	800ab34 <_printf_i+0xc8>
 800ab2c:	232d      	movs	r3, #45	; 0x2d
 800ab2e:	426d      	negs	r5, r5
 800ab30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab34:	485e      	ldr	r0, [pc, #376]	; (800acb0 <_printf_i+0x244>)
 800ab36:	230a      	movs	r3, #10
 800ab38:	e019      	b.n	800ab6e <_printf_i+0x102>
 800ab3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab3e:	6805      	ldr	r5, [r0, #0]
 800ab40:	600b      	str	r3, [r1, #0]
 800ab42:	bf18      	it	ne
 800ab44:	b22d      	sxthne	r5, r5
 800ab46:	e7ef      	b.n	800ab28 <_printf_i+0xbc>
 800ab48:	680b      	ldr	r3, [r1, #0]
 800ab4a:	6825      	ldr	r5, [r4, #0]
 800ab4c:	1d18      	adds	r0, r3, #4
 800ab4e:	6008      	str	r0, [r1, #0]
 800ab50:	0628      	lsls	r0, r5, #24
 800ab52:	d501      	bpl.n	800ab58 <_printf_i+0xec>
 800ab54:	681d      	ldr	r5, [r3, #0]
 800ab56:	e002      	b.n	800ab5e <_printf_i+0xf2>
 800ab58:	0669      	lsls	r1, r5, #25
 800ab5a:	d5fb      	bpl.n	800ab54 <_printf_i+0xe8>
 800ab5c:	881d      	ldrh	r5, [r3, #0]
 800ab5e:	4854      	ldr	r0, [pc, #336]	; (800acb0 <_printf_i+0x244>)
 800ab60:	2f6f      	cmp	r7, #111	; 0x6f
 800ab62:	bf0c      	ite	eq
 800ab64:	2308      	moveq	r3, #8
 800ab66:	230a      	movne	r3, #10
 800ab68:	2100      	movs	r1, #0
 800ab6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab6e:	6866      	ldr	r6, [r4, #4]
 800ab70:	60a6      	str	r6, [r4, #8]
 800ab72:	2e00      	cmp	r6, #0
 800ab74:	bfa2      	ittt	ge
 800ab76:	6821      	ldrge	r1, [r4, #0]
 800ab78:	f021 0104 	bicge.w	r1, r1, #4
 800ab7c:	6021      	strge	r1, [r4, #0]
 800ab7e:	b90d      	cbnz	r5, 800ab84 <_printf_i+0x118>
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	d04d      	beq.n	800ac20 <_printf_i+0x1b4>
 800ab84:	4616      	mov	r6, r2
 800ab86:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab8a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab8e:	5dc7      	ldrb	r7, [r0, r7]
 800ab90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab94:	462f      	mov	r7, r5
 800ab96:	42bb      	cmp	r3, r7
 800ab98:	460d      	mov	r5, r1
 800ab9a:	d9f4      	bls.n	800ab86 <_printf_i+0x11a>
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	d10b      	bne.n	800abb8 <_printf_i+0x14c>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	07df      	lsls	r7, r3, #31
 800aba4:	d508      	bpl.n	800abb8 <_printf_i+0x14c>
 800aba6:	6923      	ldr	r3, [r4, #16]
 800aba8:	6861      	ldr	r1, [r4, #4]
 800abaa:	4299      	cmp	r1, r3
 800abac:	bfde      	ittt	le
 800abae:	2330      	movle	r3, #48	; 0x30
 800abb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abb8:	1b92      	subs	r2, r2, r6
 800abba:	6122      	str	r2, [r4, #16]
 800abbc:	f8cd a000 	str.w	sl, [sp]
 800abc0:	464b      	mov	r3, r9
 800abc2:	aa03      	add	r2, sp, #12
 800abc4:	4621      	mov	r1, r4
 800abc6:	4640      	mov	r0, r8
 800abc8:	f7ff fee2 	bl	800a990 <_printf_common>
 800abcc:	3001      	adds	r0, #1
 800abce:	d14c      	bne.n	800ac6a <_printf_i+0x1fe>
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295
 800abd4:	b004      	add	sp, #16
 800abd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abda:	4835      	ldr	r0, [pc, #212]	; (800acb0 <_printf_i+0x244>)
 800abdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	680e      	ldr	r6, [r1, #0]
 800abe4:	061f      	lsls	r7, r3, #24
 800abe6:	f856 5b04 	ldr.w	r5, [r6], #4
 800abea:	600e      	str	r6, [r1, #0]
 800abec:	d514      	bpl.n	800ac18 <_printf_i+0x1ac>
 800abee:	07d9      	lsls	r1, r3, #31
 800abf0:	bf44      	itt	mi
 800abf2:	f043 0320 	orrmi.w	r3, r3, #32
 800abf6:	6023      	strmi	r3, [r4, #0]
 800abf8:	b91d      	cbnz	r5, 800ac02 <_printf_i+0x196>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	f023 0320 	bic.w	r3, r3, #32
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	2310      	movs	r3, #16
 800ac04:	e7b0      	b.n	800ab68 <_printf_i+0xfc>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	f043 0320 	orr.w	r3, r3, #32
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	2378      	movs	r3, #120	; 0x78
 800ac10:	4828      	ldr	r0, [pc, #160]	; (800acb4 <_printf_i+0x248>)
 800ac12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac16:	e7e3      	b.n	800abe0 <_printf_i+0x174>
 800ac18:	065e      	lsls	r6, r3, #25
 800ac1a:	bf48      	it	mi
 800ac1c:	b2ad      	uxthmi	r5, r5
 800ac1e:	e7e6      	b.n	800abee <_printf_i+0x182>
 800ac20:	4616      	mov	r6, r2
 800ac22:	e7bb      	b.n	800ab9c <_printf_i+0x130>
 800ac24:	680b      	ldr	r3, [r1, #0]
 800ac26:	6826      	ldr	r6, [r4, #0]
 800ac28:	6960      	ldr	r0, [r4, #20]
 800ac2a:	1d1d      	adds	r5, r3, #4
 800ac2c:	600d      	str	r5, [r1, #0]
 800ac2e:	0635      	lsls	r5, r6, #24
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	d501      	bpl.n	800ac38 <_printf_i+0x1cc>
 800ac34:	6018      	str	r0, [r3, #0]
 800ac36:	e002      	b.n	800ac3e <_printf_i+0x1d2>
 800ac38:	0671      	lsls	r1, r6, #25
 800ac3a:	d5fb      	bpl.n	800ac34 <_printf_i+0x1c8>
 800ac3c:	8018      	strh	r0, [r3, #0]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6123      	str	r3, [r4, #16]
 800ac42:	4616      	mov	r6, r2
 800ac44:	e7ba      	b.n	800abbc <_printf_i+0x150>
 800ac46:	680b      	ldr	r3, [r1, #0]
 800ac48:	1d1a      	adds	r2, r3, #4
 800ac4a:	600a      	str	r2, [r1, #0]
 800ac4c:	681e      	ldr	r6, [r3, #0]
 800ac4e:	6862      	ldr	r2, [r4, #4]
 800ac50:	2100      	movs	r1, #0
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7f5 fb3c 	bl	80002d0 <memchr>
 800ac58:	b108      	cbz	r0, 800ac5e <_printf_i+0x1f2>
 800ac5a:	1b80      	subs	r0, r0, r6
 800ac5c:	6060      	str	r0, [r4, #4]
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	2300      	movs	r3, #0
 800ac64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac68:	e7a8      	b.n	800abbc <_printf_i+0x150>
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4640      	mov	r0, r8
 800ac72:	47d0      	blx	sl
 800ac74:	3001      	adds	r0, #1
 800ac76:	d0ab      	beq.n	800abd0 <_printf_i+0x164>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	079b      	lsls	r3, r3, #30
 800ac7c:	d413      	bmi.n	800aca6 <_printf_i+0x23a>
 800ac7e:	68e0      	ldr	r0, [r4, #12]
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	4298      	cmp	r0, r3
 800ac84:	bfb8      	it	lt
 800ac86:	4618      	movlt	r0, r3
 800ac88:	e7a4      	b.n	800abd4 <_printf_i+0x168>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	4649      	mov	r1, r9
 800ac90:	4640      	mov	r0, r8
 800ac92:	47d0      	blx	sl
 800ac94:	3001      	adds	r0, #1
 800ac96:	d09b      	beq.n	800abd0 <_printf_i+0x164>
 800ac98:	3501      	adds	r5, #1
 800ac9a:	68e3      	ldr	r3, [r4, #12]
 800ac9c:	9903      	ldr	r1, [sp, #12]
 800ac9e:	1a5b      	subs	r3, r3, r1
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	dcf2      	bgt.n	800ac8a <_printf_i+0x21e>
 800aca4:	e7eb      	b.n	800ac7e <_printf_i+0x212>
 800aca6:	2500      	movs	r5, #0
 800aca8:	f104 0619 	add.w	r6, r4, #25
 800acac:	e7f5      	b.n	800ac9a <_printf_i+0x22e>
 800acae:	bf00      	nop
 800acb0:	080311c9 	.word	0x080311c9
 800acb4:	080311da 	.word	0x080311da

0800acb8 <__sread>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	460c      	mov	r4, r1
 800acbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc0:	f000 f894 	bl	800adec <_read_r>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	bfab      	itete	ge
 800acc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acca:	89a3      	ldrhlt	r3, [r4, #12]
 800accc:	181b      	addge	r3, r3, r0
 800acce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acd2:	bfac      	ite	ge
 800acd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800acd6:	81a3      	strhlt	r3, [r4, #12]
 800acd8:	bd10      	pop	{r4, pc}

0800acda <__swrite>:
 800acda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	461f      	mov	r7, r3
 800ace0:	898b      	ldrh	r3, [r1, #12]
 800ace2:	05db      	lsls	r3, r3, #23
 800ace4:	4605      	mov	r5, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	4616      	mov	r6, r2
 800acea:	d505      	bpl.n	800acf8 <__swrite+0x1e>
 800acec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf0:	2302      	movs	r3, #2
 800acf2:	2200      	movs	r2, #0
 800acf4:	f000 f868 	bl	800adc8 <_lseek_r>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	4632      	mov	r2, r6
 800ad06:	463b      	mov	r3, r7
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0e:	f000 b817 	b.w	800ad40 <_write_r>

0800ad12 <__sseek>:
 800ad12:	b510      	push	{r4, lr}
 800ad14:	460c      	mov	r4, r1
 800ad16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1a:	f000 f855 	bl	800adc8 <_lseek_r>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	bf15      	itete	ne
 800ad24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad2e:	81a3      	strheq	r3, [r4, #12]
 800ad30:	bf18      	it	ne
 800ad32:	81a3      	strhne	r3, [r4, #12]
 800ad34:	bd10      	pop	{r4, pc}

0800ad36 <__sclose>:
 800ad36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3a:	f000 b813 	b.w	800ad64 <_close_r>
	...

0800ad40 <_write_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	; (800ad60 <_write_r+0x20>)
 800ad44:	4604      	mov	r4, r0
 800ad46:	4608      	mov	r0, r1
 800ad48:	4611      	mov	r1, r2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	602a      	str	r2, [r5, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f7f7 fa13 	bl	800217a <_write>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_write_r+0x1e>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_write_r+0x1e>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20022370 	.word	0x20022370

0800ad64 <_close_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	; (800ad80 <_close_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f7 fa1f 	bl	80021b2 <_close>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_close_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_close_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20022370 	.word	0x20022370

0800ad84 <_fstat_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	; (800ada4 <_fstat_r+0x20>)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	4611      	mov	r1, r2
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	f7f7 fa1a 	bl	80021ca <_fstat>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	d102      	bne.n	800ada0 <_fstat_r+0x1c>
 800ad9a:	682b      	ldr	r3, [r5, #0]
 800ad9c:	b103      	cbz	r3, 800ada0 <_fstat_r+0x1c>
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	bd38      	pop	{r3, r4, r5, pc}
 800ada2:	bf00      	nop
 800ada4:	20022370 	.word	0x20022370

0800ada8 <_isatty_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d06      	ldr	r5, [pc, #24]	; (800adc4 <_isatty_r+0x1c>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	f7f7 fa19 	bl	80021ea <_isatty>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_isatty_r+0x1a>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_isatty_r+0x1a>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	20022370 	.word	0x20022370

0800adc8 <_lseek_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	; (800ade8 <_lseek_r+0x20>)
 800adcc:	4604      	mov	r4, r0
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	2200      	movs	r2, #0
 800add4:	602a      	str	r2, [r5, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f7f7 fa12 	bl	8002200 <_lseek>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_lseek_r+0x1e>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_lseek_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20022370 	.word	0x20022370

0800adec <_read_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_read_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f7 f9a0 	bl	8002140 <_read>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_read_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_read_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20022370 	.word	0x20022370

0800ae10 <expf>:
 800ae10:	b508      	push	{r3, lr}
 800ae12:	ed2d 8b02 	vpush	{d8}
 800ae16:	eef0 8a40 	vmov.f32	s17, s0
 800ae1a:	f000 f893 	bl	800af44 <__ieee754_expf>
 800ae1e:	4b16      	ldr	r3, [pc, #88]	; (800ae78 <expf+0x68>)
 800ae20:	f993 3000 	ldrsb.w	r3, [r3]
 800ae24:	3301      	adds	r3, #1
 800ae26:	eeb0 8a40 	vmov.f32	s16, s0
 800ae2a:	d011      	beq.n	800ae50 <expf+0x40>
 800ae2c:	eeb0 0a68 	vmov.f32	s0, s17
 800ae30:	f000 faa7 	bl	800b382 <finitef>
 800ae34:	b160      	cbz	r0, 800ae50 <expf+0x40>
 800ae36:	eddf 7a11 	vldr	s15, [pc, #68]	; 800ae7c <expf+0x6c>
 800ae3a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae42:	dd0a      	ble.n	800ae5a <expf+0x4a>
 800ae44:	f7fe ffd8 	bl	8009df8 <__errno>
 800ae48:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800ae80 <expf+0x70>
 800ae4c:	2322      	movs	r3, #34	; 0x22
 800ae4e:	6003      	str	r3, [r0, #0]
 800ae50:	eeb0 0a48 	vmov.f32	s0, s16
 800ae54:	ecbd 8b02 	vpop	{d8}
 800ae58:	bd08      	pop	{r3, pc}
 800ae5a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ae84 <expf+0x74>
 800ae5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae66:	d5f3      	bpl.n	800ae50 <expf+0x40>
 800ae68:	f7fe ffc6 	bl	8009df8 <__errno>
 800ae6c:	2322      	movs	r3, #34	; 0x22
 800ae6e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800ae88 <expf+0x78>
 800ae72:	6003      	str	r3, [r0, #0]
 800ae74:	e7ec      	b.n	800ae50 <expf+0x40>
 800ae76:	bf00      	nop
 800ae78:	20000f30 	.word	0x20000f30
 800ae7c:	42b17180 	.word	0x42b17180
 800ae80:	7f800000 	.word	0x7f800000
 800ae84:	c2cff1b5 	.word	0xc2cff1b5
 800ae88:	00000000 	.word	0x00000000

0800ae8c <log10f>:
 800ae8c:	b508      	push	{r3, lr}
 800ae8e:	ed2d 8b02 	vpush	{d8}
 800ae92:	eeb0 8a40 	vmov.f32	s16, s0
 800ae96:	f000 fa19 	bl	800b2cc <__ieee754_log10f>
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <log10f+0x60>)
 800ae9c:	f993 3000 	ldrsb.w	r3, [r3]
 800aea0:	3301      	adds	r3, #1
 800aea2:	d014      	beq.n	800aece <log10f+0x42>
 800aea4:	eeb4 8a48 	vcmp.f32	s16, s16
 800aea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeac:	d60f      	bvs.n	800aece <log10f+0x42>
 800aeae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	d80a      	bhi.n	800aece <log10f+0x42>
 800aeb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec0:	d108      	bne.n	800aed4 <log10f+0x48>
 800aec2:	f7fe ff99 	bl	8009df8 <__errno>
 800aec6:	2322      	movs	r3, #34	; 0x22
 800aec8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800aef0 <log10f+0x64>
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	ecbd 8b02 	vpop	{d8}
 800aed2:	bd08      	pop	{r3, pc}
 800aed4:	f7fe ff90 	bl	8009df8 <__errno>
 800aed8:	ecbd 8b02 	vpop	{d8}
 800aedc:	2321      	movs	r3, #33	; 0x21
 800aede:	6003      	str	r3, [r0, #0]
 800aee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aee4:	4803      	ldr	r0, [pc, #12]	; (800aef4 <log10f+0x68>)
 800aee6:	f000 ba59 	b.w	800b39c <nanf>
 800aeea:	bf00      	nop
 800aeec:	20000f30 	.word	0x20000f30
 800aef0:	ff800000 	.word	0xff800000
 800aef4:	080311bd 	.word	0x080311bd

0800aef8 <sqrtf>:
 800aef8:	b508      	push	{r3, lr}
 800aefa:	ed2d 8b02 	vpush	{d8}
 800aefe:	eeb0 8a40 	vmov.f32	s16, s0
 800af02:	f000 fa3b 	bl	800b37c <__ieee754_sqrtf>
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <sqrtf+0x44>)
 800af08:	f993 3000 	ldrsb.w	r3, [r3]
 800af0c:	3301      	adds	r3, #1
 800af0e:	d011      	beq.n	800af34 <sqrtf+0x3c>
 800af10:	eeb4 8a48 	vcmp.f32	s16, s16
 800af14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af18:	d60c      	bvs.n	800af34 <sqrtf+0x3c>
 800af1a:	eddf 8a09 	vldr	s17, [pc, #36]	; 800af40 <sqrtf+0x48>
 800af1e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800af22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af26:	d505      	bpl.n	800af34 <sqrtf+0x3c>
 800af28:	f7fe ff66 	bl	8009df8 <__errno>
 800af2c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800af30:	2321      	movs	r3, #33	; 0x21
 800af32:	6003      	str	r3, [r0, #0]
 800af34:	ecbd 8b02 	vpop	{d8}
 800af38:	bd08      	pop	{r3, pc}
 800af3a:	bf00      	nop
 800af3c:	20000f30 	.word	0x20000f30
 800af40:	00000000 	.word	0x00000000

0800af44 <__ieee754_expf>:
 800af44:	ee10 2a10 	vmov	r2, s0
 800af48:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800af4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800af50:	d902      	bls.n	800af58 <__ieee754_expf+0x14>
 800af52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af56:	4770      	bx	lr
 800af58:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800af5c:	d106      	bne.n	800af6c <__ieee754_expf+0x28>
 800af5e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800b0a4 <__ieee754_expf+0x160>
 800af62:	2b00      	cmp	r3, #0
 800af64:	bf18      	it	ne
 800af66:	eeb0 0a67 	vmovne.f32	s0, s15
 800af6a:	4770      	bx	lr
 800af6c:	484e      	ldr	r0, [pc, #312]	; (800b0a8 <__ieee754_expf+0x164>)
 800af6e:	4282      	cmp	r2, r0
 800af70:	dd04      	ble.n	800af7c <__ieee754_expf+0x38>
 800af72:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b0ac <__ieee754_expf+0x168>
 800af76:	ee20 0a00 	vmul.f32	s0, s0, s0
 800af7a:	4770      	bx	lr
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	da03      	bge.n	800af88 <__ieee754_expf+0x44>
 800af80:	4a4b      	ldr	r2, [pc, #300]	; (800b0b0 <__ieee754_expf+0x16c>)
 800af82:	4291      	cmp	r1, r2
 800af84:	f200 808a 	bhi.w	800b09c <__ieee754_expf+0x158>
 800af88:	4a4a      	ldr	r2, [pc, #296]	; (800b0b4 <__ieee754_expf+0x170>)
 800af8a:	4291      	cmp	r1, r2
 800af8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af90:	d954      	bls.n	800b03c <__ieee754_expf+0xf8>
 800af92:	4a49      	ldr	r2, [pc, #292]	; (800b0b8 <__ieee754_expf+0x174>)
 800af94:	4291      	cmp	r1, r2
 800af96:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800af9a:	d836      	bhi.n	800b00a <__ieee754_expf+0xc6>
 800af9c:	4947      	ldr	r1, [pc, #284]	; (800b0bc <__ieee754_expf+0x178>)
 800af9e:	4411      	add	r1, r2
 800afa0:	ed91 7a00 	vldr	s14, [r1]
 800afa4:	4946      	ldr	r1, [pc, #280]	; (800b0c0 <__ieee754_expf+0x17c>)
 800afa6:	440a      	add	r2, r1
 800afa8:	edd2 7a00 	vldr	s15, [r2]
 800afac:	ee30 7a47 	vsub.f32	s14, s0, s14
 800afb0:	f1c3 0201 	rsb	r2, r3, #1
 800afb4:	1ad2      	subs	r2, r2, r3
 800afb6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800afba:	ee60 6a00 	vmul.f32	s13, s0, s0
 800afbe:	eddf 5a41 	vldr	s11, [pc, #260]	; 800b0c4 <__ieee754_expf+0x180>
 800afc2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800b0c8 <__ieee754_expf+0x184>
 800afc6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800afca:	eddf 5a40 	vldr	s11, [pc, #256]	; 800b0cc <__ieee754_expf+0x188>
 800afce:	eee5 5a26 	vfma.f32	s11, s10, s13
 800afd2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800b0d0 <__ieee754_expf+0x18c>
 800afd6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800afda:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b0d4 <__ieee754_expf+0x190>
 800afde:	eee5 5a26 	vfma.f32	s11, s10, s13
 800afe2:	eeb0 5a40 	vmov.f32	s10, s0
 800afe6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800afea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afee:	eef0 6a45 	vmov.f32	s13, s10
 800aff2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800aff6:	bb92      	cbnz	r2, 800b05e <__ieee754_expf+0x11a>
 800aff8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800affc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b000:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b004:	ee36 0a40 	vsub.f32	s0, s12, s0
 800b008:	4770      	bx	lr
 800b00a:	4b33      	ldr	r3, [pc, #204]	; (800b0d8 <__ieee754_expf+0x194>)
 800b00c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b0dc <__ieee754_expf+0x198>
 800b010:	4413      	add	r3, r2
 800b012:	edd3 7a00 	vldr	s15, [r3]
 800b016:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b01a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0e0 <__ieee754_expf+0x19c>
 800b01e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b02a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b02e:	eeb0 7a40 	vmov.f32	s14, s0
 800b032:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b0e4 <__ieee754_expf+0x1a0>
 800b036:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b03a:	e7bc      	b.n	800afb6 <__ieee754_expf+0x72>
 800b03c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800b040:	d20b      	bcs.n	800b05a <__ieee754_expf+0x116>
 800b042:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b0ac <__ieee754_expf+0x168>
 800b046:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b04a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b052:	dd02      	ble.n	800b05a <__ieee754_expf+0x116>
 800b054:	ee30 0a06 	vadd.f32	s0, s0, s12
 800b058:	4770      	bx	lr
 800b05a:	2200      	movs	r2, #0
 800b05c:	e7ad      	b.n	800afba <__ieee754_expf+0x76>
 800b05e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b062:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b066:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b06a:	bfb8      	it	lt
 800b06c:	3264      	addlt	r2, #100	; 0x64
 800b06e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b072:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b076:	ee76 7a40 	vsub.f32	s15, s12, s0
 800b07a:	ee17 3a90 	vmov	r3, s15
 800b07e:	bfab      	itete	ge
 800b080:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b084:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b088:	ee00 3a10 	vmovge	s0, r3
 800b08c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800b0e8 <__ieee754_expf+0x1a4>
 800b090:	bfbc      	itt	lt
 800b092:	ee00 3a10 	vmovlt	s0, r3
 800b096:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b09a:	4770      	bx	lr
 800b09c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0a4 <__ieee754_expf+0x160>
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	00000000 	.word	0x00000000
 800b0a8:	42b17217 	.word	0x42b17217
 800b0ac:	7149f2ca 	.word	0x7149f2ca
 800b0b0:	42cff1b5 	.word	0x42cff1b5
 800b0b4:	3eb17218 	.word	0x3eb17218
 800b0b8:	3f851591 	.word	0x3f851591
 800b0bc:	080311f4 	.word	0x080311f4
 800b0c0:	080311fc 	.word	0x080311fc
 800b0c4:	3331bb4c 	.word	0x3331bb4c
 800b0c8:	b5ddea0e 	.word	0xb5ddea0e
 800b0cc:	388ab355 	.word	0x388ab355
 800b0d0:	bb360b61 	.word	0xbb360b61
 800b0d4:	3e2aaaab 	.word	0x3e2aaaab
 800b0d8:	080311ec 	.word	0x080311ec
 800b0dc:	3fb8aa3b 	.word	0x3fb8aa3b
 800b0e0:	3f317180 	.word	0x3f317180
 800b0e4:	3717f7d1 	.word	0x3717f7d1
 800b0e8:	0d800000 	.word	0x0d800000

0800b0ec <__ieee754_logf>:
 800b0ec:	ee10 3a10 	vmov	r3, s0
 800b0f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b0f4:	d106      	bne.n	800b104 <__ieee754_logf+0x18>
 800b0f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b28c <__ieee754_logf+0x1a0>
 800b0fa:	eddf 7a65 	vldr	s15, [pc, #404]	; 800b290 <__ieee754_logf+0x1a4>
 800b0fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b102:	4770      	bx	lr
 800b104:	2b00      	cmp	r3, #0
 800b106:	da02      	bge.n	800b10e <__ieee754_logf+0x22>
 800b108:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b10c:	e7f5      	b.n	800b0fa <__ieee754_logf+0xe>
 800b10e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b112:	db02      	blt.n	800b11a <__ieee754_logf+0x2e>
 800b114:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b118:	4770      	bx	lr
 800b11a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b11e:	bfb8      	it	lt
 800b120:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800b294 <__ieee754_logf+0x1a8>
 800b124:	485c      	ldr	r0, [pc, #368]	; (800b298 <__ieee754_logf+0x1ac>)
 800b126:	bfbe      	ittt	lt
 800b128:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b12c:	f06f 0118 	mvnlt.w	r1, #24
 800b130:	ee17 3a90 	vmovlt	r3, s15
 800b134:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800b138:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b13c:	4418      	add	r0, r3
 800b13e:	bfa8      	it	ge
 800b140:	2100      	movge	r1, #0
 800b142:	3a7f      	subs	r2, #127	; 0x7f
 800b144:	440a      	add	r2, r1
 800b146:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800b14a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800b14e:	4319      	orrs	r1, r3
 800b150:	ee00 1a10 	vmov	s0, r1
 800b154:	4951      	ldr	r1, [pc, #324]	; (800b29c <__ieee754_logf+0x1b0>)
 800b156:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800b15a:	f103 000f 	add.w	r0, r3, #15
 800b15e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b162:	4001      	ands	r1, r0
 800b164:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b168:	bb89      	cbnz	r1, 800b1ce <__ieee754_logf+0xe2>
 800b16a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b172:	d10f      	bne.n	800b194 <__ieee754_logf+0xa8>
 800b174:	2a00      	cmp	r2, #0
 800b176:	f000 8085 	beq.w	800b284 <__ieee754_logf+0x198>
 800b17a:	ee07 2a90 	vmov	s15, r2
 800b17e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b182:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b2a4 <__ieee754_logf+0x1b8>
 800b186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b18a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b18e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b192:	4770      	bx	lr
 800b194:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b2a8 <__ieee754_logf+0x1bc>
 800b198:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b19c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800b1a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a8:	b912      	cbnz	r2, 800b1b0 <__ieee754_logf+0xc4>
 800b1aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b1ae:	4770      	bx	lr
 800b1b0:	ee07 2a90 	vmov	s15, r2
 800b1b4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1bc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b1c0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b1c4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b2a4 <__ieee754_logf+0x1b8>
 800b1c8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b1cc:	4770      	bx	lr
 800b1ce:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b1d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b1d6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b2ac <__ieee754_logf+0x1c0>
 800b1da:	eddf 4a35 	vldr	s9, [pc, #212]	; 800b2b0 <__ieee754_logf+0x1c4>
 800b1de:	4935      	ldr	r1, [pc, #212]	; (800b2b4 <__ieee754_logf+0x1c8>)
 800b1e0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b1e4:	4419      	add	r1, r3
 800b1e6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800b1ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	ee07 2a90 	vmov	s15, r2
 800b1f6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b1fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b1fe:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b202:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800b2b8 <__ieee754_logf+0x1cc>
 800b206:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b20a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800b2bc <__ieee754_logf+0x1d0>
 800b20e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b212:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b2c0 <__ieee754_logf+0x1d4>
 800b216:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b21a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800b2c4 <__ieee754_logf+0x1d8>
 800b21e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b222:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b2c8 <__ieee754_logf+0x1dc>
 800b226:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b22a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b22e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b232:	dd1c      	ble.n	800b26e <__ieee754_logf+0x182>
 800b234:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b238:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b23c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b240:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b244:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b248:	b922      	cbnz	r2, 800b254 <__ieee754_logf+0x168>
 800b24a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b24e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b252:	4770      	bx	lr
 800b254:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b258:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b25c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b264:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b2a4 <__ieee754_logf+0x1b8>
 800b268:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b26c:	4770      	bx	lr
 800b26e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b272:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b276:	2a00      	cmp	r2, #0
 800b278:	d0e9      	beq.n	800b24e <__ieee754_logf+0x162>
 800b27a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b2a0 <__ieee754_logf+0x1b4>
 800b27e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b282:	e7ed      	b.n	800b260 <__ieee754_logf+0x174>
 800b284:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800b290 <__ieee754_logf+0x1a4>
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	cc000000 	.word	0xcc000000
 800b290:	00000000 	.word	0x00000000
 800b294:	4c000000 	.word	0x4c000000
 800b298:	004afb20 	.word	0x004afb20
 800b29c:	007ffff0 	.word	0x007ffff0
 800b2a0:	3717f7d1 	.word	0x3717f7d1
 800b2a4:	3f317180 	.word	0x3f317180
 800b2a8:	3eaaaaab 	.word	0x3eaaaaab
 800b2ac:	3e1cd04f 	.word	0x3e1cd04f
 800b2b0:	3e178897 	.word	0x3e178897
 800b2b4:	ffcf5c30 	.word	0xffcf5c30
 800b2b8:	3e638e29 	.word	0x3e638e29
 800b2bc:	3ecccccd 	.word	0x3ecccccd
 800b2c0:	3e3a3325 	.word	0x3e3a3325
 800b2c4:	3e924925 	.word	0x3e924925
 800b2c8:	3f2aaaab 	.word	0x3f2aaaab

0800b2cc <__ieee754_log10f>:
 800b2cc:	b508      	push	{r3, lr}
 800b2ce:	ee10 2a10 	vmov	r2, s0
 800b2d2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b2d6:	ed2d 8b02 	vpush	{d8}
 800b2da:	d108      	bne.n	800b2ee <__ieee754_log10f+0x22>
 800b2dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b364 <__ieee754_log10f+0x98>
 800b2e0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b368 <__ieee754_log10f+0x9c>
 800b2e4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b2e8:	ecbd 8b02 	vpop	{d8}
 800b2ec:	bd08      	pop	{r3, pc}
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	da02      	bge.n	800b2f8 <__ieee754_log10f+0x2c>
 800b2f2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b2f6:	e7f3      	b.n	800b2e0 <__ieee754_log10f+0x14>
 800b2f8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2fc:	db02      	blt.n	800b304 <__ieee754_log10f+0x38>
 800b2fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b302:	e7f1      	b.n	800b2e8 <__ieee754_log10f+0x1c>
 800b304:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b308:	bfbf      	itttt	lt
 800b30a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800b36c <__ieee754_log10f+0xa0>
 800b30e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b312:	f06f 0118 	mvnlt.w	r1, #24
 800b316:	ee17 2a90 	vmovlt	r2, s15
 800b31a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b31e:	bfa8      	it	ge
 800b320:	2100      	movge	r1, #0
 800b322:	3b7f      	subs	r3, #127	; 0x7f
 800b324:	440b      	add	r3, r1
 800b326:	0fd9      	lsrs	r1, r3, #31
 800b328:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b334:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800b338:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b33c:	ee00 3a10 	vmov	s0, r3
 800b340:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b344:	f7ff fed2 	bl	800b0ec <__ieee754_logf>
 800b348:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b370 <__ieee754_log10f+0xa4>
 800b34c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b350:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b374 <__ieee754_log10f+0xa8>
 800b354:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b358:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b378 <__ieee754_log10f+0xac>
 800b35c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b360:	e7c2      	b.n	800b2e8 <__ieee754_log10f+0x1c>
 800b362:	bf00      	nop
 800b364:	cc000000 	.word	0xcc000000
 800b368:	00000000 	.word	0x00000000
 800b36c:	4c000000 	.word	0x4c000000
 800b370:	3ede5bd9 	.word	0x3ede5bd9
 800b374:	355427db 	.word	0x355427db
 800b378:	3e9a2080 	.word	0x3e9a2080

0800b37c <__ieee754_sqrtf>:
 800b37c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b380:	4770      	bx	lr

0800b382 <finitef>:
 800b382:	b082      	sub	sp, #8
 800b384:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b388:	9801      	ldr	r0, [sp, #4]
 800b38a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b38e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b392:	bfac      	ite	ge
 800b394:	2000      	movge	r0, #0
 800b396:	2001      	movlt	r0, #1
 800b398:	b002      	add	sp, #8
 800b39a:	4770      	bx	lr

0800b39c <nanf>:
 800b39c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b3a4 <nanf+0x8>
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	7fc00000 	.word	0x7fc00000

0800b3a8 <_init>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr

0800b3b4 <_fini>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr
